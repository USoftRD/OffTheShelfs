<?xml version="1.0" encoding="UTF-8"?><?usoft-xml version="1.0" action="multi-tables-import"?><MultiImport><AggregateProtocol_Associations documentName="AggregateProtocol Associations"><T_RDMI_AGGREGATE_PROTOCOL COMPONENT_NAME="OTS_CSV_UTIL" PROTOCOL_NAME="MAKE" DESCRIPTION="" T_RDMI_QUERY_PROTOCOL="N" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" T_RDMI_AGGREGATE_PROTOCOL="Y" AP_EXE_METHOD_NAME="DATAEXE" AP_EXE_METHOD_SEQNO="1" AP_FETCH_METHOD_NAME="DATAFETCH" AP_FETCH_METHOD_SEQNO="1"/></AggregateProtocol_Associations><Component_Constructors documentName="Component Constructors"><T_RDMI_COMPONENT_CONSTRUCTOR COMPONENT_NAME="OTS_CSV_UTIL" DESCRIPTION="The OTS_CSVUTIL is a helper class to handle comma separated values.&#13;&#10;&#13;&#10;To produce a csv from a SQL select statement:&#13;&#10;&#13;&#10;-1- produce a csv string&#13;&#10;&#9;invoke OTS_CSVUTIL.Make with select 'stdout', 'field separator', * from yourtable [where clause] [order by clause]&#13;&#10;&#9;for example: invoke OTS_CSVUTIL.Make with select 'stdout', ',', * from person&#13;&#10;&#13;&#10;-2- produce a csv file&#13;&#10;&#9;invoke OTS_CSVUTIL.Make with select 'your-file-path', 'field separator', * from yourtable [where clause] [order by clause]&#9;&#13;&#10;&#13;&#10;-3- produce a csv file with generated filepath:&#13;&#10;&#9;invoke OTS_CSVUTIL.Make with select '', '', * from yourtable [where clause] [order by clause]&#13;&#10;&#13;&#10;Note: For the Make method, make sure you always pass the first two arguments: filepath|stdout and separator. If you would omit (one of) those, the first selected fields would be interpreted as filepath and/or separator!&#13;&#10;(Of course you could decide to derive the filepath and/or separator field(s) from columns of a table that you add in the SQL FROM clause.)&#13;&#10;&#13;&#10;To produce a csv from USoft's xml.import format passed as inline string or filepath:&#13;&#10;&#13;&#10;-4- produce a string &#13;&#10;&#9;select OTS_CSVUTIL.FromXmlImport( 'the inline xml string or filepath', 'record separator, e.g. ;', 'stdout')&#13;&#10;&#9;for example: select OTS_CSVUTIL.FROMXMLIMPORT( ( invoke xml.export with select * from person), ';', 'stdout' )&#13;&#10;&#13;&#10;-5- produce a csv file &#13;&#10;&#9;select OTS_CSVUTIL.FromXmlImport( 'the inline xml string or filepath', 'record separator, e.g. ;', 'filepath')&#13;&#10;&#13;&#10;-6- produce a csv file with generated filepath&#13;&#10;&#9;select OTS_CSVUTIL.FromXmlImport( 'the inline xml string or filepath', 'record separator, e.g. ;', '')&#13;&#10;&#13;&#10;To produce xml.import format from csv content:&#13;&#10;-7- produce an xml formatted string (a row of headings is expected as the first row)&#13;&#10;&#9;select OTS_CSVUTIL.ToXmlImport('inline csv or filepath', 'field separator, e.g.;', 'result table name', 'stdout', 'optional heading mapping list')&#13;&#10;example:&#13;&#10;select OTS_CSVUTIL.ToXmlImport(&#13;&#10;'PERSON_ID;FIRST_NAME;FAMILY_NAME;ADDRESS;CITY;COUNTRY;AREA_CODE;EMAIL;BANK_ACCOUNT;BIRTH_DATE;GENDER;DISCOUNT;GUIDE;STAFF&#13;&#10;5;Daniel;BROWN;KINGSLEY RD 49;YORK;UK;Y02 2AA;;288234001;1985-06-21T00:00:00;M;1;Y;N&#13;&#10;6;Gerald;DAVIES;THE PANTINES 223II;WALTON-ON-SEA;UK;WA7 6DP;;456666541;1990-11-06T00:00:00;M;5;Y;N&#13;&#10;7;Brigitte;FISHER-SMITH;CLIFF ST 118;FOLKESTONE;UK;F89 R5B;;555483092;1990-09-24T00:00:00;F;10;Y;Y&#13;&#10;137;Hans;VAN DER MEER;KEIZERSGRACHT 802;AMSTERDAM;NL;1435 PP;;445678901;1996-05-11T00:00:00;M;10;Y;N&#13;&#10;1;Albert;SMITH;BROADWAY 35;BOSTON;US;MA 02215;;123456789;1983-12-04T00:00:00;M;5;N;Y',&#13;&#10;&#9;';',&#13;&#10;&#9;'MYTABLE',&#13;&#10;&#9;'stdout', &#13;&#10;&#9;'MY_PERSON_ID;NAME;LASTNAME'&#13;&#10;)&#13;&#10;&#13;&#10;-8- produce an xml  file&#13;&#10;&#9;select OTS_CSVUTIL.ToXmlImport('inline csv or filepath', 'field separator, e.g.;', 'result table name', 'filepath', 'optional heading mapping list')&#13;&#10;&#13;&#10;-9- produce an xml  file  with generated filepath:&#13;&#10;&#9;select OTS_CSVUTIL.ToXmlImport('inline csv or filepath', 'field separator, e.g.;', 'result table name', '', 'optional heading mapping list')&#13;&#10;&#13;&#10;Some advanced test examples (the table PERSON is from USoft's course example: the Travel Agency. Replace with your own table)&#13;&#10;&#13;&#10;Example 1: xml import format  -&gt; csv -&gt; xml import format with new table name and field mapping&#13;&#10;select OTS_CSVUTIL.ToXmlImport&#13;&#10;(&#13;&#10;&#9;OTS_CSVUTIL.FROMXMLIMPORT&#13;&#10;&#9;( &#13;&#10;&#9;&#9;(invoke xml.export with select PERSON_ID,FAMILY_NAME, ADDRESS from person),&#13;&#10;&#9;&#9;';',&#13;&#10;&#9;&#9;'stdout'&#13;&#10;&#9;),&#13;&#10;&#9;';',&#13;&#10;&#9;'MYTABLE',&#13;&#10;&#9;'stdout', &#13;&#10;&#9;'MY_PERSON_ID;NAME;LASTNAME'&#13;&#10;)&#13;&#10;&#13;&#10;Example 2: heading concatenated to plain xml.export -&gt; csv Note that  use of the separator must be consistent in the headings list, the csv data produced and the ToXmlExport (all ',' in this example)&#13;&#10;select OTS_CSVUTIL.ToXmlImport(&#13;&#10;&#9;'ID;NAME' || char(10) || (invoke OTS_CSVUTIL.Make with select 'stdout', ';', PERSON_ID, FIRST_NAME from person),&#13;&#10;&#9;';',&#13;&#10;&#9;'MYTABLE',&#13;&#10;&#9;'stdout', &#13;&#10;&#9;'THE_ID'&#13;&#10;)" T_RDMI_AUTOMATION_SERVER="N" T_RDMI_JAVA_COMPONENT="N" T_RDMI_STATEFUL_COMPONENT="N" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" T_RDMI_WEB_SERVICE_COMPONENT="N" T_RDMI_DOTNET_COMPONENT="Y" T_RDMI_COMPONENT_CONSTRUCTOR="Y" CONSTRUCTOR_SQL="" ACTIVE="N"/></Component_Constructors><Components documentName="Components"><T_RDMI_COMPONENT COMPONENT_NAME="OTS_CSV_UTIL" DESCRIPTION="The OTS_CSVUTIL is a helper class to handle comma separated values.&#13;&#10;&#13;&#10;To produce a csv from a SQL select statement:&#13;&#10;&#13;&#10;-1- produce a csv string&#13;&#10;&#9;invoke OTS_CSVUTIL.Make with select 'stdout', 'field separator', * from yourtable [where clause] [order by clause]&#13;&#10;&#9;for example: invoke OTS_CSVUTIL.Make with select 'stdout', ',', * from person&#13;&#10;&#13;&#10;-2- produce a csv file&#13;&#10;&#9;invoke OTS_CSVUTIL.Make with select 'your-file-path', 'field separator', * from yourtable [where clause] [order by clause]&#9;&#13;&#10;&#13;&#10;-3- produce a csv file with generated filepath:&#13;&#10;&#9;invoke OTS_CSVUTIL.Make with select '', '', * from yourtable [where clause] [order by clause]&#13;&#10;&#13;&#10;Note: For the Make method, make sure you always pass the first two arguments: filepath|stdout and separator. If you would omit (one of) those, the first selected fields would be interpreted as filepath and/or separator!&#13;&#10;(Of course you could decide to derive the filepath and/or separator field(s) from columns of a table that you add in the SQL FROM clause.)&#13;&#10;&#13;&#10;To produce a csv from USoft's xml.import format passed as inline string or filepath:&#13;&#10;&#13;&#10;-4- produce a string &#13;&#10;&#9;select OTS_CSVUTIL.FromXmlImport( 'the inline xml string or filepath', 'record separator, e.g. ;', 'stdout')&#13;&#10;&#9;for example: select OTS_CSVUTIL.FROMXMLIMPORT( ( invoke xml.export with select * from person), ';', 'stdout' )&#13;&#10;&#13;&#10;-5- produce a csv file &#13;&#10;&#9;select OTS_CSVUTIL.FromXmlImport( 'the inline xml string or filepath', 'record separator, e.g. ;', 'filepath')&#13;&#10;&#13;&#10;-6- produce a csv file with generated filepath&#13;&#10;&#9;select OTS_CSVUTIL.FromXmlImport( 'the inline xml string or filepath', 'record separator, e.g. ;', '')&#13;&#10;&#13;&#10;To produce xml.import format from csv content:&#13;&#10;-7- produce an xml formatted string (a row of headings is expected as the first row)&#13;&#10;&#9;select OTS_CSVUTIL.ToXmlImport('inline csv or filepath', 'field separator, e.g.;', 'result table name', 'stdout', 'optional heading mapping list')&#13;&#10;example:&#13;&#10;select OTS_CSVUTIL.ToXmlImport(&#13;&#10;'PERSON_ID;FIRST_NAME;FAMILY_NAME;ADDRESS;CITY;COUNTRY;AREA_CODE;EMAIL;BANK_ACCOUNT;BIRTH_DATE;GENDER;DISCOUNT;GUIDE;STAFF&#13;&#10;5;Daniel;BROWN;KINGSLEY RD 49;YORK;UK;Y02 2AA;;288234001;1985-06-21T00:00:00;M;1;Y;N&#13;&#10;6;Gerald;DAVIES;THE PANTINES 223II;WALTON-ON-SEA;UK;WA7 6DP;;456666541;1990-11-06T00:00:00;M;5;Y;N&#13;&#10;7;Brigitte;FISHER-SMITH;CLIFF ST 118;FOLKESTONE;UK;F89 R5B;;555483092;1990-09-24T00:00:00;F;10;Y;Y&#13;&#10;137;Hans;VAN DER MEER;KEIZERSGRACHT 802;AMSTERDAM;NL;1435 PP;;445678901;1996-05-11T00:00:00;M;10;Y;N&#13;&#10;1;Albert;SMITH;BROADWAY 35;BOSTON;US;MA 02215;;123456789;1983-12-04T00:00:00;M;5;N;Y',&#13;&#10;&#9;';',&#13;&#10;&#9;'MYTABLE',&#13;&#10;&#9;'stdout', &#13;&#10;&#9;'MY_PERSON_ID;NAME;LASTNAME'&#13;&#10;)&#13;&#10;&#13;&#10;-8- produce an xml  file&#13;&#10;&#9;select OTS_CSVUTIL.ToXmlImport('inline csv or filepath', 'field separator, e.g.;', 'result table name', 'filepath', 'optional heading mapping list')&#13;&#10;&#13;&#10;-9- produce an xml  file  with generated filepath:&#13;&#10;&#9;select OTS_CSVUTIL.ToXmlImport('inline csv or filepath', 'field separator, e.g.;', 'result table name', '', 'optional heading mapping list')&#13;&#10;&#13;&#10;Some advanced test examples (the table PERSON is from USoft's course example: the Travel Agency. Replace with your own table)&#13;&#10;&#13;&#10;Example 1: xml import format  -&gt; csv -&gt; xml import format with new table name and field mapping&#13;&#10;select OTS_CSVUTIL.ToXmlImport&#13;&#10;(&#13;&#10;&#9;OTS_CSVUTIL.FROMXMLIMPORT&#13;&#10;&#9;( &#13;&#10;&#9;&#9;(invoke xml.export with select PERSON_ID,FAMILY_NAME, ADDRESS from person),&#13;&#10;&#9;&#9;';',&#13;&#10;&#9;&#9;'stdout'&#13;&#10;&#9;),&#13;&#10;&#9;';',&#13;&#10;&#9;'MYTABLE',&#13;&#10;&#9;'stdout', &#13;&#10;&#9;'MY_PERSON_ID;NAME;LASTNAME'&#13;&#10;)&#13;&#10;&#13;&#10;Example 2: heading concatenated to plain xml.export -&gt; csv Note that  use of the separator must be consistent in the headings list, the csv data produced and the ToXmlExport (all ',' in this example)&#13;&#10;select OTS_CSVUTIL.ToXmlImport(&#13;&#10;&#9;'ID;NAME' || char(10) || (invoke OTS_CSVUTIL.Make with select 'stdout', ';', PERSON_ID, FIRST_NAME from person),&#13;&#10;&#9;';',&#13;&#10;&#9;'MYTABLE',&#13;&#10;&#9;'stdout', &#13;&#10;&#9;'THE_ID'&#13;&#10;)" T_RDMI_AUTOMATION_SERVER="N" T_RDMI_JAVA_COMPONENT="N" T_RDMI_STATEFUL_COMPONENT="N" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" T_RDMI_WEB_SERVICE_COMPONENT="N" T_RDMI_DOTNET_COMPONENT="Y" T_RDMI_COMPONENT_CONSTRUCTOR="Y"/></Components><DotNet_Components documentName="DotNet Components"><T_RDMI_DOTNET_COMPONENT COMPONENT_NAME="OTS_CSV_UTIL" DESCRIPTION="The OTS_CSVUTIL is a helper class to handle comma separated values.&#13;&#10;&#13;&#10;To produce a csv from a SQL select statement:&#13;&#10;&#13;&#10;-1- produce a csv string&#13;&#10;&#9;invoke OTS_CSVUTIL.Make with select 'stdout', 'field separator', * from yourtable [where clause] [order by clause]&#13;&#10;&#9;for example: invoke OTS_CSVUTIL.Make with select 'stdout', ',', * from person&#13;&#10;&#13;&#10;-2- produce a csv file&#13;&#10;&#9;invoke OTS_CSVUTIL.Make with select 'your-file-path', 'field separator', * from yourtable [where clause] [order by clause]&#9;&#13;&#10;&#13;&#10;-3- produce a csv file with generated filepath:&#13;&#10;&#9;invoke OTS_CSVUTIL.Make with select '', '', * from yourtable [where clause] [order by clause]&#13;&#10;&#13;&#10;Note: For the Make method, make sure you always pass the first two arguments: filepath|stdout and separator. If you would omit (one of) those, the first selected fields would be interpreted as filepath and/or separator!&#13;&#10;(Of course you could decide to derive the filepath and/or separator field(s) from columns of a table that you add in the SQL FROM clause.)&#13;&#10;&#13;&#10;To produce a csv from USoft's xml.import format passed as inline string or filepath:&#13;&#10;&#13;&#10;-4- produce a string &#13;&#10;&#9;select OTS_CSVUTIL.FromXmlImport( 'the inline xml string or filepath', 'record separator, e.g. ;', 'stdout')&#13;&#10;&#9;for example: select OTS_CSVUTIL.FROMXMLIMPORT( ( invoke xml.export with select * from person), ';', 'stdout' )&#13;&#10;&#13;&#10;-5- produce a csv file &#13;&#10;&#9;select OTS_CSVUTIL.FromXmlImport( 'the inline xml string or filepath', 'record separator, e.g. ;', 'filepath')&#13;&#10;&#13;&#10;-6- produce a csv file with generated filepath&#13;&#10;&#9;select OTS_CSVUTIL.FromXmlImport( 'the inline xml string or filepath', 'record separator, e.g. ;', '')&#13;&#10;&#13;&#10;To produce xml.import format from csv content:&#13;&#10;-7- produce an xml formatted string (a row of headings is expected as the first row)&#13;&#10;&#9;select OTS_CSVUTIL.ToXmlImport('inline csv or filepath', 'field separator, e.g.;', 'result table name', 'stdout', 'optional heading mapping list')&#13;&#10;example:&#13;&#10;select OTS_CSVUTIL.ToXmlImport(&#13;&#10;'PERSON_ID;FIRST_NAME;FAMILY_NAME;ADDRESS;CITY;COUNTRY;AREA_CODE;EMAIL;BANK_ACCOUNT;BIRTH_DATE;GENDER;DISCOUNT;GUIDE;STAFF&#13;&#10;5;Daniel;BROWN;KINGSLEY RD 49;YORK;UK;Y02 2AA;;288234001;1985-06-21T00:00:00;M;1;Y;N&#13;&#10;6;Gerald;DAVIES;THE PANTINES 223II;WALTON-ON-SEA;UK;WA7 6DP;;456666541;1990-11-06T00:00:00;M;5;Y;N&#13;&#10;7;Brigitte;FISHER-SMITH;CLIFF ST 118;FOLKESTONE;UK;F89 R5B;;555483092;1990-09-24T00:00:00;F;10;Y;Y&#13;&#10;137;Hans;VAN DER MEER;KEIZERSGRACHT 802;AMSTERDAM;NL;1435 PP;;445678901;1996-05-11T00:00:00;M;10;Y;N&#13;&#10;1;Albert;SMITH;BROADWAY 35;BOSTON;US;MA 02215;;123456789;1983-12-04T00:00:00;M;5;N;Y',&#13;&#10;&#9;';',&#13;&#10;&#9;'MYTABLE',&#13;&#10;&#9;'stdout', &#13;&#10;&#9;'MY_PERSON_ID;NAME;LASTNAME'&#13;&#10;)&#13;&#10;&#13;&#10;-8- produce an xml  file&#13;&#10;&#9;select OTS_CSVUTIL.ToXmlImport('inline csv or filepath', 'field separator, e.g.;', 'result table name', 'filepath', 'optional heading mapping list')&#13;&#10;&#13;&#10;-9- produce an xml  file  with generated filepath:&#13;&#10;&#9;select OTS_CSVUTIL.ToXmlImport('inline csv or filepath', 'field separator, e.g.;', 'result table name', '', 'optional heading mapping list')&#13;&#10;&#13;&#10;Some advanced test examples (the table PERSON is from USoft's course example: the Travel Agency. Replace with your own table)&#13;&#10;&#13;&#10;Example 1: xml import format  -&gt; csv -&gt; xml import format with new table name and field mapping&#13;&#10;select OTS_CSVUTIL.ToXmlImport&#13;&#10;(&#13;&#10;&#9;OTS_CSVUTIL.FROMXMLIMPORT&#13;&#10;&#9;( &#13;&#10;&#9;&#9;(invoke xml.export with select PERSON_ID,FAMILY_NAME, ADDRESS from person),&#13;&#10;&#9;&#9;';',&#13;&#10;&#9;&#9;'stdout'&#13;&#10;&#9;),&#13;&#10;&#9;';',&#13;&#10;&#9;'MYTABLE',&#13;&#10;&#9;'stdout', &#13;&#10;&#9;'MY_PERSON_ID;NAME;LASTNAME'&#13;&#10;)&#13;&#10;&#13;&#10;Example 2: heading concatenated to plain xml.export -&gt; csv Note that  use of the separator must be consistent in the headings list, the csv data produced and the ToXmlExport (all ',' in this example)&#13;&#10;select OTS_CSVUTIL.ToXmlImport(&#13;&#10;&#9;'ID;NAME' || char(10) || (invoke OTS_CSVUTIL.Make with select 'stdout', ';', PERSON_ID, FIRST_NAME from person),&#13;&#10;&#9;';',&#13;&#10;&#9;'MYTABLE',&#13;&#10;&#9;'stdout', &#13;&#10;&#9;'THE_ID'&#13;&#10;)" T_RDMI_AUTOMATION_SERVER="N" T_RDMI_JAVA_COMPONENT="N" T_RDMI_STATEFUL_COMPONENT="N" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" T_RDMI_WEB_SERVICE_COMPONENT="N" T_RDMI_DOTNET_COMPONENT="Y" T_RDMI_COMPONENT_CONSTRUCTOR="Y" ASSEMBLYREFS="" PROGRAM_SOURCE="using System;&#13;&#10;using System.IO;&#13;&#10;&#13;&#10;class OTS_CSV_UTIL &#13;&#10;{&#13;&#10;&#9;TextWriter&#9;m_tw = null;&#13;&#10;&#9;string&#9;&#9;m_separator = &quot;,&quot;;&#13;&#10;&#9;bool&#9;&#9;m_useStdout = false;&#13;&#10;&#9;string&#9;&#9;m_filepath = string.Empty;&#13;&#10;&#13;&#10;&#9;public long DataExe(string filepath, string sep, Object[] fields)&#13;&#10;&#9;{&#13;&#10;&#9;&#9;m_separator = string.IsNullOrEmpty(sep) ? &quot;,&quot; : sep;&#13;&#10;&#9;&#9;if(m_tw==null)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;if(string.IsNullOrEmpty(filepath) || filepath.ToLower().Equals(&quot;stdout&quot;))&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;m_useStdout = filepath.ToLower().Equals(&quot;stdout&quot;);&#13;&#10;&#9;&#9;&#9;&#9;filepath = System.IO.Path.GetTempFileName();&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;m_tw = new StreamWriter(filepath);&#13;&#10;&#9;&#9;&#9;m_filepath = filepath;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;for(int i=0; i&lt;fields.Length;i++)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;string field = (string)fields[i];&#13;&#10;&#9;&#9;&#9;string finalField = field;&#13;&#10;&#9;&#9;&#9;if(field.Contains(m_separator))&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;finalField = field.Replace(@&quot;&quot;&quot;&quot;, @&quot;&quot;&quot;&quot;&quot;&quot;);&#13;&#10;&#9;&#9;&#9;&#9;finalField = @&quot;&quot;&quot;&quot; + finalField + @&quot;&quot;&quot;&quot;;&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;m_tw.Write(finalField);&#13;&#10;&#9;&#9;&#9;if(i &lt; fields.Length -1)&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;m_tw.Write(m_separator);&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;m_tw.Write(Environment.NewLine);&#13;&#10;&#9;&#9;return 1;&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;public long DataFetch(out string result)&#13;&#10;&#9;{&#13;&#10;&#9;&#9;result = &quot;No data&quot;;&#13;&#10;&#9;&#9;if(m_tw==null)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;return 1;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;m_tw.Close();&#13;&#10;&#9;&#9;if(m_useStdout)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;result = File.ReadAllText(m_filepath);&#13;&#10;&#9;&#9;&#9;File.Delete(m_filepath);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;result = m_filepath;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;m_tw = null;&#13;&#10;&#9;&#9;return 1;&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;public string ToXmlImport(string text, string sep, string tablename, string filepath, Object[] mappings)&#13;&#10;&#9;{&#13;&#10;&#9;&#9;USoft.UConvert.CSV csv = new USoft.UConvert.CSV();&#13;&#10;&#9;&#9;return csv.TOXMLIMPORT(text, sep, tablename, filepath, mappings);&#13;&#10;&#9;}&#13;&#10;&#9;public static string FromXmlImport(string xml, string separator, string filepath)&#13;&#10;&#9;{&#13;&#10;&#9;&#9;return USoft.UConvert.CSV.FromXmlExport(xml, separator, filepath);&#13;&#10;&#9;}&#13;&#10;}" DOTNET_ACTIVE="Y"/></DotNet_Components><Methods documentName="Methods"><T_RDMI_METHOD COMPONENT_NAME="OTS_CSV_UTIL" METHOD_NAME="DATAEXE" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="dataExe" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_METHOD COMPONENT_NAME="OTS_CSV_UTIL" METHOD_NAME="DATAFETCH" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="dataFetch" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_METHOD COMPONENT_NAME="OTS_CSV_UTIL" METHOD_NAME="FROMXMLIMPORT" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="FromXmlImport" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_METHOD COMPONENT_NAME="OTS_CSV_UTIL" METHOD_NAME="OTS_CSVUTIL" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="OTS_CSVUTIL" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_METHOD COMPONENT_NAME="OTS_CSV_UTIL" METHOD_NAME="TOXMLIMPORT" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="ToXmlImport" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/></Methods><Parameters documentName="Parameters"><T_RDMI_PARAMETER COMPONENT_NAME="OTS_CSV_UTIL" PARAMETER_SEQNO="0" METHOD_NAME="DATAEXE" METHOD_SEQNO="1" PARAMETER_NAME="Return_From_dataExe" KIND="RETURN" PRIMITIVE_DATA_TYPE="LONG" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_CSV_UTIL" PARAMETER_SEQNO="0" METHOD_NAME="DATAFETCH" METHOD_SEQNO="1" PARAMETER_NAME="Return_From_dataFetch" KIND="RETURN" PRIMITIVE_DATA_TYPE="LONG" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_CSV_UTIL" PARAMETER_SEQNO="0" METHOD_NAME="FROMXMLIMPORT" METHOD_SEQNO="1" PARAMETER_NAME="Return_From_FromXmlImport" KIND="RETURN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_CSV_UTIL" PARAMETER_SEQNO="0" METHOD_NAME="TOXMLIMPORT" METHOD_SEQNO="1" PARAMETER_NAME="Return_From_ToXmlImport" KIND="RETURN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_CSV_UTIL" PARAMETER_SEQNO="1" METHOD_NAME="DATAEXE" METHOD_SEQNO="1" PARAMETER_NAME="filepath" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_CSV_UTIL" PARAMETER_SEQNO="1" METHOD_NAME="DATAFETCH" METHOD_SEQNO="1" PARAMETER_NAME="result" KIND="OUT" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_CSV_UTIL" PARAMETER_SEQNO="1" METHOD_NAME="FROMXMLIMPORT" METHOD_SEQNO="1" PARAMETER_NAME="xml" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_CSV_UTIL" PARAMETER_SEQNO="1" METHOD_NAME="TOXMLIMPORT" METHOD_SEQNO="1" PARAMETER_NAME="text" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_CSV_UTIL" PARAMETER_SEQNO="2" METHOD_NAME="DATAEXE" METHOD_SEQNO="1" PARAMETER_NAME="sep" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_CSV_UTIL" PARAMETER_SEQNO="2" METHOD_NAME="FROMXMLIMPORT" METHOD_SEQNO="1" PARAMETER_NAME="separator" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_CSV_UTIL" PARAMETER_SEQNO="2" METHOD_NAME="TOXMLIMPORT" METHOD_SEQNO="1" PARAMETER_NAME="sep" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_CSV_UTIL" PARAMETER_SEQNO="3" METHOD_NAME="DATAEXE" METHOD_SEQNO="1" PARAMETER_NAME="fields" KIND="INLIST" PRIMITIVE_DATA_TYPE="VARIABLE" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_CSV_UTIL" PARAMETER_SEQNO="3" METHOD_NAME="FROMXMLIMPORT" METHOD_SEQNO="1" PARAMETER_NAME="filepath" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_CSV_UTIL" PARAMETER_SEQNO="3" METHOD_NAME="TOXMLIMPORT" METHOD_SEQNO="1" PARAMETER_NAME="tablename" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_CSV_UTIL" PARAMETER_SEQNO="4" METHOD_NAME="TOXMLIMPORT" METHOD_SEQNO="1" PARAMETER_NAME="filepath" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_CSV_UTIL" PARAMETER_SEQNO="5" METHOD_NAME="TOXMLIMPORT" METHOD_SEQNO="1" PARAMETER_NAME="mappings" KIND="INLIST" PRIMITIVE_DATA_TYPE="VARIABLE" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/></Parameters></MultiImport>