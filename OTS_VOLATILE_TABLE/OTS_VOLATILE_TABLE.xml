<?xml version="1.0" encoding="UTF-8"?><?usoft-xml version="1.0" action="multi-tables-import"?><MultiImport><Columns documentName="Columns"><T_COLUMN TABLE_NAME="OTS_VOLATILE_TABLE" COLUMN_NAME="FIELD1" DOMAIN_NAME="OTS_VOLATILETABLE_NCLOB" PROMPT="Key" KEYORDER="1" MANDATORY="Y" INPUT_ALLOWED="Y" UPDATABLE="N" QUERY_ALLOWED="Y" COLUMN_TYPE="D" DISPLAYED="Y" DEF_VALUE="" SEQNO="1" LOFSEQNO="" PERC_FULL="50" PERC_NULL="0" HELP_TEXT="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" UNDER_VC="Y"/><T_COLUMN TABLE_NAME="OTS_VOLATILE_TABLE" COLUMN_NAME="FIELD2" DOMAIN_NAME="OTS_VOLATILETABLE_NCLOB" PROMPT="Value 1" KEYORDER="N" MANDATORY="N" INPUT_ALLOWED="Y" UPDATABLE="Y" QUERY_ALLOWED="Y" COLUMN_TYPE="D" DISPLAYED="Y" DEF_VALUE="" SEQNO="2" LOFSEQNO="" PERC_FULL="50" PERC_NULL="0" HELP_TEXT="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" UNDER_VC="Y"/><T_COLUMN TABLE_NAME="OTS_VOLATILE_TABLE" COLUMN_NAME="FIELD3" DOMAIN_NAME="OTS_VOLATILETABLE_NCLOB" PROMPT="Value 2" KEYORDER="N" MANDATORY="N" INPUT_ALLOWED="Y" UPDATABLE="Y" QUERY_ALLOWED="Y" COLUMN_TYPE="D" DISPLAYED="Y" DEF_VALUE="" SEQNO="3" LOFSEQNO="" PERC_FULL="50" PERC_NULL="0" HELP_TEXT="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" UNDER_VC="Y"/></Columns><Component_Constructors documentName="Component Constructors"><T_RDMI_COMPONENT_CONSTRUCTOR COMPONENT_NAME="OTS_VOLATILE_TABLE" DESCRIPTION="This component implements a volatile in-memory table with 1 up to 10 fields, intended to be used as a component table.&#13;&#10;The first field is interpreted as the key field.&#13;&#10;All fields are stored as strings,&#13;&#10;The constructor SQL is used to:&#13;&#10;-1- define the number of fields (up to 10)&#13;&#10;-2- define initial data in xml format.&#13;&#10;&#13;&#10;A constructorSQL example  for a default volatile table with the max of 10 fields and no initial data:&#13;&#10;select null, null&#13;&#10;&#13;&#10;A constructor SQL example for a volatile table with 3 fields and no initial data:&#13;&#10;select 3, null&#13;&#10;&#13;&#10;A constructor SQL example for a pre-filled volatile table with 3 fields:&#13;&#10;&#13;&#10;select 3,&#13;&#10;'&lt;Volatile_tables documentName=&quot;Volatile tables&quot;&gt;&#13;&#10;&lt;VOLATILETABLE FIELD1=&quot;1&quot; FIELD2=&quot;one&quot; FIELD3=&quot;first&quot;/&gt;&#13;&#10;&lt;VOLATILETABLE FIELD1=&quot;2&quot; FIELD2=&quot;two&quot; FIELD3=&quot;second&quot;/&gt;&#13;&#10;&lt;VOLATILETABLE FIELD1=&quot;3&quot; FIELD2=&quot;three&quot; FIELD3=&quot;third&quot;/&gt;&#13;&#10;&lt;VOLATILETABLE FIELD1=&quot;4&quot; FIELD2=&quot;four&quot; FIELD3=&quot;fourth&quot;/&gt;&#13;&#10;&lt;/Volatile_tables&gt;'&#13;&#10;&#13;&#10;The xml in the constructor can also be passed as a filepath to an xml data file.&#13;&#10;The xml resembles xml.import format but essentialy the attributes /*/*/@* are simply read in order of appearance and assigned to the fields of the table for each /*/* element.&#13;&#10;&#13;&#10;Calling the method OTS_VOLATILE_TABLE.Clear() ( select ots_volatile_table.clear() ) clears the table. Such an operation would be hidden from the rules engine, i.e. a transition constraint would not fire.&#13;&#10;select ots_volatile_table.reset() would clear the table and then re-insert the initial data from the constructor sql, if any ( this also is unseen by the rules engine).&#13;&#10;&#13;&#10;Make sure that a constructor is always available, active and checked (validated).&#13;&#10;After importing this component, the constructor SQL must be checked!" T_RDMI_AUTOMATION_SERVER="N" T_RDMI_JAVA_COMPONENT="N" T_RDMI_STATEFUL_COMPONENT="Y" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" T_RDMI_WEB_SERVICE_COMPONENT="N" T_RDMI_DOTNET_COMPONENT="Y" T_RDMI_COMPONENT_CONSTRUCTOR="Y" CONSTRUCTOR_SQL="/*select null, null */&#13;&#10;&#13;&#10;select 3,&#13;&#10;'&lt;OTS_Volatile_tables documentName=&quot;OTS Volatile tables&quot;&gt;&#13;&#10;&#9;&lt;OTS_VOLATILE_TABLE FIELD1=&quot;1&quot; FIELD2=&quot;one&quot; FIELD3=&quot;First&quot;/&gt;&#13;&#10;&#9;&lt;OTS_VOLATILE_TABLE FIELD1=&quot;2&quot; FIELD2=&quot;two&quot; FIELD3=&quot;Second&quot;/&gt;&#13;&#10;&#9;&lt;OTS_VOLATILE_TABLE FIELD1=&quot;3&quot; FIELD2=&quot;three&quot; FIELD3=&quot;Third&quot;/&gt;&#13;&#10;&#9;&lt;OTS_VOLATILE_TABLE FIELD1=&quot;4&quot; FIELD2=&quot;four&quot; FIELD3=&quot;Fourth&quot;/&gt;&#13;&#10;&lt;/OTS_Volatile_tables&gt;'" ACTIVE="Y"/></Component_Constructors><Components documentName="Components"><T_RDMI_COMPONENT COMPONENT_NAME="OTS_VOLATILE_TABLE" DESCRIPTION="This component implements a volatile in-memory table with 1 up to 10 fields, intended to be used as a component table.&#13;&#10;The first field is interpreted as the key field.&#13;&#10;All fields are stored as strings,&#13;&#10;The constructor SQL is used to:&#13;&#10;-1- define the number of fields (up to 10)&#13;&#10;-2- define initial data in xml format.&#13;&#10;&#13;&#10;A constructorSQL example  for a default volatile table with the max of 10 fields and no initial data:&#13;&#10;select null, null&#13;&#10;&#13;&#10;A constructor SQL example for a volatile table with 3 fields and no initial data:&#13;&#10;select 3, null&#13;&#10;&#13;&#10;A constructor SQL example for a pre-filled volatile table with 3 fields:&#13;&#10;&#13;&#10;select 3,&#13;&#10;'&lt;Volatile_tables documentName=&quot;Volatile tables&quot;&gt;&#13;&#10;&lt;VOLATILETABLE FIELD1=&quot;1&quot; FIELD2=&quot;one&quot; FIELD3=&quot;first&quot;/&gt;&#13;&#10;&lt;VOLATILETABLE FIELD1=&quot;2&quot; FIELD2=&quot;two&quot; FIELD3=&quot;second&quot;/&gt;&#13;&#10;&lt;VOLATILETABLE FIELD1=&quot;3&quot; FIELD2=&quot;three&quot; FIELD3=&quot;third&quot;/&gt;&#13;&#10;&lt;VOLATILETABLE FIELD1=&quot;4&quot; FIELD2=&quot;four&quot; FIELD3=&quot;fourth&quot;/&gt;&#13;&#10;&lt;/Volatile_tables&gt;'&#13;&#10;&#13;&#10;The xml in the constructor can also be passed as a filepath to an xml data file.&#13;&#10;The xml resembles xml.import format but essentialy the attributes /*/*/@* are simply read in order of appearance and assigned to the fields of the table for each /*/* element.&#13;&#10;&#13;&#10;Calling the method OTS_VOLATILE_TABLE.Clear() ( select ots_volatile_table.clear() ) clears the table. Such an operation would be hidden from the rules engine, i.e. a transition constraint would not fire.&#13;&#10;select ots_volatile_table.reset() would clear the table and then re-insert the initial data from the constructor sql, if any ( this also is unseen by the rules engine).&#13;&#10;&#13;&#10;Make sure that a constructor is always available, active and checked (validated).&#13;&#10;After importing this component, the constructor SQL must be checked!" T_RDMI_AUTOMATION_SERVER="N" T_RDMI_JAVA_COMPONENT="N" T_RDMI_STATEFUL_COMPONENT="Y" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" T_RDMI_WEB_SERVICE_COMPONENT="N" T_RDMI_DOTNET_COMPONENT="Y" T_RDMI_COMPONENT_CONSTRUCTOR="Y"/></Components><Domains documentName="Domains"><T_DOMAIN DOMAIN_NAME="OTS_VOLATILETABLE_NCLOB" SUPER_DOMAIN="" DATATYPE="NCLOB" TOTAL_LENGTH="" LENGTH_AFTER_PERIOD="" F_DATATYPE="CHAR" F_TOTAL_LENGTH="1" F_LENGTH_AFTER_PERIOD="" DISPLAY_LENGTH="60" UPPERCASE="N" FIXED_LENGTH="N" IS_SEQNO="N" DEF_VALUE="" RANGE_LOW="" RANGE_HIGH="" HELP_TEXT="" IOFORMAT="" DBFORMAT="" DESCR="" PERC_FULL="50" SEQNO_COMPONENT="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" REGEXP=""/></Domains><DotNet_Components documentName="DotNet Components"><T_RDMI_DOTNET_COMPONENT COMPONENT_NAME="OTS_VOLATILE_TABLE" DESCRIPTION="This component implements a volatile in-memory table with 1 up to 10 fields, intended to be used as a component table.&#13;&#10;The first field is interpreted as the key field.&#13;&#10;All fields are stored as strings,&#13;&#10;The constructor SQL is used to:&#13;&#10;-1- define the number of fields (up to 10)&#13;&#10;-2- define initial data in xml format.&#13;&#10;&#13;&#10;A constructorSQL example  for a default volatile table with the max of 10 fields and no initial data:&#13;&#10;select null, null&#13;&#10;&#13;&#10;A constructor SQL example for a volatile table with 3 fields and no initial data:&#13;&#10;select 3, null&#13;&#10;&#13;&#10;A constructor SQL example for a pre-filled volatile table with 3 fields:&#13;&#10;&#13;&#10;select 3,&#13;&#10;'&lt;Volatile_tables documentName=&quot;Volatile tables&quot;&gt;&#13;&#10;&lt;VOLATILETABLE FIELD1=&quot;1&quot; FIELD2=&quot;one&quot; FIELD3=&quot;first&quot;/&gt;&#13;&#10;&lt;VOLATILETABLE FIELD1=&quot;2&quot; FIELD2=&quot;two&quot; FIELD3=&quot;second&quot;/&gt;&#13;&#10;&lt;VOLATILETABLE FIELD1=&quot;3&quot; FIELD2=&quot;three&quot; FIELD3=&quot;third&quot;/&gt;&#13;&#10;&lt;VOLATILETABLE FIELD1=&quot;4&quot; FIELD2=&quot;four&quot; FIELD3=&quot;fourth&quot;/&gt;&#13;&#10;&lt;/Volatile_tables&gt;'&#13;&#10;&#13;&#10;The xml in the constructor can also be passed as a filepath to an xml data file.&#13;&#10;The xml resembles xml.import format but essentialy the attributes /*/*/@* are simply read in order of appearance and assigned to the fields of the table for each /*/* element.&#13;&#10;&#13;&#10;Calling the method OTS_VOLATILE_TABLE.Clear() ( select ots_volatile_table.clear() ) clears the table. Such an operation would be hidden from the rules engine, i.e. a transition constraint would not fire.&#13;&#10;select ots_volatile_table.reset() would clear the table and then re-insert the initial data from the constructor sql, if any ( this also is unseen by the rules engine).&#13;&#10;&#13;&#10;Make sure that a constructor is always available, active and checked (validated).&#13;&#10;After importing this component, the constructor SQL must be checked!" T_RDMI_AUTOMATION_SERVER="N" T_RDMI_JAVA_COMPONENT="N" T_RDMI_STATEFUL_COMPONENT="Y" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" T_RDMI_WEB_SERVICE_COMPONENT="N" T_RDMI_DOTNET_COMPONENT="Y" T_RDMI_COMPONENT_CONSTRUCTOR="Y" ASSEMBLYREFS="System.Xml.dll" PROGRAM_SOURCE="using System;&#13;&#10;using System.Data;&#13;&#10;using System.Xml;&#13;&#10;using System.Xml.XPath;&#13;&#10;using System.Collections.Generic;&#13;&#10;&#13;&#10;public class OTS_VOLATILE_TABLE&#13;&#10;{&#13;&#10;&#9;private readonly int m_max_fields = 10;&#13;&#10;&#13;&#10;&#9;private DataTable m_table = new DataTable();&#13;&#10;&#9;private string m_initial_data_xml = null;&#13;&#10;    private int m_row_number = 0;&#13;&#10;&#13;&#10;&#9;public OTS_VOLATILE_TABLE(int? n_fields, string initial_data_xml)&#13;&#10;&#9;{&#13;&#10;&#9;&#9;int num_fields = (n_fields == null || n_fields.Value &gt; m_max_fields) ? m_max_fields : n_fields.Value;&#13;&#10;&#9;&#9;for(int i=0; i&lt;num_fields; i++)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;m_table.Columns.Add(i.ToString(), typeof(string));&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;InsertXmlData(initial_data_xml);&#13;&#10;&#9;&#9;m_table.AcceptChanges();&#13;&#10;&#9;&#9;m_initial_data_xml = initial_data_xml;&#13;&#10;&#9;}&#13;&#10;&#9;private void InsertXmlData(string xml)&#13;&#10;&#9;{&#13;&#10;&#9;&#9;if(string.IsNullOrWhiteSpace(xml)) &#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;return;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;xml = xml.Trim();&#13;&#10;&#9;&#9;XmlDocument xml_doc = new XmlDocument();&#13;&#10;&#9;&#9;if(xml.StartsWith(&quot;&lt;&quot;))&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;xml_doc.LoadXml(xml);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;xml_doc.Load(xml);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;XPathNodeIterator ni = xml_doc.CreateNavigator().Select(&quot;/*/*&quot;);&#13;&#10;&#9;&#9;while(ni.MoveNext())&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;XPathNavigator ni_clone = ni.Current.Clone();&#13;&#10;&#9;&#9;&#9;XPathNodeIterator attr = ni_clone.Select(&quot;@*&quot;);&#13;&#10;&#9;&#9;&#9;DataRow dr = m_table.NewRow();&#13;&#10;&#9;&#9;&#9;for(int i=0; i&lt;m_table.Columns.Count; i++)&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;if(attr.MoveNext()) dr[i] = attr.Current.Value;&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;m_table.Rows.Add(dr);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;}&#13;&#10;&#9;public void Reset()&#13;&#10;&#9;{&#13;&#10;&#9;&#9;m_table.Clear();&#13;&#10;&#9;&#9;InsertXmlData(m_initial_data_xml);&#13;&#10;&#9;&#9;m_table.AcceptChanges();&#13;&#10;&#9;}&#13;&#10;&#9;public void Clear()&#13;&#10;&#9;{&#13;&#10;&#9;&#9;m_table.Clear();&#13;&#10;&#9;}&#13;&#10;&#9;public void InsertRow(Object[] fields)&#13;&#10;&#9;{&#13;&#10;&#9;&#9;DataRow dr = m_table.NewRow();&#13;&#10;&#9;&#9;for(int i=0; i&lt;m_table.Columns.Count; i++)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;dr[i] = i &lt; fields.Length ? (string)fields[i] : string.Empty;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;m_table.Rows.Add(dr);&#13;&#10;&#9;}&#13;&#10;&#9;public void UpdateRow(Object[] fields)&#13;&#10;&#9;{&#13;&#10;&#9;&#9;for(int i = 0; i &lt; m_table.Rows.Count; i++)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;DataRow dr = m_table.Rows[i];&#13;&#10;&#9;&#9;&#9;if(dr.RowState == DataRowState.Deleted)&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;continue;&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;if (dr[0].Equals(fields[0]))&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;for(int j=1; j&lt;m_table.Columns.Count; j++)&#13;&#10;&#9;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;&#9;dr[j] = j &lt; fields.Length ? (string)fields[j] : string.Empty;&#13;&#10;&#9;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;}&#13;&#10;&#9;}&#13;&#10;&#9;public void DeleteRow(string field1)&#13;&#10;&#9;{&#13;&#10;&#9;&#9;for(int i = 0; i &lt; m_table.Rows.Count; i++)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;DataRow dr = m_table.Rows[i];&#9;&#13;&#10;&#9;&#9;&#9;if(dr.RowState == DataRowState.Deleted)&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;continue;&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;if (dr[0].Equals(field1))&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;dr.Delete();&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;}&#13;&#10;&#9;}&#13;&#10;&#9;public int QueryExe(Object[] fields)&#13;&#10;&#9;{&#13;&#10;        m_row_number = 0;&#13;&#10;&#9;&#9;return 1;&#13;&#10;&#9;}&#13;&#10;&#9;public int QueryFetch(out string field1, out string field2, out string field3, out string field4, out string field5, out string field6, out string field7, out string field8, out string field9, out string field10)&#13;&#10;&#9;{&#13;&#10;&#9;&#9;field1 = field2 = field3 = field4 = field5 = field6 = field7 = field8 = field9 = field10 = string.Empty;&#13;&#10;&#9;&#9;DataRow row = null;&#13;&#10;&#9;&#9;for(int rn=m_row_number; rn &lt; m_table.Rows.Count; rn++)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;row = m_table.Rows[rn];&#13;&#10;&#9;&#9;&#9;if(row.RowState != DataRowState.Deleted)&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;m_row_number = rn + 1;&#13;&#10;&#9;&#9;&#9;&#9;break;&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;row = null;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;if (row == null)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;return 0;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;field1 = m_table.Columns.Count &gt; 0 ? (string)row[m_table.Columns[0]] : string.Empty;&#13;&#10;&#9;&#9;field2 = m_table.Columns.Count &gt; 1 ? (string)row[m_table.Columns[1]] : string.Empty;&#13;&#10;&#9;&#9;field3 = m_table.Columns.Count &gt; 2 ? (string)row[m_table.Columns[2]] : string.Empty;&#13;&#10;&#9;&#9;field4 = m_table.Columns.Count &gt; 3 ? (string)row[m_table.Columns[3]] : string.Empty;&#13;&#10;&#9;&#9;field5 = m_table.Columns.Count &gt; 4 ? (string)row[m_table.Columns[4]] : string.Empty;&#13;&#10;&#9;&#9;field6 = m_table.Columns.Count &gt; 5 ? (string)row[m_table.Columns[5]] : string.Empty;&#13;&#10;&#9;&#9;field7 = m_table.Columns.Count &gt; 6 ? (string)row[m_table.Columns[6]] : string.Empty;&#13;&#10;&#9;&#9;field8 = m_table.Columns.Count &gt; 7 ? (string)row[m_table.Columns[7]] : string.Empty;&#13;&#10;&#9;&#9;field9 = m_table.Columns.Count &gt; 8 ? (string)row[m_table.Columns[8]] : string.Empty;&#13;&#10;&#9;&#9;field10 = m_table.Columns.Count &gt; 9 ? (string)row[m_table.Columns[9]] : string.Empty;&#13;&#10;&#9;&#9;return 1;&#13;&#10;&#9;}&#13;&#10;&#9;public void Commit()&#13;&#10;&#9;{&#13;&#10;&#9;&#9;m_table.AcceptChanges();&#13;&#10;&#9;}&#13;&#10;&#9;public void Rollback()&#13;&#10;&#9;{&#13;&#10;&#9;&#9;m_table.RejectChanges();&#13;&#10;&#9;}&#13;&#10;}" DOTNET_ACTIVE="Y"/></DotNet_Components><Methods documentName="Methods"><T_RDMI_METHOD COMPONENT_NAME="OTS_VOLATILE_TABLE" METHOD_NAME="CLEAR" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="Clear" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_METHOD COMPONENT_NAME="OTS_VOLATILE_TABLE" METHOD_NAME="COMMIT" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="Commit" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_METHOD COMPONENT_NAME="OTS_VOLATILE_TABLE" METHOD_NAME="DELETEROW" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="DeleteRow" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_METHOD COMPONENT_NAME="OTS_VOLATILE_TABLE" METHOD_NAME="INSERTROW" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="InsertRow" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_METHOD COMPONENT_NAME="OTS_VOLATILE_TABLE" METHOD_NAME="OTS_VOLATILE_TABLE" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="OTS_VOLATILE_TABLE" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_METHOD COMPONENT_NAME="OTS_VOLATILE_TABLE" METHOD_NAME="QUERYEXE" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="QueryExe" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_METHOD COMPONENT_NAME="OTS_VOLATILE_TABLE" METHOD_NAME="QUERYFETCH" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="QueryFetch" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_METHOD COMPONENT_NAME="OTS_VOLATILE_TABLE" METHOD_NAME="RESET" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="Reset" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_METHOD COMPONENT_NAME="OTS_VOLATILE_TABLE" METHOD_NAME="ROLLBACK" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="Rollback" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_METHOD COMPONENT_NAME="OTS_VOLATILE_TABLE" METHOD_NAME="UPDATEROW" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="UpdateRow" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/></Methods><Parameters documentName="Parameters"><T_RDMI_PARAMETER COMPONENT_NAME="OTS_VOLATILE_TABLE" PARAMETER_SEQNO="1" METHOD_NAME="DELETEROW" METHOD_SEQNO="1" PARAMETER_NAME="FIELD1" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_VOLATILE_TABLE" PARAMETER_SEQNO="1" METHOD_NAME="INSERTROW" METHOD_SEQNO="1" PARAMETER_NAME="FIELD1" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_VOLATILE_TABLE" PARAMETER_SEQNO="1" METHOD_NAME="OTS_VOLATILE_TABLE" METHOD_SEQNO="1" PARAMETER_NAME="n_fields" KIND="IN" PRIMITIVE_DATA_TYPE="LONG" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_VOLATILE_TABLE" PARAMETER_SEQNO="1" METHOD_NAME="QUERYEXE" METHOD_SEQNO="1" PARAMETER_NAME="FIELD1" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_VOLATILE_TABLE" PARAMETER_SEQNO="1" METHOD_NAME="QUERYFETCH" METHOD_SEQNO="1" PARAMETER_NAME="FIELD1" KIND="OUT" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_VOLATILE_TABLE" PARAMETER_SEQNO="1" METHOD_NAME="UPDATEROW" METHOD_SEQNO="1" PARAMETER_NAME="FIELD1" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_VOLATILE_TABLE" PARAMETER_SEQNO="2" METHOD_NAME="INSERTROW" METHOD_SEQNO="1" PARAMETER_NAME="FIELD2" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_VOLATILE_TABLE" PARAMETER_SEQNO="2" METHOD_NAME="OTS_VOLATILE_TABLE" METHOD_SEQNO="1" PARAMETER_NAME="initial_data_xml" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_VOLATILE_TABLE" PARAMETER_SEQNO="2" METHOD_NAME="QUERYEXE" METHOD_SEQNO="1" PARAMETER_NAME="FIELD2" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_VOLATILE_TABLE" PARAMETER_SEQNO="2" METHOD_NAME="QUERYFETCH" METHOD_SEQNO="1" PARAMETER_NAME="FIELD2" KIND="OUT" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_VOLATILE_TABLE" PARAMETER_SEQNO="2" METHOD_NAME="UPDATEROW" METHOD_SEQNO="1" PARAMETER_NAME="FIELD2" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_VOLATILE_TABLE" PARAMETER_SEQNO="3" METHOD_NAME="INSERTROW" METHOD_SEQNO="1" PARAMETER_NAME="FIELD3" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_VOLATILE_TABLE" PARAMETER_SEQNO="3" METHOD_NAME="QUERYEXE" METHOD_SEQNO="1" PARAMETER_NAME="FIELD3" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_VOLATILE_TABLE" PARAMETER_SEQNO="3" METHOD_NAME="QUERYFETCH" METHOD_SEQNO="1" PARAMETER_NAME="FIELD3" KIND="OUT" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_VOLATILE_TABLE" PARAMETER_SEQNO="3" METHOD_NAME="UPDATEROW" METHOD_SEQNO="1" PARAMETER_NAME="FIELD3" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_VOLATILE_TABLE" PARAMETER_SEQNO="999" METHOD_NAME="QUERYEXE" METHOD_SEQNO="1" PARAMETER_NAME="Return_From_QueryExe" KIND="RETURN" PRIMITIVE_DATA_TYPE="LONG" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_VOLATILE_TABLE" PARAMETER_SEQNO="999" METHOD_NAME="QUERYFETCH" METHOD_SEQNO="1" PARAMETER_NAME="Return_From_QueryFetch" KIND="RETURN" PRIMITIVE_DATA_TYPE="LONG" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/></Parameters><Query_Protocol_Associations documentName="Query Protocol Associations"><T_RDMI_QUERY_PROTOCOL COMPONENT_NAME="OTS_VOLATILE_TABLE" PROTOCOL_NAME="QUERY" DESCRIPTION="" T_RDMI_QUERY_PROTOCOL="Y" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" T_RDMI_AGGREGATE_PROTOCOL="N" QP_EXE_METHOD_NAME="QUERYEXE" QP_EXE_COMPONENT_NAME="OTS_VOLATILE_TABLE" QP_EXE_METHOD_SEQNO="1" QP_FETCH_COMPONENT_NAME="OTS_VOLATILE_TABLE" QP_FETCH_METHOD_NAME="QUERYFETCH" QP_FETCH_METHOD_SEQNO="1"/></Query_Protocol_Associations><Stateful_Components documentName="Stateful Components"><T_RDMI_STATEFUL_COMPONENT COMPONENT_NAME="OTS_VOLATILE_TABLE" DESCRIPTION="This component implements a volatile in-memory table with 1 up to 10 fields, intended to be used as a component table.&#13;&#10;The first field is interpreted as the key field.&#13;&#10;All fields are stored as strings,&#13;&#10;The constructor SQL is used to:&#13;&#10;-1- define the number of fields (up to 10)&#13;&#10;-2- define initial data in xml format.&#13;&#10;&#13;&#10;A constructorSQL example  for a default volatile table with the max of 10 fields and no initial data:&#13;&#10;select null, null&#13;&#10;&#13;&#10;A constructor SQL example for a volatile table with 3 fields and no initial data:&#13;&#10;select 3, null&#13;&#10;&#13;&#10;A constructor SQL example for a pre-filled volatile table with 3 fields:&#13;&#10;&#13;&#10;select 3,&#13;&#10;'&lt;Volatile_tables documentName=&quot;Volatile tables&quot;&gt;&#13;&#10;&lt;VOLATILETABLE FIELD1=&quot;1&quot; FIELD2=&quot;one&quot; FIELD3=&quot;first&quot;/&gt;&#13;&#10;&lt;VOLATILETABLE FIELD1=&quot;2&quot; FIELD2=&quot;two&quot; FIELD3=&quot;second&quot;/&gt;&#13;&#10;&lt;VOLATILETABLE FIELD1=&quot;3&quot; FIELD2=&quot;three&quot; FIELD3=&quot;third&quot;/&gt;&#13;&#10;&lt;VOLATILETABLE FIELD1=&quot;4&quot; FIELD2=&quot;four&quot; FIELD3=&quot;fourth&quot;/&gt;&#13;&#10;&lt;/Volatile_tables&gt;'&#13;&#10;&#13;&#10;The xml in the constructor can also be passed as a filepath to an xml data file.&#13;&#10;The xml resembles xml.import format but essentialy the attributes /*/*/@* are simply read in order of appearance and assigned to the fields of the table for each /*/* element.&#13;&#10;&#13;&#10;Calling the method OTS_VOLATILE_TABLE.Clear() ( select ots_volatile_table.clear() ) clears the table. Such an operation would be hidden from the rules engine, i.e. a transition constraint would not fire.&#13;&#10;select ots_volatile_table.reset() would clear the table and then re-insert the initial data from the constructor sql, if any ( this also is unseen by the rules engine).&#13;&#10;&#13;&#10;Make sure that a constructor is always available, active and checked (validated).&#13;&#10;After importing this component, the constructor SQL must be checked!" T_RDMI_AUTOMATION_SERVER="N" T_RDMI_JAVA_COMPONENT="N" T_RDMI_STATEFUL_COMPONENT="Y" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" T_RDMI_WEB_SERVICE_COMPONENT="N" T_RDMI_DOTNET_COMPONENT="Y" T_RDMI_COMPONENT_CONSTRUCTOR="Y" LIFETIME="SESSION" TRANSACTIONAL="Y" SUPPORTS_COMMIT="Y" SUPPORTS_ROLLBACK="Y" SUPPORTS_PRECOMMIT="N" SUPPORTS_TABLECOMPONENT="Y" SUPPORTS_UPDATE="Y" SUPPORTS_INSERT="Y" SUPPORTS_DELETE="Y" SUPPORTS_CONDITIONS="N" SUPPORTS_ROWSETSIZEHINT="N"/></Stateful_Components><Tables documentName="Tables"><T_TABLE TABLE_NAME="OTS_VOLATILE_TABLE" TABLE_SHORT="OTS_VOLATILE_TABLE" OBJECT_NAME="OTS Volatile table" OBJECT_NAME_PLURAL="OTS Volatile tables" KEYHIDDEN="N" CRETAB="N" UPDATED="Y" STATIC_TABLE="N" INIT_NR_OF_ROWS="1000" NEXT_NR_OF_ROWS="500" T_SUBT_SUPERTYPE="" T_SUBT_SEPARATE_TABLE="Y" DELETE_SUPER_ON_DELETE="N" T_LOGICAL_VIEW="N" T_COMPONENT_TABLE="Y" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" INTERFACE_SOURCE="" UNDER_VC="N" DELIVERABLE="N"/></Tables></MultiImport>