<?xml version="1.0" encoding="UTF-8"?><?usoft-xml version="1.0" action="multi-tables-import"?><MultiImport><Columns documentName="Columns"><T_COLUMN TABLE_NAME="OTS_WIN_NETWORK" COLUMN_NAME="DESCRIPTION" DOMAIN_NAME="OTS_WIN_NETWORK_STRING" PROMPT="Description" KEYORDER="N" MANDATORY="N" INPUT_ALLOWED="Y" UPDATABLE="N" QUERY_ALLOWED="Y" COLUMN_TYPE="D" DISPLAYED="Y" DEF_VALUE="" SEQNO="4" LOFSEQNO="" PERC_FULL="50" PERC_NULL="0" HELP_TEXT="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" UNDER_VC="Y"/><T_COLUMN TABLE_NAME="OTS_WIN_NETWORK" COLUMN_NAME="GWADDRESS" DOMAIN_NAME="OTS_WIN_NETWORK_STRING" PROMPT="Default Gateway" KEYORDER="N" MANDATORY="N" INPUT_ALLOWED="Y" UPDATABLE="Y" QUERY_ALLOWED="Y" COLUMN_TYPE="D" DISPLAYED="Y" DEF_VALUE="" SEQNO="6" LOFSEQNO="" PERC_FULL="50" PERC_NULL="50" HELP_TEXT="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" UNDER_VC="Y"/><T_COLUMN TABLE_NAME="OTS_WIN_NETWORK" COLUMN_NAME="INTERFACETYPE" DOMAIN_NAME="OTS_WIN_NETWORK_STRING" PROMPT="Interface type" KEYORDER="N" MANDATORY="N" INPUT_ALLOWED="Y" UPDATABLE="Y" QUERY_ALLOWED="Y" COLUMN_TYPE="D" DISPLAYED="Y" DEF_VALUE="" SEQNO="3" LOFSEQNO="" PERC_FULL="50" PERC_NULL="50" HELP_TEXT="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" UNDER_VC="Y"/><T_COLUMN TABLE_NAME="OTS_WIN_NETWORK" COLUMN_NAME="IPADDRESS" DOMAIN_NAME="OTS_WIN_NETWORK_STRING" PROMPT="IP4 Address" KEYORDER="N" MANDATORY="N" INPUT_ALLOWED="Y" UPDATABLE="Y" QUERY_ALLOWED="Y" COLUMN_TYPE="D" DISPLAYED="Y" DEF_VALUE="" SEQNO="5" LOFSEQNO="" PERC_FULL="50" PERC_NULL="50" HELP_TEXT="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" UNDER_VC="Y"/><T_COLUMN TABLE_NAME="OTS_WIN_NETWORK" COLUMN_NAME="NAME" DOMAIN_NAME="OTS_WIN_NETWORK_STRING" PROMPT="Name" KEYORDER="1" MANDATORY="Y" INPUT_ALLOWED="Y" UPDATABLE="N" QUERY_ALLOWED="Y" COLUMN_TYPE="D" DISPLAYED="Y" DEF_VALUE="" SEQNO="1" LOFSEQNO="" PERC_FULL="50" PERC_NULL="0" HELP_TEXT="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" UNDER_VC="Y"/><T_COLUMN TABLE_NAME="OTS_WIN_NETWORK" COLUMN_NAME="STATUS" DOMAIN_NAME="OTS_WIN_NETWORK_STRING" PROMPT="Operational status" KEYORDER="N" MANDATORY="N" INPUT_ALLOWED="Y" UPDATABLE="N" QUERY_ALLOWED="Y" COLUMN_TYPE="D" DISPLAYED="Y" DEF_VALUE="" SEQNO="2" LOFSEQNO="" PERC_FULL="50" PERC_NULL="0" HELP_TEXT="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" UNDER_VC="Y"/></Columns><Component_Constructors documentName="Component Constructors"><T_RDMI_COMPONENT_CONSTRUCTOR COMPONENT_NAME="OTS_WIN_NETWORK" DESCRIPTION="This OTS_WIN_NETWORK component interacts with the Windows network.&#13;&#10;A table component OTS_WIN_NETWORK is also available to instantly query networks as records.&#13;&#10;Once the OTS_WIN_NETWORK component is added to the USoft Definer you can:&#13;&#10;&#9;-Open the application and query the Windows Network table (i.e. the OTS_WIN_NETWORK table)&#13;&#10;&#9;-Open SqlCommand in the application and use method calls.&#13;&#10;&#13;&#10;Method call examples:&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.hostname()&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.DnsHostAddresses('localhost')&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.LocalIPAddress()&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.WIFIADDRESS()&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.IsNetworkAvailable()&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.ListNetwork()&#13;&#10;&#13;&#10;invoke OTS_WIN_NETWORK.Query with select null&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.Wifi()&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.wificonnected('USoftGuest')&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.ping('localhost')" T_RDMI_AUTOMATION_SERVER="N" T_RDMI_JAVA_COMPONENT="N" T_RDMI_STATEFUL_COMPONENT="Y" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" T_RDMI_WEB_SERVICE_COMPONENT="N" T_RDMI_DOTNET_COMPONENT="Y" T_RDMI_COMPONENT_CONSTRUCTOR="Y" CONSTRUCTOR_SQL="" ACTIVE="N"/></Component_Constructors><Components documentName="Components"><T_RDMI_COMPONENT COMPONENT_NAME="OTS_WIN_NETWORK" DESCRIPTION="This OTS_WIN_NETWORK component interacts with the Windows network.&#13;&#10;A table component OTS_WIN_NETWORK is also available to instantly query networks as records.&#13;&#10;Once the OTS_WIN_NETWORK component is added to the USoft Definer you can:&#13;&#10;&#9;-Open the application and query the Windows Network table (i.e. the OTS_WIN_NETWORK table)&#13;&#10;&#9;-Open SqlCommand in the application and use method calls.&#13;&#10;&#13;&#10;Method call examples:&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.hostname()&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.DnsHostAddresses('localhost')&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.LocalIPAddress()&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.WIFIADDRESS()&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.IsNetworkAvailable()&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.ListNetwork()&#13;&#10;&#13;&#10;invoke OTS_WIN_NETWORK.Query with select null&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.Wifi()&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.wificonnected('USoftGuest')&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.ping('localhost')" T_RDMI_AUTOMATION_SERVER="N" T_RDMI_JAVA_COMPONENT="N" T_RDMI_STATEFUL_COMPONENT="Y" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" T_RDMI_WEB_SERVICE_COMPONENT="N" T_RDMI_DOTNET_COMPONENT="Y" T_RDMI_COMPONENT_CONSTRUCTOR="Y"/></Components><Domains documentName="Domains"><T_DOMAIN DOMAIN_NAME="OTS_WIN_NETWORK_STRING" SUPER_DOMAIN="" DATATYPE="NVARCHAR" TOTAL_LENGTH="255" LENGTH_AFTER_PERIOD="" F_DATATYPE="CHAR" F_TOTAL_LENGTH="1" F_LENGTH_AFTER_PERIOD="" DISPLAY_LENGTH="60" UPPERCASE="N" FIXED_LENGTH="N" IS_SEQNO="N" DEF_VALUE="" RANGE_LOW="" RANGE_HIGH="" HELP_TEXT="" IOFORMAT="" DBFORMAT="" DESCR="" PERC_FULL="50" SEQNO_COMPONENT="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" REGEXP=""/></Domains><DotNet_Components documentName="DotNet Components"><T_RDMI_DOTNET_COMPONENT COMPONENT_NAME="OTS_WIN_NETWORK" DESCRIPTION="This OTS_WIN_NETWORK component interacts with the Windows network.&#13;&#10;A table component OTS_WIN_NETWORK is also available to instantly query networks as records.&#13;&#10;Once the OTS_WIN_NETWORK component is added to the USoft Definer you can:&#13;&#10;&#9;-Open the application and query the Windows Network table (i.e. the OTS_WIN_NETWORK table)&#13;&#10;&#9;-Open SqlCommand in the application and use method calls.&#13;&#10;&#13;&#10;Method call examples:&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.hostname()&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.DnsHostAddresses('localhost')&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.LocalIPAddress()&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.WIFIADDRESS()&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.IsNetworkAvailable()&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.ListNetwork()&#13;&#10;&#13;&#10;invoke OTS_WIN_NETWORK.Query with select null&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.Wifi()&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.wificonnected('USoftGuest')&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.ping('localhost')" T_RDMI_AUTOMATION_SERVER="N" T_RDMI_JAVA_COMPONENT="N" T_RDMI_STATEFUL_COMPONENT="Y" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" T_RDMI_WEB_SERVICE_COMPONENT="N" T_RDMI_DOTNET_COMPONENT="Y" T_RDMI_COMPONENT_CONSTRUCTOR="Y" ASSEMBLYREFS="System.Xml.dll" PROGRAM_SOURCE="using System;&#13;&#10;using System.Xml.XPath;&#13;&#10;using USoft.Net;&#13;&#10;&#13;&#10;class OTS_WIN_NETWORK&#13;&#10;{&#13;&#10;&#9;XPathNodeIterator m_nodes;&#13;&#10;&#13;&#10;&#9;public string HostName()&#13;&#10;&#9;{&#13;&#10;&#9;&#9;return WNetwork.HostName();&#13;&#10;&#9;}&#13;&#10;&#9;public string LocalIPAddress()&#13;&#10;&#9;{&#13;&#10;&#9;&#9;return WNetwork.LocalIPAddress();&#13;&#10;&#9;}&#13;&#10;&#9;public string DnsHostAddresses(string hostname)&#13;&#10;&#9;{&#13;&#10;&#9;&#9;XPathNodeIterator n = WNetwork.DnsHostAddresses(hostname);&#13;&#10;&#9;&#9;if(!n.MoveNext())&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;return string.Empty;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;return n.Current.InnerXml;&#13;&#10;&#9;}&#13;&#10;&#9;public bool IsNetworkAvailable()&#13;&#10;&#9;{&#13;&#10;&#9;&#9;return WNetwork.IsNetworkAvailable();&#13;&#10;&#9;}&#13;&#10;&#9;public string WifiAddress()&#13;&#10;&#9;{&#13;&#10;&#9;&#9;XPathNodeIterator n = WNetwork.ListNetwork();&#13;&#10;&#9;&#9;if(!n.MoveNext())&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;return string.Empty;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;XPathNodeIterator wifis = n.Current.Select(&quot;/NetworkInfo/Adapter[@OperationalStatus='Up'][contains(@NetworkInterfaceType, 'Wireless')]/*[contains(name(),'IPAd')]&quot;); &#13;&#10;&#9;&#9;// IPADDRESS but old version had spelling error IPAdress&#13;&#10;&#9;&#9;if(!wifis.MoveNext())&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;return string.Empty;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;string address = wifis.Current.GetAttribute(&quot;Address&quot;, string.Empty);&#13;&#10;&#9;&#9;if(string.IsNullOrEmpty(address)) address = wifis.Current.GetAttribute(&quot;Adress&quot;, string.Empty);&#13;&#10;&#9;&#9;return address;&#13;&#10;&#9;}&#13;&#10;&#9;public string ListNetwork()&#13;&#10;&#9;{&#13;&#10;&#9;&#9;XPathNodeIterator n = WNetwork.ListNetwork();&#13;&#10;&#9;&#9;if(!n.MoveNext()) return string.Empty;&#13;&#10;&#9;&#9;return n.Current.InnerXml;&#13;&#10;&#9;}&#13;&#10;&#9;public string Wifi()&#13;&#10;&#9;{&#13;&#10;&#9;&#9;XPathNodeIterator n = WNetwork.wifi();&#13;&#10;&#9;&#9;if(!n.MoveNext()) return string.Empty;&#13;&#10;&#9;&#9;&#9;return n.Current.InnerXml;&#13;&#10;&#9;}&#13;&#10;&#9;public bool WifiConnected(string ssid)&#13;&#10;&#9;{&#13;&#10;&#9;&#9;XPathNodeIterator n = WNetwork.wifi();&#13;&#10;&#9;&#9;if(!n.MoveNext()) return false;&#13;&#10;&#9;&#9;XPathNodeIterator connectedwifi = n.Current.Select(string.Format(&quot;//nic[@ssid='{0}']&quot;, ssid));&#13;&#10;&#9;&#9;if(!connectedwifi.MoveNext()) return false;&#13;&#10;&#9;&#9;return true;&#13;&#10;&#9;}&#13;&#10;&#9;// returns IPStatus (e.g. Success) followed by roundtrip time in milliseconds &#13;&#10;&#9;public string Ping(string hostname)&#13;&#10;&#9;{&#13;&#10;&#9;&#9;return WNetwork.Ping(hostname);&#13;&#10;&#9;}&#13;&#10;&#9;public int QueryExe(string dummy)&#13;&#10;&#9;{&#13;&#10;&#9;&#9;XPathNodeIterator n = WNetwork.ListNetwork();&#13;&#10;&#9;&#9;if(!n.MoveNext()) return 0;&#13;&#10;&#9;&#9;m_nodes = n.Current.Select(&quot;//Adapter&quot;);&#13;&#10;&#9;&#9;return 1;&#13;&#10;&#9;}&#13;&#10;&#9;public int QueryFetch(out string name, out string status, out string interfaceType, out string description, out string IPAddress, out string GWAddress)&#13;&#10;&#9;{&#13;&#10;&#9;&#9;name = status = interfaceType = description = IPAddress = GWAddress = string.Empty;&#13;&#10;&#9;&#9;if(!m_nodes.MoveNext()) return 0;&#13;&#10;&#9;&#9;name = m_nodes.Current.GetAttribute(&quot;Name&quot;, string.Empty);&#13;&#10;&#9;&#9;status = m_nodes.Current.GetAttribute(&quot;OperationalStatus&quot;, string.Empty);&#13;&#10;&#9;&#9;interfaceType = m_nodes.Current.GetAttribute(&quot;NetworkInterfaceType&quot;, string.Empty);&#13;&#10;&#9;&#9;description = m_nodes.Current.GetAttribute(&quot;Description&quot;, string.Empty);&#13;&#10;&#9;&#9;XPathNodeIterator itIPAddress = m_nodes.Current.Select(&quot;IPAddress&quot;);&#13;&#10;&#9;&#9;if(itIPAddress.MoveNext())&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;IPAddress = itIPAddress.Current.GetAttribute(&quot;Address&quot;, string.Empty);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;XPathNodeIterator itGWAddress = m_nodes.Current.Select(&quot;Address&quot;);&#13;&#10;&#9;&#9;if(itGWAddress.MoveNext())&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;GWAddress = itGWAddress.Current.GetAttribute(&quot;Address&quot;, string.Empty);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;return 1;&#13;&#10;&#9;}&#13;&#10;}" DOTNET_ACTIVE="Y"/></DotNet_Components><Methods documentName="Methods"><T_RDMI_METHOD COMPONENT_NAME="OTS_WIN_NETWORK" METHOD_NAME="DNSHOSTADDRESSES" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="DnsHostAddresses" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_METHOD COMPONENT_NAME="OTS_WIN_NETWORK" METHOD_NAME="HOSTNAME" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="HostName" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_METHOD COMPONENT_NAME="OTS_WIN_NETWORK" METHOD_NAME="ISNETWORKAVAILABLE" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="IsNetworkAvailable" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_METHOD COMPONENT_NAME="OTS_WIN_NETWORK" METHOD_NAME="LISTNETWORK" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="ListNetwork" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_METHOD COMPONENT_NAME="OTS_WIN_NETWORK" METHOD_NAME="LOCALIPADDRESS" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="LocalIPAddress" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_METHOD COMPONENT_NAME="OTS_WIN_NETWORK" METHOD_NAME="OTS_WIN_NETWORK" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="OTS_WIN_NETWORK" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_METHOD COMPONENT_NAME="OTS_WIN_NETWORK" METHOD_NAME="PING" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="Ping" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_METHOD COMPONENT_NAME="OTS_WIN_NETWORK" METHOD_NAME="QUERYEXE" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="QueryExe" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_METHOD COMPONENT_NAME="OTS_WIN_NETWORK" METHOD_NAME="QUERYFETCH" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="QueryFetch" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_METHOD COMPONENT_NAME="OTS_WIN_NETWORK" METHOD_NAME="WIFI" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="Wifi" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_METHOD COMPONENT_NAME="OTS_WIN_NETWORK" METHOD_NAME="WIFIADDRESS" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="WifiAddress" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_METHOD COMPONENT_NAME="OTS_WIN_NETWORK" METHOD_NAME="WIFICONNECTED" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="WifiConnected" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/></Methods><Parameters documentName="Parameters"><T_RDMI_PARAMETER COMPONENT_NAME="OTS_WIN_NETWORK" PARAMETER_SEQNO="0" METHOD_NAME="DNSHOSTADDRESSES" METHOD_SEQNO="1" PARAMETER_NAME="Return_From_DnsHostAddresses" KIND="RETURN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_WIN_NETWORK" PARAMETER_SEQNO="0" METHOD_NAME="HOSTNAME" METHOD_SEQNO="1" PARAMETER_NAME="Return_From_HostName" KIND="RETURN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_WIN_NETWORK" PARAMETER_SEQNO="0" METHOD_NAME="ISNETWORKAVAILABLE" METHOD_SEQNO="1" PARAMETER_NAME="Return_From_IsNetworkAvailable" KIND="RETURN" PRIMITIVE_DATA_TYPE="BOOLEAN" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_WIN_NETWORK" PARAMETER_SEQNO="0" METHOD_NAME="LISTNETWORK" METHOD_SEQNO="1" PARAMETER_NAME="Return_From_ListNetwork" KIND="RETURN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_WIN_NETWORK" PARAMETER_SEQNO="0" METHOD_NAME="LOCALIPADDRESS" METHOD_SEQNO="1" PARAMETER_NAME="Return_From_LocalIPAddress" KIND="RETURN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_WIN_NETWORK" PARAMETER_SEQNO="0" METHOD_NAME="PING" METHOD_SEQNO="1" PARAMETER_NAME="Return_From_Ping" KIND="RETURN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_WIN_NETWORK" PARAMETER_SEQNO="0" METHOD_NAME="WIFI" METHOD_SEQNO="1" PARAMETER_NAME="Return_From_Wifi" KIND="RETURN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_WIN_NETWORK" PARAMETER_SEQNO="0" METHOD_NAME="WIFIADDRESS" METHOD_SEQNO="1" PARAMETER_NAME="Return_From_WifiAddress" KIND="RETURN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_WIN_NETWORK" PARAMETER_SEQNO="0" METHOD_NAME="WIFICONNECTED" METHOD_SEQNO="1" PARAMETER_NAME="Return_From_WifiConnected" KIND="RETURN" PRIMITIVE_DATA_TYPE="BOOLEAN" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_WIN_NETWORK" PARAMETER_SEQNO="1" METHOD_NAME="DNSHOSTADDRESSES" METHOD_SEQNO="1" PARAMETER_NAME="hostname" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_WIN_NETWORK" PARAMETER_SEQNO="1" METHOD_NAME="PING" METHOD_SEQNO="1" PARAMETER_NAME="hostname" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_WIN_NETWORK" PARAMETER_SEQNO="1" METHOD_NAME="QUERYEXE" METHOD_SEQNO="1" PARAMETER_NAME="CONDITIONS" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_WIN_NETWORK" PARAMETER_SEQNO="1" METHOD_NAME="QUERYFETCH" METHOD_SEQNO="1" PARAMETER_NAME="NAME" KIND="OUT" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_WIN_NETWORK" PARAMETER_SEQNO="1" METHOD_NAME="WIFICONNECTED" METHOD_SEQNO="1" PARAMETER_NAME="ssid" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_WIN_NETWORK" PARAMETER_SEQNO="2" METHOD_NAME="QUERYFETCH" METHOD_SEQNO="1" PARAMETER_NAME="STATUS" KIND="OUT" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_WIN_NETWORK" PARAMETER_SEQNO="3" METHOD_NAME="QUERYFETCH" METHOD_SEQNO="1" PARAMETER_NAME="INTERFACETYPE" KIND="OUT" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_WIN_NETWORK" PARAMETER_SEQNO="4" METHOD_NAME="QUERYFETCH" METHOD_SEQNO="1" PARAMETER_NAME="DESCRIPTION" KIND="OUT" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_WIN_NETWORK" PARAMETER_SEQNO="5" METHOD_NAME="QUERYFETCH" METHOD_SEQNO="1" PARAMETER_NAME="IPADDRESS" KIND="OUT" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_WIN_NETWORK" PARAMETER_SEQNO="6" METHOD_NAME="QUERYFETCH" METHOD_SEQNO="1" PARAMETER_NAME="GWADDRESS" KIND="OUT" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_WIN_NETWORK" PARAMETER_SEQNO="999" METHOD_NAME="QUERYEXE" METHOD_SEQNO="1" PARAMETER_NAME="Return_From_QueryExe" KIND="RETURN" PRIMITIVE_DATA_TYPE="LONG" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/><T_RDMI_PARAMETER COMPONENT_NAME="OTS_WIN_NETWORK" PARAMETER_SEQNO="999" METHOD_NAME="QUERYFETCH" METHOD_SEQNO="1" PARAMETER_NAME="Return_From_QueryFetch" KIND="RETURN" PRIMITIVE_DATA_TYPE="LONG" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/></Parameters><Query_Protocol_Associations documentName="Query Protocol Associations"><T_RDMI_QUERY_PROTOCOL COMPONENT_NAME="OTS_WIN_NETWORK" PROTOCOL_NAME="QUERY" DESCRIPTION="" T_RDMI_QUERY_PROTOCOL="Y" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" T_RDMI_AGGREGATE_PROTOCOL="N" QP_EXE_METHOD_NAME="QUERYEXE" QP_EXE_COMPONENT_NAME="OTS_WIN_NETWORK" QP_EXE_METHOD_SEQNO="1" QP_FETCH_COMPONENT_NAME="OTS_WIN_NETWORK" QP_FETCH_METHOD_NAME="QUERYFETCH" QP_FETCH_METHOD_SEQNO="1"/></Query_Protocol_Associations><Stateful_Components documentName="Stateful Components"><T_RDMI_STATEFUL_COMPONENT COMPONENT_NAME="OTS_WIN_NETWORK" DESCRIPTION="This OTS_WIN_NETWORK component interacts with the Windows network.&#13;&#10;A table component OTS_WIN_NETWORK is also available to instantly query networks as records.&#13;&#10;Once the OTS_WIN_NETWORK component is added to the USoft Definer you can:&#13;&#10;&#9;-Open the application and query the Windows Network table (i.e. the OTS_WIN_NETWORK table)&#13;&#10;&#9;-Open SqlCommand in the application and use method calls.&#13;&#10;&#13;&#10;Method call examples:&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.hostname()&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.DnsHostAddresses('localhost')&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.LocalIPAddress()&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.WIFIADDRESS()&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.IsNetworkAvailable()&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.ListNetwork()&#13;&#10;&#13;&#10;invoke OTS_WIN_NETWORK.Query with select null&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.Wifi()&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.wificonnected('USoftGuest')&#13;&#10;&#13;&#10;select OTS_WIN_NETWORK.ping('localhost')" T_RDMI_AUTOMATION_SERVER="N" T_RDMI_JAVA_COMPONENT="N" T_RDMI_STATEFUL_COMPONENT="Y" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" T_RDMI_WEB_SERVICE_COMPONENT="N" T_RDMI_DOTNET_COMPONENT="Y" T_RDMI_COMPONENT_CONSTRUCTOR="Y" LIFETIME="SESSION" TRANSACTIONAL="N" SUPPORTS_COMMIT="N" SUPPORTS_ROLLBACK="N" SUPPORTS_PRECOMMIT="N" SUPPORTS_TABLECOMPONENT="Y" SUPPORTS_UPDATE="N" SUPPORTS_INSERT="N" SUPPORTS_DELETE="N" SUPPORTS_CONDITIONS="Y" SUPPORTS_ROWSETSIZEHINT="N"/></Stateful_Components><Tables documentName="Tables"><T_TABLE TABLE_NAME="OTS_WIN_NETWORK" TABLE_SHORT="OTS_WIN_NETWORK" OBJECT_NAME="Windows Network" OBJECT_NAME_PLURAL="Windows Networks" KEYHIDDEN="N" CRETAB="N" UPDATED="Y" STATIC_TABLE="N" INIT_NR_OF_ROWS="1000" NEXT_NR_OF_ROWS="500" T_SUBT_SUPERTYPE="" T_SUBT_SEPARATE_TABLE="Y" DELETE_SUPER_ON_DELETE="N" T_LOGICAL_VIEW="N" T_COMPONENT_TABLE="Y" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" INTERFACE_SOURCE="" UNDER_VC="N" DELIVERABLE="N"/></Tables></MultiImport>