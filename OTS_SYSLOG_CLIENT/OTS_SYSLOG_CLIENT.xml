<?usoft-xml version="1.0" action="multi-tables-import"?><MultiImport type="component" objectName="OTS_SYSLOG_CLIENT"><Components documentName="Components">
<T_RDMI_COMPONENT COMPONENT_NAME="OTS_SYSLOG_CLIENT" DESCRIPTION="" T_RDMI_AUTOMATION_SERVER="N" T_RDMI_JAVA_COMPONENT="N" T_RDMI_STATEFUL_COMPONENT="N" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" T_RDMI_WEB_SERVICE_COMPONENT="N" T_RDMI_DOTNET_COMPONENT="Y" T_RDMI_COMPONENT_CONSTRUCTOR="Y"/>
</Components><Component_Constructors documentName="Component Constructors">
<T_RDMI_COMPONENT_CONSTRUCTOR COMPONENT_NAME="OTS_SYSLOG_CLIENT" DESCRIPTION="" T_RDMI_AUTOMATION_SERVER="N" T_RDMI_JAVA_COMPONENT="N" T_RDMI_STATEFUL_COMPONENT="N" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" T_RDMI_WEB_SERVICE_COMPONENT="N" T_RDMI_DOTNET_COMPONENT="Y" T_RDMI_COMPONENT_CONSTRUCTOR="Y" CONSTRUCTOR_SQL="" ACTIVE="N"/>
</Component_Constructors><DotNet_Components documentName="DotNet Components">
<T_RDMI_DOTNET_COMPONENT COMPONENT_NAME="OTS_SYSLOG_CLIENT" DESCRIPTION="" T_RDMI_AUTOMATION_SERVER="N" T_RDMI_JAVA_COMPONENT="N" T_RDMI_STATEFUL_COMPONENT="N" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" T_RDMI_WEB_SERVICE_COMPONENT="N" T_RDMI_DOTNET_COMPONENT="Y" T_RDMI_COMPONENT_CONSTRUCTOR="Y" ASSEMBLYREFS="System.Core.dll; System.Xml.dll; System.Collections.dll;System.Linq.dll;" PROGRAM_SOURCE="using System;&#13;&#10;using System.IO;&#13;&#10;using System.Text;&#13;&#10;using System.Linq;&#13;&#10;using System.Xml;&#13;&#10;using System.Threading;&#13;&#10;using System.Collections.Generic;&#13;&#10;using System.Net.Sockets;&#13;&#10;using System.Text;&#13;&#10;using SyslogNet.Client;&#13;&#10;using SyslogNet.Client.Serialization;&#13;&#10;using SyslogNet.Client.Transport;&#13;&#10;&#13;&#10;class OTS_SYSLOG_CLIENT {&#13;&#10;&#9;string SYSLOG_SERVER = &quot;localhost&quot;;&#13;&#10;&#9;int SYSLOG_PORT   = 514;&#13;&#10;&#13;&#10;&#9;public void SendLog(string AUDIT_TYPE, string SIDU, string LOGGING) {&#13;&#10;&#9;&#9;XmlDocument result = new XmlDocument();&#13;&#10;&#9;&#9;result.LoadXml(LOGGING);&#13;&#10;&#9;&#9;string tableName = result.GetElementsByTagName(&quot;*&quot;).Item(0).Name;&#13;&#10;&#9;&#9;//File.AppendAllText(@&quot;c:\temp\Audit.log&quot;, SIDU+&quot;:&quot;+tableName + Environment.NewLine);&#13;&#10;&#13;&#10;&#9;&#9;string logMessage =  &quot;&quot;;&#13;&#10;&#9;&#9;logMessage += tableName+&quot;[&quot;+SIDU+&quot;]: &quot;;&#9;&#9;&#9;&#9;&#9;&#9;&#9;//log line tag: &quot;&lt;tableName&gt;[&lt;SIDU&gt;]:&quot;&#13;&#10;&#9;&#9;logMessage += LOGGING.Replace(&quot;\r\n&quot;, &quot; &quot;).Replace(&quot;\t&quot;, &quot; &quot;);&#9;&#9;//remove all new-lines and tabs from the log message (so that only one line is submitted)&#13;&#10;&#13;&#10;&#9;&#9;string hostName = System.Environment.GetEnvironmentVariable(&quot;COMPUTERNAME&quot;);&#13;&#10;&#13;&#10;&#9;&#9;SyslogMessage sMessage = new SyslogMessage(DateTimeOffset.Now, Facility.LogAudit, Severity.Info, hostName, &quot;&quot;, logMessage+Environment.NewLine);&#13;&#10;&#13;&#10;&#9;&#9;try {&#13;&#10;&#9;&#9;&#9;ISyslogMessageSender client = new SyslogUdpSender(SYSLOG_SERVER, SYSLOG_PORT);&#13;&#10;&#9;&#9;&#9;//ISyslogMessageSender client = new SyslogTcpSender(SYSLOG_SERVER, SYSLOG_PORT);&#13;&#10;&#9;&#9;&#9;//ISyslogMessageSerializer serializer = new SyslogRfc5424MessageSerializer ();&#13;&#10;&#9;&#9;&#9;ISyslogMessageSerializer serializer = new SyslogRfc3164MessageSerializer ();&#13;&#10;&#9;&#9;&#9;//ISyslogMessageSerializer serializer = new SyslogLocalMessageSerializer  ();&#13;&#10;&#13;&#10;&#9;&#9;&#9;client.Send(sMessage, serializer);&#13;&#10;&#9;&#9;&#9;//File.AppendAllText(@&quot;c:\temp\Audit.log&quot;,  &quot;sent&quot;+ Environment.NewLine);&#9;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;catch (Exception ex)&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;//File.AppendAllText(@&quot;c:\temp\Audit.log&quot;,  &quot;ERROR: &quot; + ex + Environment.NewLine);&#13;&#10;&#9;&#9;&#9;&#9;Console.WriteLine(&quot;ERROR: &quot; + ex);&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;//File.AppendAllText(@&quot;c:\temp\Audit.log&quot;,  logMessage+ Environment.NewLine);&#13;&#10;&#9;}&#13;&#10;}&#13;&#10;&#13;&#10;/***&#13;&#10;&#9;Syslog .NET messenge constructor + client from: https://github.com/emertechie/SyslogNet/blob/master/SyslogNet.Client/&#13;&#10;&#9;MIT license applies here: https://github.com/emertechie/SyslogNet/blob/master/licence.md&#13;&#10;***/&#13;&#10;&#13;&#10;namespace SyslogNet.Client&#13;&#10;{&#13;&#10;&#9;public class SyslogMessage&#13;&#10;&#9;{&#13;&#10;&#9;&#9;public static Facility DefaultFacility = Facility.LogAudit;&#13;&#10;&#9;&#9;public static Severity DefaultSeverity = Severity.Info;&#13;&#10;&#13;&#10;&#9;&#9;/// &lt;summary&gt;&#13;&#10;&#9;&#9;/// Convenience overload for sending local syslog messages with default facility (UserLevelMessages)&#13;&#10;&#9;&#9;/// &lt;/summary&gt;&#13;&#10;&#9;&#9;public SyslogMessage(&#13;&#10;&#9;&#9;&#9;Severity severity,&#13;&#10;&#9;&#9;&#9;string appName,&#13;&#10;&#9;&#9;&#9;string message)&#13;&#10;&#9;&#9;: this(DefaultFacility, severity, appName, message)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;/// &lt;summary&gt;&#13;&#10;&#9;&#9;/// Constructor for use when sending local syslog messages&#13;&#10;&#9;&#9;/// &lt;/summary&gt;&#13;&#10;&#9;&#9;public SyslogMessage(&#13;&#10;&#9;&#9;&#9;Facility facility,&#13;&#10;&#9;&#9;&#9;Severity severity,&#13;&#10;&#9;&#9;&#9;string appName,&#13;&#10;&#9;&#9;&#9;string message)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;Facility = facility;&#13;&#10;&#9;&#9;&#9;Severity = severity;&#13;&#10;&#9;&#9;&#9;AppName = appName;&#13;&#10;&#9;&#9;&#9;Message = message;&#13;&#10;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;/// &lt;summary&gt;&#13;&#10;&#9;&#9;/// Constructor for use when sending RFC 3164 messages&#13;&#10;&#9;&#9;/// &lt;/summary&gt;&#13;&#10;&#9;&#9;public SyslogMessage(&#13;&#10;&#9;&#9;&#9;DateTimeOffset? dateTimeOffset,&#13;&#10;&#9;&#9;&#9;Facility facility,&#13;&#10;&#9;&#9;&#9;Severity severity,&#13;&#10;&#9;&#9;&#9;string hostName,&#13;&#10;&#9;&#9;&#9;string appName,&#13;&#10;&#9;&#9;&#9;string message)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;DateTimeOffset = dateTimeOffset;&#13;&#10;&#9;&#9;&#9;Facility = facility;&#13;&#10;&#9;&#9;&#9;Severity = severity;&#13;&#10;&#9;&#9;&#9;HostName = hostName;&#13;&#10;&#9;&#9;&#9;AppName = appName;&#13;&#10;&#9;&#9;&#9;Message = message;&#13;&#10;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;/// &lt;summary&gt;&#13;&#10;&#9;&#9;/// Constructor for use when sending RFC 5424 messages&#13;&#10;&#9;&#9;/// &lt;/summary&gt;&#13;&#10;&#9;&#9;public SyslogMessage(&#13;&#10;&#9;&#9;&#9;DateTimeOffset? dateTimeOffset,&#13;&#10;&#9;&#9;&#9;Facility facility,&#13;&#10;&#9;&#9;&#9;Severity severity,&#13;&#10;&#9;&#9;&#9;string hostName,&#13;&#10;&#9;&#9;&#9;string appName,&#13;&#10;&#9;&#9;&#9;string procId,&#13;&#10;&#9;&#9;&#9;string msgId,&#13;&#10;&#9;&#9;&#9;string message,&#13;&#10;&#9;&#9;&#9;params StructuredDataElement[] structuredDataElements)&#13;&#10;&#9;&#9;&#9;: this(dateTimeOffset, facility, severity, hostName, appName, message)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;ProcId = procId;&#13;&#10;&#9;&#9;&#9;MsgId = msgId;&#13;&#10;&#9;&#9;&#9;StructuredDataElements = structuredDataElements;&#13;&#10;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;public int Version&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;get { return 1; }&#13;&#10;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;public Facility Facility { get; set; }&#13;&#10;&#13;&#10;&#9;&#9;public Severity Severity { get; set; }&#13;&#10;&#13;&#10;&#9;&#9;public DateTimeOffset? DateTimeOffset { get; set; }&#13;&#10;&#13;&#10;&#9;&#9;public string HostName { get; set; }&#13;&#10;&#13;&#10;&#9;&#9;public string AppName { get; set; }&#13;&#10;&#13;&#10;&#9;&#9;public string ProcId { get; set; }&#13;&#10;&#13;&#10;&#9;&#9;public string MsgId { get; set; }&#13;&#10;&#13;&#10;&#9;&#9;public string Message { get; set; }&#13;&#10;&#13;&#10;&#9;&#9;public IEnumerable&lt;StructuredDataElement&gt; StructuredDataElements { get; set; }&#13;&#10;&#9;}&#13;&#10;&#13;&#10;public enum Severity&#13;&#10;&#9;{&#13;&#10;&#9;&#9;Emergency = 0,&#13;&#10;&#9;&#9;Alert = 1,&#13;&#10;&#9;&#9;Critical = 2,&#13;&#10;&#9;&#9;Error = 3,&#13;&#10;&#9;&#9;Warning = 4,&#13;&#10;&#9;&#9;Notice = 5,&#13;&#10;&#9;&#9;Info = 6,&#13;&#10;&#9;&#9;Debug = 7&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;public enum Facility&#13;&#10;&#9;{&#13;&#10;&#9;&#9;KernelMessages = 0,&#13;&#10;&#9;&#9;UserLevelMessages = 1,&#13;&#10;&#9;&#9;MailSystem = 2,&#13;&#10;&#9;&#9;SystemDaemons = 3,&#13;&#10;&#9;&#9;SecurityOrAuthorizationMessages1 = 4,&#13;&#10;&#9;&#9;InternalMessages = 5,&#13;&#10;&#9;&#9;LinePrinterSubsystem = 6,&#13;&#10;&#9;&#9;NetworkNewsSubsystem = 7,&#13;&#10;&#9;&#9;UUCPSubsystem = 8,&#13;&#10;&#9;&#9;ClockDaemon1 = 9,&#13;&#10;&#9;&#9;SecurityOrAuthorizationMessages2 = 10,&#13;&#10;&#9;&#9;FTPDaemon = 11,&#13;&#10;&#9;&#9;NTPSubsystem = 12,&#13;&#10;&#9;&#9;LogAudit = 13,&#13;&#10;&#9;&#9;LogAlert = 14,&#13;&#10;&#9;&#9;ClockDaemon2 = 15,&#13;&#10;&#9;&#9;LocalUse0 = 16,&#13;&#10;&#9;&#9;LocalUse1 = 17,&#13;&#10;&#9;&#9;LocalUse2 = 18,&#13;&#10;&#9;&#9;LocalUse3 = 19,&#13;&#10;&#9;&#9;LocalUse4 = 20,&#13;&#10;&#9;&#9;LocalUse5 = 21,&#13;&#10;&#9;&#9;LocalUse6 = 22,&#13;&#10;&#9;&#9;LocalUse7 = 23&#13;&#10;&#9;}&#13;&#10;&#13;&#10;public class StructuredDataElement&#13;&#10;&#9;{&#13;&#10;&#9;&#9;// RFC 5424 specifies that you must provide a private enterprise number. If none specified, using example number reserved for documentation (see RFC)&#13;&#10;&#9;&#9;public const string DefaultPrivateEnterpriseNumber = &quot;32473&quot;;&#13;&#10;&#13;&#10;&#9;&#9;private readonly string sdId;&#13;&#10;&#9;&#9;private readonly Dictionary&lt;string, string&gt; parameters;&#13;&#10;&#13;&#10;&#9;&#9;public StructuredDataElement(string sdId, Dictionary&lt;string, string&gt; parameters)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;this.sdId = sdId.Contains(&quot;@&quot;) ? sdId : sdId + &quot;@&quot; + DefaultPrivateEnterpriseNumber;&#13;&#10;&#9;&#9;&#9;this.parameters = parameters;&#13;&#10;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;public string SdId&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;get { return sdId; }&#13;&#10;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;public Dictionary&lt;string, string&gt; Parameters&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;get { return parameters; }&#13;&#10;&#9;&#9;}&#13;&#10;&#9;}&#13;&#10;}&#13;&#10;&#13;&#10;namespace SyslogNet.Client.Transport&#13;&#10;{&#13;&#10;&#9;public interface ISyslogMessageSender : IDisposable&#13;&#10;&#9;{&#13;&#10;&#9;&#9;void Dispose();&#13;&#10;&#9;&#9;void Reconnect();&#13;&#10;&#9;&#9;void Send(SyslogMessage message, ISyslogMessageSerializer serializer);&#13;&#10;&#9;&#9;void Send(IEnumerable&lt;SyslogMessage&gt; messages, ISyslogMessageSerializer serializer);&#13;&#10;&#9;}&#13;&#10;&#9;&#13;&#10;&#9;public class SyslogUdpSender : ISyslogMessageSender, IDisposable&#13;&#10;&#9;{&#13;&#10;&#9;&#9;private UdpClient udpClient;&#13;&#10;&#9;&#9;private string hostname;&#13;&#10;&#9;&#9;private int port;&#13;&#10;&#13;&#10;&#9;&#9;public SyslogUdpSender(string hostname, int port)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;this.hostname = hostname;&#13;&#10;&#9;&#9;&#9;this.port = port;&#13;&#10;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;public void Send(SyslogMessage message, ISyslogMessageSerializer serializer)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;udpClient = new UdpClient();&#13;&#10;&#9;&#9;&#9;udpClient.Connect(hostname, port);&#13;&#10;&#9;&#9;&#9;udpClient.Client.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ReceiveBuffer, 0);&#13;&#10;&#9;&#9;&#9;byte[] datagramBytes = serializer.Serialize(message);&#13;&#10;&#9;&#9;&#9;udpClient.Send(datagramBytes, datagramBytes.Length);&#13;&#10;&#9;&#9;&#9;udpClient.Close();&#13;&#10;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;public void Send(IEnumerable&lt;SyslogMessage&gt; messages, ISyslogMessageSerializer serializer)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;foreach(SyslogMessage message in messages)&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;Send(message, serializer);&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;public void Reconnect() { /* UDP is connectionless */ }&#13;&#10;&#13;&#10;&#9;&#9;public void Dispose()&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;udpClient.Close();&#13;&#10;&#9;&#9;}&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;class SyslogTransportException : Exception&#13;&#10;&#9;{&#13;&#10;&#9;&#9;public SyslogTransportException(string message) : base(message)&#13;&#10;&#9;&#9;{&#13;&#10;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;}&#13;&#10;&#13;&#10;public enum MessageTransfer {&#13;&#10;&#9;&#9;OctetCounting&#9;&#9;= 0,&#13;&#10;&#9;&#9;NonTransparentFraming&#9;= 1&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;public class SyslogTcpSender : ISyslogMessageSender, IDisposable&#13;&#10;&#9;{&#13;&#10;&#9;&#9;protected String hostname;&#13;&#10;&#9;&#9;protected int port;&#13;&#10;&#13;&#10;&#9;&#9;protected TcpClient tcpClient = null;&#13;&#10;&#9;&#9;protected Stream transportStream = null;&#13;&#10;&#13;&#10;&#9;&#9;public virtual MessageTransfer messageTransfer { get; set; }&#13;&#10;&#9;&#9;public byte trailer { get; set; }&#13;&#10;&#13;&#10;&#9;&#9;public SyslogTcpSender(string hostname, int port, bool shouldAutoConnect = true)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;this.hostname = hostname;&#13;&#10;&#9;&#9;&#9;this.port = port;&#13;&#10;&#13;&#10;&#9;&#9;&#9;if (shouldAutoConnect)&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;Connect();&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;&#9;messageTransfer = MessageTransfer.OctetCounting;&#13;&#10;&#9;&#9;&#9;trailer = 10; // LF&#13;&#10;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;public void Connect()&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;try&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;tcpClient = new TcpClient(hostname, port);&#13;&#10;&#9;&#9;&#9;&#9;transportStream = tcpClient.GetStream();&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;catch&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;Disconnect();&#13;&#10;&#9;&#9;&#9;&#9;throw;&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;public virtual void Reconnect()&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;Disconnect();&#13;&#10;&#9;&#9;&#9;Connect();&#13;&#10;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;public void Disconnect()&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;if (transportStream != null)&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;transportStream.Close();&#13;&#10;&#9;&#9;&#9;&#9;transportStream = null;&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;&#9;if (tcpClient != null)&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;tcpClient.Close();&#13;&#10;&#9;&#9;&#9;&#9;tcpClient = null;&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;public void Send(SyslogMessage message, ISyslogMessageSerializer serializer)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;Send(message, serializer, true);&#13;&#10;&#9;&#9;&#9;Disconnect();&#13;&#10;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;protected void Send(SyslogMessage message, ISyslogMessageSerializer serializer, bool flush = true)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;if(transportStream == null)&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;throw new IOException(&quot;No transport stream exists&quot;);&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;&#9;using (MemoryStream memoryStream = new MemoryStream())&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;var datagramBytes = serializer.Serialize(message);&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;if (messageTransfer.Equals(MessageTransfer.OctetCounting))&#13;&#10;&#9;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;&#9;byte[] messageLength = Encoding.ASCII.GetBytes(datagramBytes.Length.ToString());&#13;&#10;&#9;&#9;&#9;&#9;&#9;memoryStream.Write(messageLength, 0, messageLength.Length);&#13;&#10;&#9;&#9;&#9;&#9;&#9;memoryStream.WriteByte(32); // Space&#13;&#10;&#9;&#9;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;memoryStream.Write(datagramBytes, 0, datagramBytes.Length);&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;if (messageTransfer.Equals(MessageTransfer.NonTransparentFraming))&#13;&#10;&#9;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;&#9;memoryStream.WriteByte(trailer); // LF&#13;&#10;&#9;&#9;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;transportStream.Write(memoryStream.GetBuffer(), 0, (int)memoryStream.Length);&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;&#9;if (flush &amp;&amp; !(transportStream is NetworkStream))&#13;&#10;&#9;&#9;&#9;&#9;transportStream.Flush();&#13;&#10;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;public void Send(IEnumerable&lt;SyslogMessage&gt; messages, ISyslogMessageSerializer serializer)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;foreach (SyslogMessage message in messages)&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;Send(message, serializer, false);&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;&#9;if (!(transportStream is NetworkStream))&#13;&#10;&#9;&#9;&#9;&#9;transportStream.Flush();&#13;&#10;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;public void Dispose()&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;Disconnect();&#13;&#10;&#9;&#9;}&#13;&#10;&#9;}&#13;&#10;}&#13;&#10;&#13;&#10;namespace SyslogNet.Client.Serialization&#13;&#10;{&#13;&#10;&#9;public interface ISyslogMessageSerializer&#13;&#10;&#9;{&#13;&#10;&#9;&#9;void Serialize(SyslogMessage message, Stream stream);&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;public abstract class SyslogMessageSerializerBase&#13;&#10;&#9;{&#13;&#10;&#9;&#9;protected static int CalculatePriorityValue(Facility facility, Severity severity)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;return ((int)facility * 8) + (int)severity;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;public class SyslogRfc3164MessageSerializer : SyslogMessageSerializerBase, ISyslogMessageSerializer&#13;&#10;&#9;{&#13;&#10;&#9;&#9;public void Serialize(SyslogMessage message, Stream stream)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;//File.AppendAllText(@&quot;c:\temp\Audit.log&quot;,  message.Facility+&quot; &quot;+message.Severity+ Environment.NewLine);&#13;&#10;&#13;&#10;&#9;&#9;&#9;var priorityValue = CalculatePriorityValue(message.Facility, message.Severity);&#13;&#10;&#13;&#10;&#9;&#9;&#9;string timestamp = null;&#13;&#10;&#9;&#9;&#9;if (message.DateTimeOffset.HasValue)&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;var dt = message.DateTimeOffset.Value;&#13;&#10;&#9;&#9;&#9;&#9;var day = dt.Day &lt; 10 ? &quot; &quot; + dt.Day : dt.Day.ToString(); // Yes, this is stupid but it's in the spec&#13;&#10;&#9;&#9;&#9;&#9;timestamp = String.Concat(dt.ToString(&quot;MMM &quot;), day, dt.ToString(&quot; HH:mm:ss&quot;));&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;&#9;var headerBuilder = new StringBuilder();&#13;&#10;&#9;&#9;&#9;headerBuilder.Append(&quot;&lt;&quot;).Append(priorityValue).Append(&quot;&gt;&quot;);&#13;&#10;&#9;&#9;&#9;headerBuilder.Append(timestamp).Append(&quot; &quot;);&#13;&#10;&#9;&#9;&#9;headerBuilder.Append(message.HostName).Append(&quot; &quot;);&#13;&#10;&#9;&#9;&#9;headerBuilder.Append(message.AppName.IfNotNullOrWhitespace(x =&gt; x.EnsureMaxLength(32) + &quot;:&quot;));&#13;&#10;&#9;&#9;&#9;headerBuilder.Append(message.Message ?? &quot;&quot;);&#13;&#10;&#13;&#10;&#9;&#9;&#9;byte[] asciiBytes = Encoding.ASCII.GetBytes(headerBuilder.ToString());&#13;&#10;&#13;&#10;&#9;&#9;&#9;//File.AppendAllText(@&quot;c:\temp\Audit.log&quot;,  headerBuilder.ToString()+ Environment.NewLine);&#13;&#10;&#13;&#10;&#9;&#9;&#9;stream.Write(asciiBytes, 0, asciiBytes.Length);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;public static class SyslogMessageSerializerExtensions&#13;&#10;&#9;{&#13;&#10;&#9;&#9;public static byte[] Serialize(this ISyslogMessageSerializer serializer, SyslogMessage message)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;byte[] datagramBytes;&#13;&#10;&#9;&#9;&#9;using (var stream = new MemoryStream())&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;serializer.Serialize(message, stream);&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;stream.Position = 0;&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;datagramBytes = new byte[stream.Length];&#13;&#10;&#9;&#9;&#9;&#9;stream.Read(datagramBytes, 0, (int)stream.Length);&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;return datagramBytes;&#13;&#10;&#9;&#9;}&#9;&#9;&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;public class SyslogLocalMessageSerializer : SyslogMessageSerializerBase, ISyslogMessageSerializer&#13;&#10;&#9;{&#13;&#10;&#9;&#9;public Encoding Encoding { get; set; }&#13;&#10;&#13;&#10;&#9;&#9;// Default constructor: produce no BOM in local syslog messages&#13;&#10;&#9;&#9;public SyslogLocalMessageSerializer() : this(false) { ; }&#13;&#10;&#13;&#10;&#9;&#9;// Optionally produce a BOM in local syslog messages by passing true here&#13;&#10;&#9;&#9;// (This can produce problems with some older syslog programs, so default is false)&#13;&#10;&#9;&#9;public SyslogLocalMessageSerializer(bool useBOM) {&#13;&#10;&#9;&#9;&#9;Encoding = new UTF8Encoding(encoderShouldEmitUTF8Identifier: useBOM);&#13;&#10;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;public void Serialize(SyslogMessage message, Stream stream)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;// Local syslog serialization only cares about the Message string&#13;&#10;&#9;&#9;&#9;if (!String.IsNullOrWhiteSpace(message.Message))&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;byte[] streamBytes = Encoding.GetBytes(message.Message);&#13;&#10;&#9;&#9;&#9;&#9;stream.Write(streamBytes, 0, streamBytes.Length);&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;}&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;public class SyslogRfc5424MessageSerializer : SyslogMessageSerializerBase, ISyslogMessageSerializer&#13;&#10;&#9;{&#13;&#10;&#9;&#9;public const string NilValue = &quot;-&quot;;&#13;&#10;&#9;&#9;public static readonly HashSet&lt;char&gt; sdNameDisallowedChars = new HashSet&lt;char&gt;() {' ', '=', ']', '&quot;' };&#13;&#10;&#13;&#10;&#9;&#9;private readonly char[] asciiCharsBuffer = new char[255];&#13;&#10;&#13;&#10;&#9;&#9;public void Serialize(SyslogMessage message, Stream stream)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;var priorityValue = CalculatePriorityValue(message.Facility, message.Severity);&#13;&#10;&#13;&#10;&#9;&#9;&#9;// Note: The .Net ISO 8601 &quot;o&quot; format string uses 7 decimal places for fractional second. Syslog spec only allows 6, hence the custom format string&#13;&#10;&#9;&#9;&#9;var timestamp = message.DateTimeOffset.HasValue&#13;&#10;&#9;&#9;&#9;&#9;? message.DateTimeOffset.Value.ToString(&quot;yyyy-MM-ddTHH:mm:ss.ffffffK&quot;)&#13;&#10;&#9;&#9;&#9;&#9;: null;&#13;&#10;&#13;&#10;&#9;&#9;&#9;var messageBuilder = new StringBuilder();&#13;&#10;&#9;&#9;&#9;messageBuilder.Append(&quot;&lt;&quot;).Append(priorityValue).Append(&quot;&gt;&quot;);&#13;&#10;&#9;&#9;&#9;messageBuilder.Append(message.Version);&#13;&#10;&#9;&#9;&#9;messageBuilder.Append(&quot; &quot;).Append(timestamp.FormatSyslogField(NilValue));&#13;&#10;&#9;&#9;&#9;messageBuilder.Append(&quot; &quot;).Append(message.HostName.FormatSyslogAsciiField(NilValue, 255, asciiCharsBuffer));&#13;&#10;&#9;&#9;&#9;messageBuilder.Append(&quot; &quot;).Append(message.AppName.FormatSyslogAsciiField(NilValue, 48, asciiCharsBuffer));&#13;&#10;&#9;&#9;&#9;messageBuilder.Append(&quot; &quot;).Append(message.ProcId.FormatSyslogAsciiField(NilValue, 128, asciiCharsBuffer));&#13;&#10;&#9;&#9;&#9;messageBuilder.Append(&quot; &quot;).Append(message.MsgId.FormatSyslogAsciiField(NilValue, 32, asciiCharsBuffer));&#13;&#10;&#13;&#10;&#9;&#9;&#9;writeStream(stream, Encoding.ASCII, messageBuilder.ToString());&#13;&#10;&#13;&#10;&#9;&#9;&#9;var structuredData = message.StructuredDataElements == null ? null : message.StructuredDataElements.ToList();&#13;&#10;&#9;&#9;&#9;if (structuredData != null &amp;&amp; structuredData.Any())&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;    // Space&#13;&#10;&#9;&#9;&#9;    stream.WriteByte(32);&#13;&#10;&#13;&#10;                // Structured data&#13;&#10;                foreach (StructuredDataElement sdElement in structuredData)&#13;&#10;&#9;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;&#9;messageBuilder.Clear()&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;.Append(&quot;[&quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;.Append(sdElement.SdId.FormatSyslogSdnameField(asciiCharsBuffer));&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;&#9;writeStream(stream, Encoding.ASCII, messageBuilder.ToString());&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;&#9;foreach(System.Collections.Generic.KeyValuePair&lt;string, string&gt; sdParam in sdElement.Parameters)&#13;&#10;&#9;&#9;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;messageBuilder.Clear()&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;.Append(&quot; &quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;.Append(sdParam.Key.FormatSyslogSdnameField(asciiCharsBuffer))&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;.Append(&quot;=&quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;.Append(&quot;\&quot;&quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;.Append(&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;sdParam.Value != null ?&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;sdParam.Value&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;.Replace(&quot;\\&quot;, &quot;\\\\&quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;.Replace(&quot;\&quot;&quot;, &quot;\\\&quot;&quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;.Replace(&quot;]&quot;, &quot;\\]&quot;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;:&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;String.Empty&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;)&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;.Append(&quot;\&quot;&quot;);&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;writeStream(stream, Encoding.UTF8, messageBuilder.ToString());&#13;&#10;&#9;&#9;&#9;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;&#9;// ]&#13;&#10;&#9;&#9;&#9;&#9;&#9;stream.WriteByte(93);&#13;&#10;&#9;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;writeStream(stream, Encoding.ASCII, &quot; &quot;);&#13;&#10;&#9;&#9;&#9;&#9;writeStream(stream, Encoding.ASCII, NilValue);&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;&#9;if (!String.IsNullOrWhiteSpace(message.Message))&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;// Space&#13;&#10;&#9;&#9;&#9;&#9;stream.WriteByte(32);&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;stream.Write(Encoding.UTF8.GetPreamble(), 0, Encoding.UTF8.GetPreamble().Length);&#13;&#10;&#9;&#9;&#9;&#9;writeStream(stream, Encoding.UTF8, message.Message);&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;private void writeStream(Stream stream, Encoding encoding, String data)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;byte[] streamBytes = encoding.GetBytes(data);&#13;&#10;&#9;&#9;&#9;stream.Write(streamBytes, 0, streamBytes.Length);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;internal static class StringExtensions&#13;&#10;&#9;{&#13;&#10;&#9;&#9;public static string IfNotNullOrWhitespace(this string s, Func&lt;string, string&gt; action)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;return String.IsNullOrWhiteSpace(s) ? s : action(s);&#13;&#10;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;public static string FormatSyslogField(this string s, string replacementValue, int? maxLength = null)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;return String.IsNullOrWhiteSpace(s)&#13;&#10;&#9;&#9;&#9;&#9;? replacementValue&#13;&#10;&#9;&#9;&#9;&#9;: maxLength.HasValue ? EnsureMaxLength(s, maxLength.Value) : s;&#13;&#10;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;public static string EnsureMaxLength(this string s, int maxLength)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;return String.IsNullOrWhiteSpace(s)&#13;&#10;&#9;&#9;&#9;&#9;? s&#13;&#10;&#9;&#9;&#9;&#9;: s.Length &gt; maxLength ? s.Substring(0, maxLength) : s;&#13;&#10;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;public static string FormatSyslogAsciiField(this string s, string replacementValue, int maxLength, char[] charBuffer, Boolean sdName = false)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;s = FormatSyslogField(s, replacementValue, maxLength);&#13;&#10;&#13;&#10;&#9;&#9;&#9;int bufferIndex = 0;&#13;&#10;&#9;&#9;&#9;for (int i = 0; i &lt; s.Length; i++)&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;char c = s[i];&#13;&#10;&#9;&#9;&#9;&#9;if (c &gt;= 33 &amp;&amp; c &lt;= 126)&#13;&#10;&#9;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;&#9;if (!sdName || !SyslogRfc5424MessageSerializer.sdNameDisallowedChars.Contains(c))&#13;&#10;&#9;&#9;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;charBuffer[bufferIndex++] = c;&#13;&#10;&#9;&#9;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;&#9;return new string(charBuffer, 0, bufferIndex);&#13;&#10;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;public static string FormatSyslogSdnameField(this string s, char[] charBuffer)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;return FormatSyslogAsciiField(s, SyslogRfc5424MessageSerializer.NilValue, 32, charBuffer, true);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;}&#13;&#10;}" DOTNET_ACTIVE="Y" LANGUAGE="C#" ORIGIN="" APP_DOMAIN="Default"/>
</DotNet_Components><Methods documentName="Methods">
<T_RDMI_METHOD COMPONENT_NAME="OTS_SYSLOG_CLIENT" METHOD_NAME="OTS_SYSLOG_CLIENT" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="OTS_SYSLOG_CLIENT" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_METHOD COMPONENT_NAME="OTS_SYSLOG_CLIENT" METHOD_NAME="SENDLOG" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="SendLog" DESCRIPTION="## select OTS_SYSLOG_CLIENT.sendlog(audit_type, sidu, logging) from auth_audit_log where audit_log_id=21&#13;&#10;&#13;&#10;Line 33/34 can change the protocol type (TCP/UDP). TCP is port 1514, UDP is 514 (change the lines 15/16 for that)" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
</Methods><Parameters documentName="Parameters">
<T_RDMI_PARAMETER COMPONENT_NAME="OTS_SYSLOG_CLIENT" PARAMETER_SEQNO="1" METHOD_NAME="SENDLOG" METHOD_SEQNO="1" PARAMETER_NAME="AUDIT_TYPE" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="OTS_SYSLOG_CLIENT" PARAMETER_SEQNO="2" METHOD_NAME="SENDLOG" METHOD_SEQNO="1" PARAMETER_NAME="SIDU" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="OTS_SYSLOG_CLIENT" PARAMETER_SEQNO="3" METHOD_NAME="SENDLOG" METHOD_SEQNO="1" PARAMETER_NAME="LOGGING" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
</Parameters></MultiImport>