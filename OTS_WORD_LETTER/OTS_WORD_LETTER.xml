<?xml version="1.0" encoding="UTF-8"?>
<?usoft-xml version="1.0" action="multi-tables-import"?><MultiImport>
<Component_Constructors documentName="Component Constructors">
<T_RDMI_COMPONENT_CONSTRUCTOR COMPONENT_NAME="OTS_WORD_LETTER" DESCRIPTION="This component provides a way to automatically generate word letter/reports in Microsoft Word format.&#13;&#10;It does so by copying a Microsoft Word document template and then replacing all data fields in that copy by content from data passed to this component.&#13;&#10;The expected  template format is the Microsoft docx format.&#13;&#10;A Microsoft Word installation is NOT needed on the computer where this component is run, as the component uses the Office Open XML file format for generating a result document.&#13;&#10;&#13;&#10;The Microsoft Word document template must contain placeholders, so called Controls, where  information from the data model will be represented in the final result document.&#13;&#10;How to create such a document is described below. A sample Microsoft Word template is also available and used in the given examples.&#13;&#10;&#13;&#10;The component offers two methods:&#13;&#10;&#9;-1- A method ControlInfo(templatefilepath)  that will show the available Controls in the template.&#13;&#10;&#9;&#9;This serves to do a sanity check: are the Controls you want to fill present in the template?&#13;&#10;&#9;&#9;In the Application/SqlCommand window you can try this on the sample template, execute:&#13;&#10;&#9;&#9;&#9;select OTS_WORD_LETTER.ControlInfo(  RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_Sample_WordReport.docx'  );&#13;&#10;&#9;&#9;The thought behind this method can be developed further  to automatically categorize and maintain the set of templates in an organization.&#13;&#10;&#9;-2- A method Run(templatefilepath, resultfilepath, [parameters, ...]) that will produce the result document from the template and data passed.&#13;&#10;&#9;&#9;In the application/SqlCommand window you can try:&#13;&#10;&#9;&#9;&#9;invoke OTS_WORD_LETTER.RUN with select &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_Sample_WordReport.docx', &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || 'Result.docx',&#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_Sample_Xml.xml'&#13;&#10;&#9;&#9;The Run method produces the location of the result document that can be opened with Microsoft Word to see the result document.&#13;&#10;&#9;&#9;This example fills data from an xml document into the copy of the template document.&#13;&#10;&#13;&#10;The Run method has a number of ways to pass data for the Controls. &#13;&#10;&#9;-a- Passing a single filepath argument with a propriety xml format that contains the data. Inspect the example above. It contains plain values and a table.&#13;&#10;&#9;-b- Passing name - value pairs as data for Controls. &#13;&#10;&#9;&#9;Try for example:&#13;&#10;&#9;&#9;&#9;invoke OTS_WORD_LETTER.RUN with select &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_Sample_WordReport.docx', &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || 'Result.docx',&#13;&#10;&#9;&#9;&#9;&#9;'PAS_NUMBER', 'AX123',&#13;&#10;&#9;&#9;&#9;&#9;'NAME', user&#13;&#10;&#9;&#9;In this example, the result document has PAS_NUMBER and NAME resolved but the other Controls are not filled.&#13;&#10;&#9;-c- Passing name - xml pairs as data  for Controls. This allows filling in table Controls.&#13;&#10;&#9;&#9;Try for example:&#13;&#10;&#9;&#9;&#9;invoke OTS_WORD_LETTER.RUN with select &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_Sample_WordReport.docx', &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || 'Result.docx',&#13;&#10;&#9;&#9;&#9;&#9;'PAS_NUMBER', 'AX123',&#13;&#10;&#9;&#9;&#9;&#9;'NAME', user,&#13;&#10;&#9;&#9;&#9;&#9;'BOOK_TABLE',&#13;&#10;&#9;&#9;&#9;&#9;&#9;'&lt;Books&gt;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Book NAME=&quot;My life as a developer&quot; AUTHOR=&quot;Dilbert&quot; DUE_DATE=&quot;01-JAN-2020&quot;&gt;&lt;/Book&gt;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Book NAME=&quot;Why Nations Fail&quot; AUTHOR=&quot;James A. Robinson &quot; DUE_DATE=&quot;17-FEB-2020&quot;&gt;&lt;/Book&gt;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/Books&gt;'&#13;&#10;&#9;&#9;Now also the books on loan table has data in the result.&#13;&#10;&#9;&#9;Note that you could have used data from your data model in the call by taking column values for the plain values and xml.[sql]export result for the Controls that show table data.&#13;&#10;&#13;&#10;Before showing some examples that use data from your data model, first a few words on how to create a template document with Controls.&#13;&#10;&#13;&#10;A template document can be any Word document stored in docx format. You will have to add Controls to that document that will act as placeholders for the data.&#13;&#10;&#9;-1- Create a word template document that contains the desired layout, fixed text, images etc.&#13;&#10;&#9;-2- If the menu bar in Microsoft Word does NOT show a &quot;Developer&quot; menu, you will have to activate the Developer menu first.&#13;&#10;&#9;&#9;Depending on the version of Microsoft Word you would activate this by opening the File menu, Options. Then click &quot;Customize Ribbon&quot;. &#13;&#10;&#9;&#9;Choose &quot;Main Tabs&quot; from the &quot;Customize the Ribbon&quot; dropdown. Make sure [v]Developer is marked active.&#13;&#10;&#9;-3- How to add a Control in your Microsoft Word template to hold a plain value:&#13;&#10;&#9;&#9;Choose &quot;Developer&quot; from the main menu.&#13;&#10;&#9;&#9;Click &quot;Design Mode&quot;&#13;&#10;&#9;&#9;Click in the document at the position you want the Control.&#13;&#10;&#9;&#9;Click the Plain Text Control (or the Rich text Control) symbol (symbol Aa left from &quot;Design Mode)&quot;&#13;&#10;&#9;&#9;&#9;Now you will see the Control in the document. &#13;&#10;&#9;&#9;Click &quot;Properties&quot; (just under &quot;Design Mode&quot;)&#13;&#10;&#9;&#9;&#9;In the Tag field, fill the name that you will use when passing data, e.g. MYFIELD&#13;&#10;&#9;&#9;Save the template and, in the application, invoke the Run method for this template. Specify a value for MYFIELD.&#13;&#10;&#9;&#9;&#9;Assuming you added the MYFIELD text Control to the example template, see a result by executing:&#13;&#10;&#9;&#9;&#9;invoke OTS_WORD_LETTER.RUN with select &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_Sample_WordReport.docx', &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || 'Result.docx',&#13;&#10;&#9;&#9;&#9;&#9;'MYFILED', 'Hello Controls'&#13;&#10;&#9;&#9;&#9;Use the ControlInfo method (as shown before) to see the MYFIELD control is indeed available.&#13;&#10;&#9;&#9;&#9;Note that currently no rtf (rich text format) data is supported in the component.&#13;&#10;&#9;-4- To add repeated content (table data)&#13;&#10;&#9;&#9;-add a rich text content control&#13;&#10;&#9;&#9;-set the Tag property of this control to the same value as the NAME attribute in the xml document&#13;&#10;&#9;&#9;-add a table inside the control with one row, &#13;&#10;&#9;&#9;&#9;-in that row add new (rich text) content control for each field.&#13;&#10;&#9;-5- The other Microsoft Word controls are not implemented except the Date Picker Control.&#13;&#10;&#9;&#9;For the Date Picker Control, the component will try to parse the data as DateTime and format the DateTime according to the format specified for the Date Picker Control. The advanced example below uses the Date Picker control.&#13;&#10;&#9;&#9;&#13;&#10;The following advanced examples assume that you are working with the USoft Travel Agency example (a course material example).&#13;&#10;Note that you can copy the templates to your own (template) directory to avoid the paths to the USoft OffTheShelf directory in the examples.&#13;&#10;That also allows you to experiment and change the templates while keeping the original.&#13;&#10;Of course you can change the SQL used in the example (and/or the template) to match your own USoft data model.&#13;&#10;&#13;&#10;To find the Controls in the OTS_TravelTemplate.docx example, execute::&#13;&#10;&#9;select OTS_WORD_LETTER.ControlInfo( RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_TravelTemplate.docx'  );&#13;&#10;Assuming you copied OTS_TravelTemplate.docx to c:\temp that would be:&#13;&#10;&#9;select OTS_WORD_LETTER.ControlInfo(  'c:\temp\OTS_TravelTemplate.docx'  );&#13;&#10;&#9;&#13;&#10;Now the idea is to fill the available Controls as follows:&#13;&#10;&#9;-1- a list of reservations in a Control with tag &quot;ALL_RESERVATIONS&quot;&#13;&#10;&#9;&#9;Note: you will need to import the OTS_STRING Off The Shelf component too for this example. It contains an record aggregate used for the data passed to ALL_RESERVATIONS&#13;&#10;&#9;-2- to fill a Control with tag name &quot;GENDER&quot; using a SQL DECODE statement&#13;&#10;&#9;-3- to fill a Control with tag name NAME using a concatenation&#13;&#10;&#9;-4- to fill a Control RESERVATIONS_TABLE from an xml.sqlexport&#13;&#10;&#13;&#10;To produce the result document:&#13;&#10;&#13;&#10;invoke OTS_WORD_LETTER.RUN with select &#13;&#10;&#9;RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_TravelTemplate.docx',&#13;&#10;&#9;'c:\temp\Reservation' || p.person_id || '.docx',&#13;&#10;&#9;'ALL_RESERVATIONS',&#13;&#10;&#9;( invoke OTS_STRING.RecordConcat with select '', ',', res_id from reservations rr, tour ss relate p MAKES rr, ss &quot;FOR WHICH IS MADE&quot; rr),&#13;&#10;&#9;'GENDER', decode(p.GENDER, 'M', 'Mr', 'F', 'Ms', ''),&#13;&#10;&#9;'NAME',  p.FIRST_NAME || ' ' || p.FAMILY_NAME,&#13;&#10;&#9;'RESERVATIONS_TABLE', &#13;&#10;&#9;(&#13;&#10;&#9;&#9;invoke xml.sqlexport with select&#13;&#10;&#9;&#9;&#9;r.RES_ID,&#13;&#10;&#9;&#9;&#9;s.TOUR_TYPE, s.DESTINATION,&#13;&#10;&#9;&#9;&#9;s.START_DATE, s.RETURN_DATE&#9;&#9;&#13;&#10;&#9;&#9;from&#13;&#10;&#9;&#9;&#9;reservation r, tour s&#13;&#10;&#9;&#9;relate&#13;&#10;&#9;&#9;&#9;p MAKES r, s &quot;FOR WHICH IS MADE&quot; r&#13;&#10;&#9;)&#13;&#10;FROM&#13;&#10;&#9;PERSON p&#13;&#10;WHERE exists &#13;&#10;(&#13;&#10;&#9;select &#13;&#10;&#9;&#9;'has reservation' &#13;&#10;&#9;from&#13;&#10;&#9;&#9;reservations rrr, tour sss &#13;&#10;&#9;relate&#13;&#10;        p MAKES rrr, sss &quot;FOR WHICH IS MADE&quot; rrr&#13;&#10;)&#13;&#10;AND&#13;&#10;&#9;p.person_id = 1&#13;&#10;&#13;&#10;If you omit the condition &quot;AND p.person_id=1&quot; you will see that all documents for each person with reservations are produced instantly and fast.&#13;&#10;&#13;&#10;You could use this SQL (without the limitation on person_id) in a logical view to let it produce documents on demand.&#13;&#10;Make a logical view with name e.g. RESERVATION_REPORT and SQL:&#13;&#10;SELECT&#13;&#10;&#9;p.PERSON_ID,&#13;&#10;&#9;OTS_WORD_LETTER.RUN&#13;&#10;&#9;(&#13;&#10;       RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_TravelTemplate.docx',&#13;&#10;       'c:\temp\Reservation' || p.PERSON_ID || '.docx',&#13;&#10;       'ALL_RESERVATIONS',&#13;&#10;       ( invoke OTS_STRING.RecordConcat with select '', ', ', res_id from reservations rr, tour ss relate p MAKES rr, ss &quot;FOR WHICH IS MADE&quot; rr),&#13;&#10;       'GENDER', decode(p.GENDER, 'M', 'Mr.', 'F', 'Ms.', ''),&#13;&#10;       'NAME',  p.FIRST_NAME || ' ' || p.FAMILY_NAME,&#13;&#10;       'RESERVATIONS_TABLE', &#13;&#10;       (&#13;&#10;             invoke xml.sqlexport with select&#13;&#10;                    r.RES_ID,&#13;&#10;                    s.TOUR_TYPE, s.DESTINATION,&#13;&#10;                    s.START_DATE, s.RETURN_DATE             &#13;&#10;             from&#13;&#10;                    reservation r, tour s&#13;&#10;             relate&#13;&#10;                    p MAKES r, s &quot;FOR WHICH IS MADE&quot; r&#13;&#10;       )&#13;&#10;&#9;) &quot;FILEPATH&quot;&#13;&#10;FROM&#13;&#10;       PERSON p&#13;&#10;WHERE exists &#13;&#10;(&#13;&#10;&#9;select &#13;&#10;&#9;&#9;'has reservation' &#13;&#10;&#9;from&#13;&#10;&#9;&#9;reservations rrr, tour sss &#13;&#10;&#9;relate&#13;&#10;        p MAKES rrr, sss &quot;FOR WHICH IS MADE&quot; rrr&#13;&#10;)&#13;&#10;Try this logical view in the application by querying a person that has reservations (a reservation report will be generated), querying a person with no reservations and finally querying all (all reports will be generated).&#13;&#10;As a final example that passes all data via a propriety xml format (as opposed to passing name - vale/xml.[sql]export pairs), try in the Application/SqlCommand this call with inline data:&#13;&#10;&#13;&#10;invoke OTS_WORD_LETTER.RUN with select &#13;&#10;&#9;RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_Sample_WordReport.docx', &#13;&#10;&#9;'c:\temp\Result.docx',&#13;&#10;&#9;'&lt;Report&gt;&#13;&#10;&#9;&lt;PAS_NUMBER&gt;000&lt;/PAS_NUMBER&gt;&#13;&#10;&#9;&lt;GENDER&gt;Mr.&lt;/GENDER&gt;&#13;&#10;&#9;&lt;NAME&gt;Whoever&lt;/NAME&gt;&#13;&#10;&#9;&lt;Table NAME=&quot;BOOK_TABLE&quot;&gt;&#13;&#10;&#9;&#9;&lt;Row&gt;&#13;&#10;&#9;&#9;&#9;&lt;NAME&gt;&lt;![CDATA[Harry Potter and the Philosopher''s Stone]]&gt;&lt;/NAME&gt;&#13;&#10;&#9;&#9;&#9;&lt;AUTHOR&gt;&lt;![CDATA[J. K. Rowling]]&gt;&lt;/AUTHOR&gt;&#13;&#10;&#9;&#9;&#9;&lt;DUE_DATE&gt;01-JAN-2020&lt;/DUE_DATE&gt;&#13;&#10;&#9;&#9;&lt;/Row&gt;&#13;&#10;&#9;&#9;&lt;Row&gt;&#13;&#10;&#9;&#9;&#9;&lt;NAME&gt;&lt;![CDATA[Harry Potter and the Chamber of Secrets]]&gt;&lt;/NAME&gt;&#13;&#10;&#9;&#9;&#9;&lt;AUTHOR&gt;&lt;![CDATA[J. K. Rowling]]&gt;&lt;/AUTHOR&gt;&#13;&#10;&#9;&#9;&#9;&lt;DUE_DATE&gt;01-MAR-2020&lt;/DUE_DATE&gt;&#13;&#10;&#9;&#9;&lt;/Row&gt;&#9;&#13;&#10;&#9;&lt;/Table&gt;&#13;&#10;&lt;/Report&gt;'" T_RDMI_AUTOMATION_SERVER="N" T_RDMI_JAVA_COMPONENT="N" T_RDMI_STATEFUL_COMPONENT="Y" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" T_RDMI_WEB_SERVICE_COMPONENT="N" T_RDMI_DOTNET_COMPONENT="Y" T_RDMI_COMPONENT_CONSTRUCTOR="Y" CONSTRUCTOR_SQL="" ACTIVE="N"/>
</Component_Constructors>
<Components documentName="Components">
<T_RDMI_COMPONENT COMPONENT_NAME="OTS_WORD_LETTER" DESCRIPTION="This component provides a way to automatically generate word letter/reports in Microsoft Word format.&#13;&#10;It does so by copying a Microsoft Word document template and then replacing all data fields in that copy by content from data passed to this component.&#13;&#10;The expected  template format is the Microsoft docx format.&#13;&#10;A Microsoft Word installation is NOT needed on the computer where this component is run, as the component uses the Office Open XML file format for generating a result document.&#13;&#10;&#13;&#10;The Microsoft Word document template must contain placeholders, so called Controls, where  information from the data model will be represented in the final result document.&#13;&#10;How to create such a document is described below. A sample Microsoft Word template is also available and used in the given examples.&#13;&#10;&#13;&#10;The component offers two methods:&#13;&#10;&#9;-1- A method ControlInfo(templatefilepath)  that will show the available Controls in the template.&#13;&#10;&#9;&#9;This serves to do a sanity check: are the Controls you want to fill present in the template?&#13;&#10;&#9;&#9;In the Application/SqlCommand window you can try this on the sample template, execute:&#13;&#10;&#9;&#9;&#9;select OTS_WORD_LETTER.ControlInfo(  RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_Sample_WordReport.docx'  );&#13;&#10;&#9;&#9;The thought behind this method can be developed further  to automatically categorize and maintain the set of templates in an organization.&#13;&#10;&#9;-2- A method Run(templatefilepath, resultfilepath, [parameters, ...]) that will produce the result document from the template and data passed.&#13;&#10;&#9;&#9;In the application/SqlCommand window you can try:&#13;&#10;&#9;&#9;&#9;invoke OTS_WORD_LETTER.RUN with select &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_Sample_WordReport.docx', &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || 'Result.docx',&#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_Sample_Xml.xml'&#13;&#10;&#9;&#9;The Run method produces the location of the result document that can be opened with Microsoft Word to see the result document.&#13;&#10;&#9;&#9;This example fills data from an xml document into the copy of the template document.&#13;&#10;&#13;&#10;The Run method has a number of ways to pass data for the Controls. &#13;&#10;&#9;-a- Passing a single filepath argument with a propriety xml format that contains the data. Inspect the example above. It contains plain values and a table.&#13;&#10;&#9;-b- Passing name - value pairs as data for Controls. &#13;&#10;&#9;&#9;Try for example:&#13;&#10;&#9;&#9;&#9;invoke OTS_WORD_LETTER.RUN with select &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_Sample_WordReport.docx', &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || 'Result.docx',&#13;&#10;&#9;&#9;&#9;&#9;'PAS_NUMBER', 'AX123',&#13;&#10;&#9;&#9;&#9;&#9;'NAME', user&#13;&#10;&#9;&#9;In this example, the result document has PAS_NUMBER and NAME resolved but the other Controls are not filled.&#13;&#10;&#9;-c- Passing name - xml pairs as data  for Controls. This allows filling in table Controls.&#13;&#10;&#9;&#9;Try for example:&#13;&#10;&#9;&#9;&#9;invoke OTS_WORD_LETTER.RUN with select &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_Sample_WordReport.docx', &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || 'Result.docx',&#13;&#10;&#9;&#9;&#9;&#9;'PAS_NUMBER', 'AX123',&#13;&#10;&#9;&#9;&#9;&#9;'NAME', user,&#13;&#10;&#9;&#9;&#9;&#9;'BOOK_TABLE',&#13;&#10;&#9;&#9;&#9;&#9;&#9;'&lt;Books&gt;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Book NAME=&quot;My life as a developer&quot; AUTHOR=&quot;Dilbert&quot; DUE_DATE=&quot;01-JAN-2020&quot;&gt;&lt;/Book&gt;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Book NAME=&quot;Why Nations Fail&quot; AUTHOR=&quot;James A. Robinson &quot; DUE_DATE=&quot;17-FEB-2020&quot;&gt;&lt;/Book&gt;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/Books&gt;'&#13;&#10;&#9;&#9;Now also the books on loan table has data in the result.&#13;&#10;&#9;&#9;Note that you could have used data from your data model in the call by taking column values for the plain values and xml.[sql]export result for the Controls that show table data.&#13;&#10;&#13;&#10;Before showing some examples that use data from your data model, first a few words on how to create a template document with Controls.&#13;&#10;&#13;&#10;A template document can be any Word document stored in docx format. You will have to add Controls to that document that will act as placeholders for the data.&#13;&#10;&#9;-1- Create a word template document that contains the desired layout, fixed text, images etc.&#13;&#10;&#9;-2- If the menu bar in Microsoft Word does NOT show a &quot;Developer&quot; menu, you will have to activate the Developer menu first.&#13;&#10;&#9;&#9;Depending on the version of Microsoft Word you would activate this by opening the File menu, Options. Then click &quot;Customize Ribbon&quot;. &#13;&#10;&#9;&#9;Choose &quot;Main Tabs&quot; from the &quot;Customize the Ribbon&quot; dropdown. Make sure [v]Developer is marked active.&#13;&#10;&#9;-3- How to add a Control in your Microsoft Word template to hold a plain value:&#13;&#10;&#9;&#9;Choose &quot;Developer&quot; from the main menu.&#13;&#10;&#9;&#9;Click &quot;Design Mode&quot;&#13;&#10;&#9;&#9;Click in the document at the position you want the Control.&#13;&#10;&#9;&#9;Click the Plain Text Control (or the Rich text Control) symbol (symbol Aa left from &quot;Design Mode)&quot;&#13;&#10;&#9;&#9;&#9;Now you will see the Control in the document. &#13;&#10;&#9;&#9;Click &quot;Properties&quot; (just under &quot;Design Mode&quot;)&#13;&#10;&#9;&#9;&#9;In the Tag field, fill the name that you will use when passing data, e.g. MYFIELD&#13;&#10;&#9;&#9;Save the template and, in the application, invoke the Run method for this template. Specify a value for MYFIELD.&#13;&#10;&#9;&#9;&#9;Assuming you added the MYFIELD text Control to the example template, see a result by executing:&#13;&#10;&#9;&#9;&#9;invoke OTS_WORD_LETTER.RUN with select &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_Sample_WordReport.docx', &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || 'Result.docx',&#13;&#10;&#9;&#9;&#9;&#9;'MYFILED', 'Hello Controls'&#13;&#10;&#9;&#9;&#9;Use the ControlInfo method (as shown before) to see the MYFIELD control is indeed available.&#13;&#10;&#9;&#9;&#9;Note that currently no rtf (rich text format) data is supported in the component.&#13;&#10;&#9;-4- To add repeated content (table data)&#13;&#10;&#9;&#9;-add a rich text content control&#13;&#10;&#9;&#9;-set the Tag property of this control to the same value as the NAME attribute in the xml document&#13;&#10;&#9;&#9;-add a table inside the control with one row, &#13;&#10;&#9;&#9;&#9;-in that row add new (rich text) content control for each field.&#13;&#10;&#9;-5- The other Microsoft Word controls are not implemented except the Date Picker Control.&#13;&#10;&#9;&#9;For the Date Picker Control, the component will try to parse the data as DateTime and format the DateTime according to the format specified for the Date Picker Control. The advanced example below uses the Date Picker control.&#13;&#10;&#9;&#9;&#13;&#10;The following advanced examples assume that you are working with the USoft Travel Agency example (a course material example).&#13;&#10;Note that you can copy the templates to your own (template) directory to avoid the paths to the USoft OffTheShelf directory in the examples.&#13;&#10;That also allows you to experiment and change the templates while keeping the original.&#13;&#10;Of course you can change the SQL used in the example (and/or the template) to match your own USoft data model.&#13;&#10;&#13;&#10;To find the Controls in the OTS_TravelTemplate.docx example, execute::&#13;&#10;&#9;select OTS_WORD_LETTER.ControlInfo( RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_TravelTemplate.docx'  );&#13;&#10;Assuming you copied OTS_TravelTemplate.docx to c:\temp that would be:&#13;&#10;&#9;select OTS_WORD_LETTER.ControlInfo(  'c:\temp\OTS_TravelTemplate.docx'  );&#13;&#10;&#9;&#13;&#10;Now the idea is to fill the available Controls as follows:&#13;&#10;&#9;-1- a list of reservations in a Control with tag &quot;ALL_RESERVATIONS&quot;&#13;&#10;&#9;&#9;Note: you will need to import the OTS_STRING Off The Shelf component too for this example. It contains an record aggregate used for the data passed to ALL_RESERVATIONS&#13;&#10;&#9;-2- to fill a Control with tag name &quot;GENDER&quot; using a SQL DECODE statement&#13;&#10;&#9;-3- to fill a Control with tag name NAME using a concatenation&#13;&#10;&#9;-4- to fill a Control RESERVATIONS_TABLE from an xml.sqlexport&#13;&#10;&#13;&#10;To produce the result document:&#13;&#10;&#13;&#10;invoke OTS_WORD_LETTER.RUN with select &#13;&#10;&#9;RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_TravelTemplate.docx',&#13;&#10;&#9;'c:\temp\Reservation' || p.person_id || '.docx',&#13;&#10;&#9;'ALL_RESERVATIONS',&#13;&#10;&#9;( invoke OTS_STRING.RecordConcat with select '', ',', res_id from reservations rr, tour ss relate p MAKES rr, ss &quot;FOR WHICH IS MADE&quot; rr),&#13;&#10;&#9;'GENDER', decode(p.GENDER, 'M', 'Mr', 'F', 'Ms', ''),&#13;&#10;&#9;'NAME',  p.FIRST_NAME || ' ' || p.FAMILY_NAME,&#13;&#10;&#9;'RESERVATIONS_TABLE', &#13;&#10;&#9;(&#13;&#10;&#9;&#9;invoke xml.sqlexport with select&#13;&#10;&#9;&#9;&#9;r.RES_ID,&#13;&#10;&#9;&#9;&#9;s.TOUR_TYPE, s.DESTINATION,&#13;&#10;&#9;&#9;&#9;s.START_DATE, s.RETURN_DATE&#9;&#9;&#13;&#10;&#9;&#9;from&#13;&#10;&#9;&#9;&#9;reservation r, tour s&#13;&#10;&#9;&#9;relate&#13;&#10;&#9;&#9;&#9;p MAKES r, s &quot;FOR WHICH IS MADE&quot; r&#13;&#10;&#9;)&#13;&#10;FROM&#13;&#10;&#9;PERSON p&#13;&#10;WHERE exists &#13;&#10;(&#13;&#10;&#9;select &#13;&#10;&#9;&#9;'has reservation' &#13;&#10;&#9;from&#13;&#10;&#9;&#9;reservations rrr, tour sss &#13;&#10;&#9;relate&#13;&#10;        p MAKES rrr, sss &quot;FOR WHICH IS MADE&quot; rrr&#13;&#10;)&#13;&#10;AND&#13;&#10;&#9;p.person_id = 1&#13;&#10;&#13;&#10;If you omit the condition &quot;AND p.person_id=1&quot; you will see that all documents for each person with reservations are produced instantly and fast.&#13;&#10;&#13;&#10;You could use this SQL (without the limitation on person_id) in a logical view to let it produce documents on demand.&#13;&#10;Make a logical view with name e.g. RESERVATION_REPORT and SQL:&#13;&#10;SELECT&#13;&#10;&#9;p.PERSON_ID,&#13;&#10;&#9;OTS_WORD_LETTER.RUN&#13;&#10;&#9;(&#13;&#10;       RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_TravelTemplate.docx',&#13;&#10;       'c:\temp\Reservation' || p.PERSON_ID || '.docx',&#13;&#10;       'ALL_RESERVATIONS',&#13;&#10;       ( invoke OTS_STRING.RecordConcat with select '', ', ', res_id from reservations rr, tour ss relate p MAKES rr, ss &quot;FOR WHICH IS MADE&quot; rr),&#13;&#10;       'GENDER', decode(p.GENDER, 'M', 'Mr.', 'F', 'Ms.', ''),&#13;&#10;       'NAME',  p.FIRST_NAME || ' ' || p.FAMILY_NAME,&#13;&#10;       'RESERVATIONS_TABLE', &#13;&#10;       (&#13;&#10;             invoke xml.sqlexport with select&#13;&#10;                    r.RES_ID,&#13;&#10;                    s.TOUR_TYPE, s.DESTINATION,&#13;&#10;                    s.START_DATE, s.RETURN_DATE             &#13;&#10;             from&#13;&#10;                    reservation r, tour s&#13;&#10;             relate&#13;&#10;                    p MAKES r, s &quot;FOR WHICH IS MADE&quot; r&#13;&#10;       )&#13;&#10;&#9;) &quot;FILEPATH&quot;&#13;&#10;FROM&#13;&#10;       PERSON p&#13;&#10;WHERE exists &#13;&#10;(&#13;&#10;&#9;select &#13;&#10;&#9;&#9;'has reservation' &#13;&#10;&#9;from&#13;&#10;&#9;&#9;reservations rrr, tour sss &#13;&#10;&#9;relate&#13;&#10;        p MAKES rrr, sss &quot;FOR WHICH IS MADE&quot; rrr&#13;&#10;)&#13;&#10;Try this logical view in the application by querying a person that has reservations (a reservation report will be generated), querying a person with no reservations and finally querying all (all reports will be generated).&#13;&#10;As a final example that passes all data via a propriety xml format (as opposed to passing name - vale/xml.[sql]export pairs), try in the Application/SqlCommand this call with inline data:&#13;&#10;&#13;&#10;invoke OTS_WORD_LETTER.RUN with select &#13;&#10;&#9;RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_Sample_WordReport.docx', &#13;&#10;&#9;'c:\temp\Result.docx',&#13;&#10;&#9;'&lt;Report&gt;&#13;&#10;&#9;&lt;PAS_NUMBER&gt;000&lt;/PAS_NUMBER&gt;&#13;&#10;&#9;&lt;GENDER&gt;Mr.&lt;/GENDER&gt;&#13;&#10;&#9;&lt;NAME&gt;Whoever&lt;/NAME&gt;&#13;&#10;&#9;&lt;Table NAME=&quot;BOOK_TABLE&quot;&gt;&#13;&#10;&#9;&#9;&lt;Row&gt;&#13;&#10;&#9;&#9;&#9;&lt;NAME&gt;&lt;![CDATA[Harry Potter and the Philosopher''s Stone]]&gt;&lt;/NAME&gt;&#13;&#10;&#9;&#9;&#9;&lt;AUTHOR&gt;&lt;![CDATA[J. K. Rowling]]&gt;&lt;/AUTHOR&gt;&#13;&#10;&#9;&#9;&#9;&lt;DUE_DATE&gt;01-JAN-2020&lt;/DUE_DATE&gt;&#13;&#10;&#9;&#9;&lt;/Row&gt;&#13;&#10;&#9;&#9;&lt;Row&gt;&#13;&#10;&#9;&#9;&#9;&lt;NAME&gt;&lt;![CDATA[Harry Potter and the Chamber of Secrets]]&gt;&lt;/NAME&gt;&#13;&#10;&#9;&#9;&#9;&lt;AUTHOR&gt;&lt;![CDATA[J. K. Rowling]]&gt;&lt;/AUTHOR&gt;&#13;&#10;&#9;&#9;&#9;&lt;DUE_DATE&gt;01-MAR-2020&lt;/DUE_DATE&gt;&#13;&#10;&#9;&#9;&lt;/Row&gt;&#9;&#13;&#10;&#9;&lt;/Table&gt;&#13;&#10;&lt;/Report&gt;'" T_RDMI_AUTOMATION_SERVER="N" T_RDMI_JAVA_COMPONENT="N" T_RDMI_STATEFUL_COMPONENT="Y" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" T_RDMI_WEB_SERVICE_COMPONENT="N" T_RDMI_DOTNET_COMPONENT="Y" T_RDMI_COMPONENT_CONSTRUCTOR="Y"/>
</Components>
<DotNet_Components documentName="DotNet Components">
<T_RDMI_DOTNET_COMPONENT COMPONENT_NAME="OTS_WORD_LETTER" DESCRIPTION="This component provides a way to automatically generate word letter/reports in Microsoft Word format.&#13;&#10;It does so by copying a Microsoft Word document template and then replacing all data fields in that copy by content from data passed to this component.&#13;&#10;The expected  template format is the Microsoft docx format.&#13;&#10;A Microsoft Word installation is NOT needed on the computer where this component is run, as the component uses the Office Open XML file format for generating a result document.&#13;&#10;&#13;&#10;The Microsoft Word document template must contain placeholders, so called Controls, where  information from the data model will be represented in the final result document.&#13;&#10;How to create such a document is described below. A sample Microsoft Word template is also available and used in the given examples.&#13;&#10;&#13;&#10;The component offers two methods:&#13;&#10;&#9;-1- A method ControlInfo(templatefilepath)  that will show the available Controls in the template.&#13;&#10;&#9;&#9;This serves to do a sanity check: are the Controls you want to fill present in the template?&#13;&#10;&#9;&#9;In the Application/SqlCommand window you can try this on the sample template, execute:&#13;&#10;&#9;&#9;&#9;select OTS_WORD_LETTER.ControlInfo(  RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_Sample_WordReport.docx'  );&#13;&#10;&#9;&#9;The thought behind this method can be developed further  to automatically categorize and maintain the set of templates in an organization.&#13;&#10;&#9;-2- A method Run(templatefilepath, resultfilepath, [parameters, ...]) that will produce the result document from the template and data passed.&#13;&#10;&#9;&#9;In the application/SqlCommand window you can try:&#13;&#10;&#9;&#9;&#9;invoke OTS_WORD_LETTER.RUN with select &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_Sample_WordReport.docx', &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || 'Result.docx',&#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_Sample_Xml.xml'&#13;&#10;&#9;&#9;The Run method produces the location of the result document that can be opened with Microsoft Word to see the result document.&#13;&#10;&#9;&#9;This example fills data from an xml document into the copy of the template document.&#13;&#10;&#13;&#10;The Run method has a number of ways to pass data for the Controls. &#13;&#10;&#9;-a- Passing a single filepath argument with a propriety xml format that contains the data. Inspect the example above. It contains plain values and a table.&#13;&#10;&#9;-b- Passing name - value pairs as data for Controls. &#13;&#10;&#9;&#9;Try for example:&#13;&#10;&#9;&#9;&#9;invoke OTS_WORD_LETTER.RUN with select &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_Sample_WordReport.docx', &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || 'Result.docx',&#13;&#10;&#9;&#9;&#9;&#9;'PAS_NUMBER', 'AX123',&#13;&#10;&#9;&#9;&#9;&#9;'NAME', user&#13;&#10;&#9;&#9;In this example, the result document has PAS_NUMBER and NAME resolved but the other Controls are not filled.&#13;&#10;&#9;-c- Passing name - xml pairs as data  for Controls. This allows filling in table Controls.&#13;&#10;&#9;&#9;Try for example:&#13;&#10;&#9;&#9;&#9;invoke OTS_WORD_LETTER.RUN with select &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_Sample_WordReport.docx', &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || 'Result.docx',&#13;&#10;&#9;&#9;&#9;&#9;'PAS_NUMBER', 'AX123',&#13;&#10;&#9;&#9;&#9;&#9;'NAME', user,&#13;&#10;&#9;&#9;&#9;&#9;'BOOK_TABLE',&#13;&#10;&#9;&#9;&#9;&#9;&#9;'&lt;Books&gt;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Book NAME=&quot;My life as a developer&quot; AUTHOR=&quot;Dilbert&quot; DUE_DATE=&quot;01-JAN-2020&quot;&gt;&lt;/Book&gt;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Book NAME=&quot;Why Nations Fail&quot; AUTHOR=&quot;James A. Robinson &quot; DUE_DATE=&quot;17-FEB-2020&quot;&gt;&lt;/Book&gt;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/Books&gt;'&#13;&#10;&#9;&#9;Now also the books on loan table has data in the result.&#13;&#10;&#9;&#9;Note that you could have used data from your data model in the call by taking column values for the plain values and xml.[sql]export result for the Controls that show table data.&#13;&#10;&#13;&#10;Before showing some examples that use data from your data model, first a few words on how to create a template document with Controls.&#13;&#10;&#13;&#10;A template document can be any Word document stored in docx format. You will have to add Controls to that document that will act as placeholders for the data.&#13;&#10;&#9;-1- Create a word template document that contains the desired layout, fixed text, images etc.&#13;&#10;&#9;-2- If the menu bar in Microsoft Word does NOT show a &quot;Developer&quot; menu, you will have to activate the Developer menu first.&#13;&#10;&#9;&#9;Depending on the version of Microsoft Word you would activate this by opening the File menu, Options. Then click &quot;Customize Ribbon&quot;. &#13;&#10;&#9;&#9;Choose &quot;Main Tabs&quot; from the &quot;Customize the Ribbon&quot; dropdown. Make sure [v]Developer is marked active.&#13;&#10;&#9;-3- How to add a Control in your Microsoft Word template to hold a plain value:&#13;&#10;&#9;&#9;Choose &quot;Developer&quot; from the main menu.&#13;&#10;&#9;&#9;Click &quot;Design Mode&quot;&#13;&#10;&#9;&#9;Click in the document at the position you want the Control.&#13;&#10;&#9;&#9;Click the Plain Text Control (or the Rich text Control) symbol (symbol Aa left from &quot;Design Mode)&quot;&#13;&#10;&#9;&#9;&#9;Now you will see the Control in the document. &#13;&#10;&#9;&#9;Click &quot;Properties&quot; (just under &quot;Design Mode&quot;)&#13;&#10;&#9;&#9;&#9;In the Tag field, fill the name that you will use when passing data, e.g. MYFIELD&#13;&#10;&#9;&#9;Save the template and, in the application, invoke the Run method for this template. Specify a value for MYFIELD.&#13;&#10;&#9;&#9;&#9;Assuming you added the MYFIELD text Control to the example template, see a result by executing:&#13;&#10;&#9;&#9;&#9;invoke OTS_WORD_LETTER.RUN with select &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_Sample_WordReport.docx', &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || 'Result.docx',&#13;&#10;&#9;&#9;&#9;&#9;'MYFILED', 'Hello Controls'&#13;&#10;&#9;&#9;&#9;Use the ControlInfo method (as shown before) to see the MYFIELD control is indeed available.&#13;&#10;&#9;&#9;&#9;Note that currently no rtf (rich text format) data is supported in the component.&#13;&#10;&#9;-4- To add repeated content (table data)&#13;&#10;&#9;&#9;-add a rich text content control&#13;&#10;&#9;&#9;-set the Tag property of this control to the same value as the NAME attribute in the xml document&#13;&#10;&#9;&#9;-add a table inside the control with one row, &#13;&#10;&#9;&#9;&#9;-in that row add new (rich text) content control for each field.&#13;&#10;&#9;-5- The other Microsoft Word controls are not implemented except the Date Picker Control.&#13;&#10;&#9;&#9;For the Date Picker Control, the component will try to parse the data as DateTime and format the DateTime according to the format specified for the Date Picker Control. The advanced example below uses the Date Picker control.&#13;&#10;&#9;&#9;&#13;&#10;The following advanced examples assume that you are working with the USoft Travel Agency example (a course material example).&#13;&#10;Note that you can copy the templates to your own (template) directory to avoid the paths to the USoft OffTheShelf directory in the examples.&#13;&#10;That also allows you to experiment and change the templates while keeping the original.&#13;&#10;Of course you can change the SQL used in the example (and/or the template) to match your own USoft data model.&#13;&#10;&#13;&#10;To find the Controls in the OTS_TravelTemplate.docx example, execute::&#13;&#10;&#9;select OTS_WORD_LETTER.ControlInfo( RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_TravelTemplate.docx'  );&#13;&#10;Assuming you copied OTS_TravelTemplate.docx to c:\temp that would be:&#13;&#10;&#9;select OTS_WORD_LETTER.ControlInfo(  'c:\temp\OTS_TravelTemplate.docx'  );&#13;&#10;&#9;&#13;&#10;Now the idea is to fill the available Controls as follows:&#13;&#10;&#9;-1- a list of reservations in a Control with tag &quot;ALL_RESERVATIONS&quot;&#13;&#10;&#9;&#9;Note: you will need to import the OTS_STRING Off The Shelf component too for this example. It contains an record aggregate used for the data passed to ALL_RESERVATIONS&#13;&#10;&#9;-2- to fill a Control with tag name &quot;GENDER&quot; using a SQL DECODE statement&#13;&#10;&#9;-3- to fill a Control with tag name NAME using a concatenation&#13;&#10;&#9;-4- to fill a Control RESERVATIONS_TABLE from an xml.sqlexport&#13;&#10;&#13;&#10;To produce the result document:&#13;&#10;&#13;&#10;invoke OTS_WORD_LETTER.RUN with select &#13;&#10;&#9;RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_TravelTemplate.docx',&#13;&#10;&#9;'c:\temp\Reservation' || p.person_id || '.docx',&#13;&#10;&#9;'ALL_RESERVATIONS',&#13;&#10;&#9;( invoke OTS_STRING.RecordConcat with select '', ',', res_id from reservations rr, tour ss relate p MAKES rr, ss &quot;FOR WHICH IS MADE&quot; rr),&#13;&#10;&#9;'GENDER', decode(p.GENDER, 'M', 'Mr', 'F', 'Ms', ''),&#13;&#10;&#9;'NAME',  p.FIRST_NAME || ' ' || p.FAMILY_NAME,&#13;&#10;&#9;'RESERVATIONS_TABLE', &#13;&#10;&#9;(&#13;&#10;&#9;&#9;invoke xml.sqlexport with select&#13;&#10;&#9;&#9;&#9;r.RES_ID,&#13;&#10;&#9;&#9;&#9;s.TOUR_TYPE, s.DESTINATION,&#13;&#10;&#9;&#9;&#9;s.START_DATE, s.RETURN_DATE&#9;&#9;&#13;&#10;&#9;&#9;from&#13;&#10;&#9;&#9;&#9;reservation r, tour s&#13;&#10;&#9;&#9;relate&#13;&#10;&#9;&#9;&#9;p MAKES r, s &quot;FOR WHICH IS MADE&quot; r&#13;&#10;&#9;)&#13;&#10;FROM&#13;&#10;&#9;PERSON p&#13;&#10;WHERE exists &#13;&#10;(&#13;&#10;&#9;select &#13;&#10;&#9;&#9;'has reservation' &#13;&#10;&#9;from&#13;&#10;&#9;&#9;reservations rrr, tour sss &#13;&#10;&#9;relate&#13;&#10;        p MAKES rrr, sss &quot;FOR WHICH IS MADE&quot; rrr&#13;&#10;)&#13;&#10;AND&#13;&#10;&#9;p.person_id = 1&#13;&#10;&#13;&#10;If you omit the condition &quot;AND p.person_id=1&quot; you will see that all documents for each person with reservations are produced instantly and fast.&#13;&#10;&#13;&#10;You could use this SQL (without the limitation on person_id) in a logical view to let it produce documents on demand.&#13;&#10;Make a logical view with name e.g. RESERVATION_REPORT and SQL:&#13;&#10;SELECT&#13;&#10;&#9;p.PERSON_ID,&#13;&#10;&#9;OTS_WORD_LETTER.RUN&#13;&#10;&#9;(&#13;&#10;       RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_TravelTemplate.docx',&#13;&#10;       'c:\temp\Reservation' || p.PERSON_ID || '.docx',&#13;&#10;       'ALL_RESERVATIONS',&#13;&#10;       ( invoke OTS_STRING.RecordConcat with select '', ', ', res_id from reservations rr, tour ss relate p MAKES rr, ss &quot;FOR WHICH IS MADE&quot; rr),&#13;&#10;       'GENDER', decode(p.GENDER, 'M', 'Mr.', 'F', 'Ms.', ''),&#13;&#10;       'NAME',  p.FIRST_NAME || ' ' || p.FAMILY_NAME,&#13;&#10;       'RESERVATIONS_TABLE', &#13;&#10;       (&#13;&#10;             invoke xml.sqlexport with select&#13;&#10;                    r.RES_ID,&#13;&#10;                    s.TOUR_TYPE, s.DESTINATION,&#13;&#10;                    s.START_DATE, s.RETURN_DATE             &#13;&#10;             from&#13;&#10;                    reservation r, tour s&#13;&#10;             relate&#13;&#10;                    p MAKES r, s &quot;FOR WHICH IS MADE&quot; r&#13;&#10;       )&#13;&#10;&#9;) &quot;FILEPATH&quot;&#13;&#10;FROM&#13;&#10;       PERSON p&#13;&#10;WHERE exists &#13;&#10;(&#13;&#10;&#9;select &#13;&#10;&#9;&#9;'has reservation' &#13;&#10;&#9;from&#13;&#10;&#9;&#9;reservations rrr, tour sss &#13;&#10;&#9;relate&#13;&#10;        p MAKES rrr, sss &quot;FOR WHICH IS MADE&quot; rrr&#13;&#10;)&#13;&#10;Try this logical view in the application by querying a person that has reservations (a reservation report will be generated), querying a person with no reservations and finally querying all (all reports will be generated).&#13;&#10;As a final example that passes all data via a propriety xml format (as opposed to passing name - vale/xml.[sql]export pairs), try in the Application/SqlCommand this call with inline data:&#13;&#10;&#13;&#10;invoke OTS_WORD_LETTER.RUN with select &#13;&#10;&#9;RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_Sample_WordReport.docx', &#13;&#10;&#9;'c:\temp\Result.docx',&#13;&#10;&#9;'&lt;Report&gt;&#13;&#10;&#9;&lt;PAS_NUMBER&gt;000&lt;/PAS_NUMBER&gt;&#13;&#10;&#9;&lt;GENDER&gt;Mr.&lt;/GENDER&gt;&#13;&#10;&#9;&lt;NAME&gt;Whoever&lt;/NAME&gt;&#13;&#10;&#9;&lt;Table NAME=&quot;BOOK_TABLE&quot;&gt;&#13;&#10;&#9;&#9;&lt;Row&gt;&#13;&#10;&#9;&#9;&#9;&lt;NAME&gt;&lt;![CDATA[Harry Potter and the Philosopher''s Stone]]&gt;&lt;/NAME&gt;&#13;&#10;&#9;&#9;&#9;&lt;AUTHOR&gt;&lt;![CDATA[J. K. Rowling]]&gt;&lt;/AUTHOR&gt;&#13;&#10;&#9;&#9;&#9;&lt;DUE_DATE&gt;01-JAN-2020&lt;/DUE_DATE&gt;&#13;&#10;&#9;&#9;&lt;/Row&gt;&#13;&#10;&#9;&#9;&lt;Row&gt;&#13;&#10;&#9;&#9;&#9;&lt;NAME&gt;&lt;![CDATA[Harry Potter and the Chamber of Secrets]]&gt;&lt;/NAME&gt;&#13;&#10;&#9;&#9;&#9;&lt;AUTHOR&gt;&lt;![CDATA[J. K. Rowling]]&gt;&lt;/AUTHOR&gt;&#13;&#10;&#9;&#9;&#9;&lt;DUE_DATE&gt;01-MAR-2020&lt;/DUE_DATE&gt;&#13;&#10;&#9;&#9;&lt;/Row&gt;&#9;&#13;&#10;&#9;&lt;/Table&gt;&#13;&#10;&lt;/Report&gt;'" T_RDMI_AUTOMATION_SERVER="N" T_RDMI_JAVA_COMPONENT="N" T_RDMI_STATEFUL_COMPONENT="Y" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" T_RDMI_WEB_SERVICE_COMPONENT="N" T_RDMI_DOTNET_COMPONENT="Y" T_RDMI_COMPONENT_CONSTRUCTOR="Y" ASSEMBLYREFS="System.Xml.dll;wpf\WindowsBase.dll" PROGRAM_SOURCE="using System;&#13;&#10;using System.Text;&#13;&#10;using System.IO;&#13;&#10;using System.IO.Packaging;&#13;&#10;using System.Xml;&#13;&#10;using System.Xml.XPath;&#13;&#10;using System.Collections;&#13;&#10;using System.Collections.Generic;&#13;&#10;using System.Globalization;&#13;&#10;&#13;&#10;class OTS_WORD_LETTER&#13;&#10;{&#13;&#10;&#9;private readonly string m_ro_word_ns = &quot;http://schemas.openxmlformats.org/wordprocessingml/2006/main&quot;;&#13;&#10;&#9;private readonly string m_ro_document_relationship_type = &quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument&quot;;&#13;&#10;&#9;private readonly string[] m_formats= {&#13;&#10;&#9;&#9;&quot;dd MMMM yyyy&quot;, &quot;dd MMM yyyy&quot;, &quot;d MMMM yyyy&quot;, &quot;d MMM yyyy&quot;, &quot;d M yyyy&quot;, &quot;d M yy&quot;,&#13;&#10;&#9;&#9;&quot;dd-MMMM-yyyy&quot;, &quot;dd-MM-yyyy&quot;, &quot;dd-MMM-yyyy&quot;, &quot;dd-MMM-yy&quot;, &#13;&#10;&#9;&#9;&quot;d-MMMM-yyyy&quot;, &quot;d-M-yyyy&quot;, &quot;d-MMM-yyyy&quot;, &quot;d-MMM-yy&quot;,&#13;&#10;&#9;&#9;&quot;dd MM yyyy HH:mm:ss&quot;, &quot;dd MMM yyyy HH:mm:ss&quot;, &quot;dd MMM yyyy H:mm:ss&quot;, &quot;dd MMMM yyyy HH:mm:ss&quot;, &quot;dd MMMM yyyy H:mm:ss&quot;,&#13;&#10;&#9;&#9;&quot;dd MM yyyy HH:mm:ssZ&quot;, &quot;dd MMM yyyy HH:mm:ssZ&quot;, &quot;dd MMM yyyy H:mm:ssZ&quot;, &quot;dd MMMM yyyy HH:mm:ssZ&quot;, &quot;dd MMMM yyyy H:mm:ssZ&quot;,&#13;&#10;&#9;&#9;&quot;dd-MM-yyyy HH:mm:ss&quot;, &quot;dd-MM-yyyy H:mm:ss&quot;, &quot;dd-MMM-yy HH:mm:ss&quot;, &quot;dd-MMM-yy H:mm:ss&quot;,&#13;&#10;&#9;&#9;&quot;dd-MM-yyyy HH:mm:ssZ&quot;, &quot;dd-MM-yyyy H:mm:ssZ&quot;, &quot;dd-MMM-yy HH:mm:ssZ&quot;, &quot;dd-MMM-yy H:mm:ssZ&quot;,&#13;&#10;&#9;&#9;&quot;d M yyyy HH:mm:ss&quot;, &quot;d M H:mm:ss&quot;, &quot;d MMM yyyy HH:mm:ss&quot;, &quot;d MMM yyyy H:mm:ss&quot;,&#13;&#10;&#9;&#9;&quot;d M yyyy HH:mm:ssZ&quot;, &quot;d M H:mm:ssZ&quot;, &quot;d MMM yyyy HH:mm:ssZ&quot;, &quot;d MMM yyyy H:mm:ssZ&quot;,&#13;&#10;&#9;&#9;&quot;d-MMMM-yyyy HH:mm:ss&quot;, &quot;d-MMMM-yyyy H:mm:ss&quot;, &quot;d-M-yyyy HH:mm:ss&quot;, &quot;d-M-yyyy H:mm:ss&quot;, &quot;d-MMM-yy HH:mm:ss&quot;, &quot;d-MMM-yy H:mm:ss&quot;,&#13;&#10;&#9;&#9;&quot;d-MMMM-yyyy HH:mm:ssZ&quot;, &quot;d-MMMM-yyyy H:mm:ssZ&quot;, &quot;d-M-yyyy HH:mm:ssZ&quot;, &quot;d-M-yyyy H:mm:ssZ&quot;, &quot;d-MMM-yy HH:mm:ssZ&quot;, &quot;d-MMM-yy H:mm:ssZ&quot;,&#13;&#10;&#9;&#9;&quot;d-MMMM-yyyy HH:mm&quot;, &quot;d-MMMM-yyyy H:mm&quot;, &quot;d-M-yyyy HH:mm&quot;, &quot;d-M-yyyy H:mm&quot;, &quot;d-MMM-yy HH:mm&quot;, &quot;d-MMM-yy H:mm&quot;,&#13;&#10;&#9;&#9;&quot;dd-MM-yyyy HH:mm&quot;, &quot;dd-MM-yyyy H:mm&quot;, &quot;dd-MMM-yy HH:mm&quot;, &quot;dd-MMM-yy H:mm&quot;,&#13;&#10;&#9;&#9;&quot;d-MMMM-yyyy HHmm&quot;, &quot;d-MMMM-yyyy Hmm&quot;, &quot;d-M-yyyy HHmm&quot;, &quot;d-M-yyyy Hmm&quot;, &quot;d-MMM-yy HHmm&quot;, &quot;d-MMM-yy Hmm&quot;,&#13;&#10;&#9;&#9;&quot;dd-MM-yyyy HHmm&quot;, &quot;dd-MM-yyyy Hmm&quot;, &quot;dd-MMM-yy HHmm&quot;, &quot;dd-MMM-yy Hmm&quot;,&#13;&#10;&#9;&#9;@&quot;yyyy\/MMddHHmmss&quot;, // con date format&#13;&#10;&#9;&#9;@&quot;yyyy\/MMdd&quot;, // con date short format without time&#13;&#10;&#9;&#9;&quot;M/d/yyyy h:mm:ss tt&quot;, &quot;M/d/yyyy h:mm tt&quot;, &#13;&#10;&#9;&#9;&quot;MM/dd/yyyy hh:mm:ss&quot;, &quot;M/d/yyyy h:mm:ss&quot;, &#13;&#10;&#9;&#9;&quot;M/d/yyyy hh:mm tt&quot;, &quot;M/d/yyyy hh tt&quot;, &#13;&#10;&#9;&#9;&quot;M/d/yyyy h:mm&quot;, &quot;M/d/yyyy h:mm&quot;, &#13;&#10;&#9;&#9;&quot;MM/dd/yyyy hh:mm&quot;, &quot;M/dd/yyyy hh:mm&quot;,&#13;&#10;&#9;&#9;&quot;MM/d/yyyy HH:mm:ss.ffffff&quot;,&#13;&#10;&#9;&#9;&quot;yyyy-MM-dd'T'HH:mm:ss.fffffff'Z'&quot;,&#13;&#10;&#9;&#9;&quot;yyyy-MM-dd'T'HH:mm:ss&quot;,&#13;&#10;&#9;&#9;&quot;M/d/yyyy&quot;,&#13;&#10;&#9;&#9;&quot;yyyy&quot;&#13;&#10;&#9;};&#13;&#10;&#13;&#10;&#9;/* helper method to report the tags in a template document */&#13;&#10;&#9;public string ControlInfo(string template_filepath)&#13;&#10;&#9;{&#13;&#10;&#9;&#9;StringBuilder result = new StringBuilder();&#13;&#10;&#9;&#9;FileStream report_stream = File.Open(template_filepath,  FileMode.Open,  FileAccess.Read, FileShare.ReadWrite);&#13;&#10;&#9;&#9;try&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;Stream word_doc_stream = GetDocumentStream(report_stream, true);&#13;&#10;&#9;&#9;&#9;XmlDocument word_doc = CreateXmlDocumentFromStream(word_doc_stream);&#13;&#10;&#9;&#9;&#9;XmlNamespaceManager nsmgr = new XmlNamespaceManager(word_doc.NameTable);&#13;&#10;&#9;&#9;&#9;nsmgr.AddNamespace(&quot;w&quot;, m_ro_word_ns);&#13;&#10;&#9;&#9;&#9;XmlNodeList content_controls = word_doc.SelectNodes(&quot;descendant::w:sdt[w:sdtPr[w:tag]]&quot;, nsmgr);&#13;&#10;&#9;&#9;&#9;Addlabels(result, content_controls, nsmgr, 0);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;catch (Exception ex)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;throw new Exception(&quot;ControlInfo: &quot; + ex.Message);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;finally&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;report_stream.Close();&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;return result.ToString();&#13;&#10;&#9;}&#13;&#10;&#9;private void Addlabels(StringBuilder result, XmlNodeList content_controls, XmlNamespaceManager nsmgr, int nesting)&#13;&#10;&#9;{&#13;&#10;&#9;&#9;&#9;foreach(XmlNode n in content_controls)&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;XmlNodeList ancestors = n.SelectNodes(&quot;ancestor::w:sdt[w:sdtPr[w:tag]]&quot;, nsmgr);&#13;&#10;&#9;&#9;&#9;&#9;if(ancestors.Count &gt; nesting)&#13;&#10;&#9;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;&#9;continue;&#13;&#10;&#9;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;&#9;string content_control_name = n.SelectNodes(&quot;w:sdtPr/w:tag&quot;, nsmgr)[0].Attributes[&quot;val&quot;, m_ro_word_ns].Value;&#13;&#10;&#9;&#9;&#9;&#9;for(int i=0; i&lt;nesting; i++)&#13;&#10;&#9;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;&#9;result.Append(&quot;&#9;&quot;);&#13;&#10;&#9;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;&#9;result.Append(content_control_name + Environment.NewLine);&#13;&#10;&#9;&#9;&#9;&#9;XmlNodeList table_content_controls = n.SelectNodes(&quot;descendant::w:sdt[w:sdtPr[w:tag]]&quot;, nsmgr);&#13;&#10;&#9;&#9;&#9;&#9;Addlabels(result, table_content_controls, nsmgr, nesting + 1); &#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;}&#13;&#10;&#9;public string Run(string template_filepath, string report_filepath, Object[] args)&#13;&#10;&#9;{&#13;&#10;&#9;&#9;if (!File.Exists(template_filepath)) &#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;throw new Exception(&quot;Word template file &quot; + template_filepath + &quot; does not exist.&quot;);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;if(string.IsNullOrEmpty(report_filepath))&#13;&#10;&#9;&#9;{ &#13;&#10;&#9;&#9;&#9;report_filepath = Path.GetTempFileName() + &quot;.docx&quot;;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;if(FileIsOpen(report_filepath))&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;throw new Exception(string.Format(&quot;File {0} is currently open.&quot;, report_filepath));&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;File.Copy(template_filepath, report_filepath, true); // warning: this possibly overwrites an existing file&#13;&#10;&#9;&#9;if(args == null)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;return report_filepath; &#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;FileStream report_stream = File.Open(report_filepath, FileMode.Open, FileAccess.ReadWrite);&#13;&#10;&#9;&#9;Dictionary&lt;string, object&gt; namevalues = new Dictionary&lt;string, object&gt;();&#13;&#10;&#9;&#9;if(args.Length == 1)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;string xmldata = ((string)args[0]).Trim();&#13;&#10;&#9;&#9;&#9;XmlDocument xmldoc = new XmlDocument();&#13;&#10;&#9;&#9;&#9;if(xmldata.StartsWith(&quot;&lt;&quot;)) &#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;xmldoc.LoadXml(xmldata);&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;xmldoc.Load(xmldata);&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;/* read propriety xml format with tagname - value structure  */&#13;&#10;&#9;&#9;&#9;foreach (XmlNode xml_data_node in xmldoc.DocumentElement.ChildNodes)&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;string name = &quot;Table&quot;.Equals(xml_data_node.Name, StringComparison.OrdinalIgnoreCase) ? xml_data_node.Attributes[&quot;NAME&quot;].Value : xml_data_node.Name;&#13;&#10;&#9;&#9;&#9;&#9;string value = string.IsNullOrEmpty(xml_data_node.Value) ? xml_data_node.InnerXml : xml_data_node.Value;&#13;&#10;&#9;&#9;&#9;&#9;AddArg2Dict(namevalues, name, value);&#13;&#10;&#9;&#9;&#9;}&#9;&#9;&#9;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;/* read values as name, value | table where table values are defined from xml.[sql]export */&#13;&#10;&#9;&#9;for(int i=0; args.Length &gt; 1 &amp;&amp; i&lt; args.Length -1 ; i+=2)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;AddArg2Dict(namevalues, (string)args[i], (string)args[i+1]);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;try&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;Stream word_doc_stream = GetDocumentStream(report_stream, false);&#13;&#10;&#9;&#9;&#9;XmlDocument word_doc = CreateXmlDocumentFromStream(word_doc_stream);&#13;&#10;&#9;&#9;&#9;XmlNamespaceManager nsmgr = new XmlNamespaceManager(word_doc.NameTable);&#13;&#10;&#9;&#9;&#9;nsmgr.AddNamespace(&quot;w&quot;, m_ro_word_ns);&#13;&#10;&#9;&#9;&#9;FillAllControlData(word_doc, nsmgr, word_doc.SelectNodes(&quot;//w:body&quot;, nsmgr)[0], namevalues);&#13;&#10;&#9;&#9;&#9;word_doc_stream.Seek(0, SeekOrigin.Begin);//reset the stream-pointer&#13;&#10;&#9;&#9;&#9;word_doc_stream.SetLength(0);&#13;&#10;&#9;&#9;&#9;word_doc.Save(word_doc_stream);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;catch (Exception ex)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;throw new Exception(&quot;Run: &quot; + ex.Message);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;finally&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;report_stream.Close();&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;return report_filepath;&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;private void AddArg2Dict(Dictionary&lt;string, object&gt; namevalues, string name, string value)&#13;&#10;&#9;{&#13;&#10;&#9;&#9;XmlReaderSettings set = new XmlReaderSettings();&#13;&#10;&#9;&#9;set.ConformanceLevel = ConformanceLevel.Fragment;&#13;&#10;&#9;&#9;try&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;XPathDocument xmlfragment = new XPathDocument(XmlReader.Create(new StringReader(value), set));&#13;&#10;&#9;&#9;&#9;namevalues.Add(name, xmlfragment.CreateNavigator());&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;catch(Exception) &#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;namevalues.Add(name, value);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;private void FillAllControlData(XmlDocument word_doc, XmlNamespaceManager nsmgr, XmlNode word_doc_node, Dictionary&lt;string, object&gt; namevalues)&#13;&#10;&#9;{&#13;&#10;&#9;&#9;foreach(string name in namevalues.Keys)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;FillControlData(word_doc, nsmgr, word_doc_node, name, namevalues[name]);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;private void FillControlData(XmlDocument word_doc, XmlNamespaceManager nsmgr, XmlNode word_doc_node, string name, object values)&#13;&#10;&#9;{&#13;&#10;&#9;&#9;if(values == null)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;return;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;XmlNodeList content_controls = word_doc_node.SelectNodes(&quot;descendant::w:sdt[w:sdtPr[w:tag[@w:val=\&quot;&quot; + name + &quot;\&quot;]]]&quot;, nsmgr);&#13;&#10;&#9;&#9;if (content_controls.Count == 0)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;return;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;XmlNode content_control = content_controls[0];&#9;&#9;&#13;&#10;&#9;&#9;if (values.GetType() == typeof(string))&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;ReplaceRunClass(word_doc, nsmgr, content_control, name, (string)values);&#13;&#10;&#9;&#9;&#9;return;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;if (!values.GetType().IsSubclassOf(typeof(XPathNavigator)))&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;return;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;XPathNavigator nav = (XPathNavigator)values;&#13;&#10;&#9;&#9;if(nav.SelectSingleNode(&quot;*&quot;) == null)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;ReplaceRunClass(word_doc, nsmgr, content_control, name, (string)nav.Value);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;XmlNodeList rows = content_control.SelectNodes(&quot;descendant::w:tbl/w:tr[descendant::w:sdt]&quot;, nsmgr);&#13;&#10;&#9;&#9;if (rows.Count &gt; 0)&#13;&#10;&#9;&#9;{&#9;&#13;&#10;&#9;&#9;&#9;FillTable(word_doc, nsmgr, content_control, rows, (XPathNavigator)values);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;//search if ia column control is found; if so repeat the whole content for each row&#13;&#10;&#9;&#9;&#9;SearchRowsInStdBlockContent(word_doc, nsmgr, content_control, (XPathNavigator)values);&#9;&#9;&#9;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;private void FillTable(XmlDocument word_doc,  XmlNamespaceManager nsmgr, XmlNode content_control, XmlNodeList rows, XPathNavigator xmldoc)&#13;&#10;&#9;{&#13;&#10;&#9;&#9;XmlNode table = rows[0].ParentNode;&#13;&#10;&#9;&#9;XPathNavigator root = xmldoc.SelectSingleNode(&quot;/*&quot;);&#13;&#10;&#9;&#9;XPathNodeIterator table_rows = null;&#13;&#10;&#9;&#9;bool isxmlsqlexport = false;&#13;&#10;&#9;&#9;bool isxmlexport = false;&#13;&#10;&#9;&#9;switch(root.Name)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;case &quot;SQLXMLExport&quot;: &#13;&#10;&#9;&#9;&#9;&#9;table_rows = xmldoc.Select(&quot;*/Rows/Row&quot;);&#13;&#10;&#9;&#9;&#9;&#9;isxmlsqlexport = true;&#13;&#10;&#9;&#9;&#9;break;&#13;&#10;&#9;&#9;&#9;case &quot;Row&quot;:&#13;&#10;&#9;&#9;&#9;&#9;table_rows = xmldoc.Select(&quot;Row&quot;);&#13;&#10;&#9;&#9;&#9;break;&#13;&#10;&#9;&#9;&#9;default: &#13;&#10;&#9;&#9;&#9;&#9;table_rows = xmldoc.Select(&quot;*/*&quot;);&#13;&#10;&#9;&#9;&#9;&#9;isxmlexport = true;&#13;&#10;&#9;&#9;&#9;&#9;break;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;while (table_rows.MoveNext())&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;XmlNode template_row = rows[0].CloneNode(true);&#13;&#10;&#9;&#9;&#9;XPathNodeIterator xml_data_fields = isxmlsqlexport ?  table_rows.Current.Select(&quot;Field&quot;) : table_rows.Current.Select(&quot;* | @*&quot;);&#13;&#10;&#9;&#9;&#9;while (xml_data_fields.MoveNext())&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;if(isxmlsqlexport)&#13;&#10;&#9;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;&#9;FillControlData(word_doc, nsmgr, template_row, xml_data_fields.Current.GetAttribute(&quot;alias&quot;, string.Empty), xml_data_fields.Current); &#13;&#10;&#9;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;&#9;FillControlData(word_doc, nsmgr, template_row, xml_data_fields.Current.Name, xml_data_fields.Current); &#13;&#10;&#9;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;rows[0].ParentNode.AppendChild(template_row);&#13;&#10;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;// Remove the prototype row and add all of the newly constructed rows.&#13;&#10;&#9;&#9;rows[0].ParentNode.RemoveChild(rows[0]);&#13;&#10;&#13;&#10;&#9;&#9;// Remove the content control for the table and replace it with its contents.&#13;&#10;&#9;&#9;XmlNodeList contents = content_control.SelectNodes(&quot;w:sdtContent&quot;, nsmgr);&#13;&#10;&#9;&#9;if (contents.Count == 0)&#13;&#10;&#9;&#9;&#9;return;&#13;&#10;&#13;&#10;&#9;&#9;XmlNodeList content_items = contents[0].ChildNodes;&#13;&#10;&#9;&#9;ArrayList childrenList = new ArrayList();&#13;&#10;&#13;&#10;&#9;&#9;foreach (XmlNode child in content_items)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;childrenList.Add(child);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;foreach(XmlNode child in childrenList)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;content_control.ParentNode.InsertBefore(child, content_control);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;content_control.ParentNode.RemoveChild(content_control);&#13;&#10;&#9;&#9;XmlNodeList sdts = table.SelectNodes(&quot;descendant::w:sdt&quot;, nsmgr);&#13;&#10;&#9;&#9;foreach (XmlNode s in sdts)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;s.ParentNode.RemoveChild(s);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;}&#13;&#10;&#9;private void SearchRowsInStdBlockContent(XmlDocument word_doc, XmlNamespaceManager nsmgr, XmlNode content_control, XPathNavigator xmldoc)&#13;&#10;&#9;{&#13;&#10;&#9;&#9;XmlNodeList rows = content_control.SelectNodes(&quot;descendant::w:sdt&quot;, nsmgr);&#13;&#10;&#9;&#9;if (rows.Count == 0)&#13;&#10;&#9;&#9;&#9;return;&#13;&#10;&#13;&#10;&#9;&#9;XmlNodeList contents = content_control.SelectNodes(&quot;w:sdtContent&quot;, nsmgr);&#13;&#10;&#9;&#9;if (contents.Count == 0)&#13;&#10;&#9;&#9;&#9;&#9;return;&#13;&#10;&#13;&#10;&#9;&#9;XPathNodeIterator table_rows = xmldoc.Select(&quot;Row&quot;);&#13;&#10;&#9;&#9;while (table_rows.MoveNext())&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;XmlNode template_row = contents[0].CloneNode(true);&#13;&#10;&#9;&#9;&#9;XPathNodeIterator table_fields = table_rows.Current.Select(&quot;*&quot;);&#13;&#10;&#9;&#9;&#9;while (table_fields.MoveNext())&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;FillControlData(word_doc, nsmgr, template_row, table_fields.Current.Name, table_fields.Current);&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;XmlNodeList content = template_row.ChildNodes;&#13;&#10;&#9;&#9;&#9;while (content.Count &gt; 0)&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;rows[0].ParentNode.InsertBefore(content[0], rows[0]);&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;}&#13;&#10;&#13;&#10;&#9;&#9;// Remove the prototype row and add all of the newly constructed rows.&#13;&#10;&#9;&#9;rows[0].ParentNode.RemoveChild(rows[0]);&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;private void ReplaceRunClass(XmlDocument word_doc, XmlNamespaceManager nsmgr, XmlNode content_control,  string name, string text)&#13;&#10;&#9;{&#13;&#10;&#9;&#9;// Replace the run (Phonetic Guide Text Run, w:r, Run Class) in the structured data type with the new value.&#13;&#10;&#9;&#9;XmlNodeList run = content_control.SelectNodes(&quot;w:sdtContent//w:r&quot;, nsmgr);&#13;&#10;&#9;&#9;if (run.Count == 0)&#13;&#10;&#9;&#9;&#9;return;&#13;&#10;&#13;&#10;&#9;&#9;XmlNodeList datenodes = content_control.SelectNodes(&quot;descendant::w:date&quot;, nsmgr);&#13;&#10;&#9;&#9;bool isdate = datenodes.Count &gt; 0;&#13;&#10;&#9;&#9;string dateformat = &quot;yyyy-MM-dd'T'HH:mm:ss&quot;;&#13;&#10;&#9;&#9;DateTime dt = DateTime.Now;&#13;&#10;&#9;&#9;if(isdate)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;if(!DateTime.TryParseExact(text, &#13;&#10;&#9;&#9;&#9;&#9;m_formats,&#13;&#10;&#9;&#9;&#9;&#9;CultureInfo.InvariantCulture, &#13;&#10;&#9;&#9;&#9;&#9;DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal, &#13;&#10;&#9;&#9;&#9;&#9;out dt)&#13;&#10;&#9;&#9;&#9;)&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;isdate = false;&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;if(isdate)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;XmlNode dateformatnode = content_control.SelectSingleNode(&quot;descendant::w:date/w:dateFormat/@w:val&quot;, nsmgr);&#13;&#10;&#9;&#9;&#9;if(dateformatnode != null)&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;dateformat = dateformatnode.Value;&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;//get run properties&#13;&#10;&#9;&#9;XmlNodeList runProperties = run[0].SelectNodes(&quot;w:rPr&quot;, nsmgr);&#13;&#10;&#13;&#10;&#9;&#9;XmlNode p = run[0].ParentNode;&#13;&#10;&#9;&#9;RemoveChildNodes(p);&#13;&#10;&#9;&#9;XmlNode r = word_doc.CreateElement(&quot;w:r&quot;, m_ro_word_ns);&#13;&#10;&#9;&#9;if(!isdate)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;r.InnerXml = &quot;&lt;w:t xmlns:w=\&quot;&quot; + m_ro_word_ns + &quot;\&quot;&gt;&quot; + text.Replace(&quot;\r\n&quot;, &quot;&lt;/w:t&gt;&lt;w:br xmlns:w=\&quot;&quot; + m_ro_word_ns + &quot;\&quot;/&gt;&lt;w:t xmlns:w=\&quot;&quot; + m_ro_word_ns + &quot;\&quot;&gt;&quot;) + &quot;&lt;/w:t&gt;&quot;;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;r.InnerXml = &quot;&lt;w:t xmlns:w=\&quot;&quot; + m_ro_word_ns + &quot;\&quot;&gt;&quot; + dt.ToString(dateformat) + &quot;&lt;/w:t&gt;&quot;;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;if (runProperties.Count &gt; 0)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;r.InsertBefore(runProperties[0], r.FirstChild);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;p.AppendChild(r);&#13;&#10;&#13;&#10;&#9;&#9;XmlNodeList contents = content_control.SelectNodes(&quot;w:sdtContent&quot;, nsmgr);&#13;&#10;&#9;&#9;if (contents.Count == 0)&#13;&#10;&#9;&#9;&#9;return;&#13;&#10;&#13;&#10;&#9;&#9;content_control.ParentNode.ReplaceChild(contents[0].FirstChild, content_control);&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;private void RemoveChildNodes(XmlNode node)&#13;&#10;&#9;{ &#13;&#10;&#9;&#9;ArrayList childrenList = new ArrayList();&#13;&#10;&#9;&#9;foreach(XmlNode child in node.ChildNodes)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;childrenList.Add(child);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;foreach (XmlNode child in childrenList)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;child.ParentNode.RemoveChild(child);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;}&#13;&#10;&#9;private Stream GetDocumentStream(Stream report_stream, bool ro)&#13;&#10;&#9;{&#13;&#10;&#9;&#9;Package pckg = ro ? &#13;&#10;&#9;&#9;&#9;Package.Open(report_stream, FileMode.Open, FileAccess.Read) :&#13;&#10;&#9;&#9;&#9;Package.Open(report_stream, FileMode.Open, FileAccess.ReadWrite);&#13;&#10;&#9;&#9;//  Get the main document part (document.xml)&#13;&#10;&#9;&#9;foreach (System.IO.Packaging.PackageRelationship relationship in pckg.GetRelationshipsByType(m_ro_document_relationship_type))&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;PackagePart documentPart = pckg.GetPart(PackUriHelper.ResolvePartUri(new Uri(&quot;/&quot;, UriKind.Relative), relationship.TargetUri));&#13;&#10;&#9;&#9;&#9;return documentPart.GetStream(); //There should only be one document part in the package. &#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;throw new Exception(&quot;The document.xml part was not found&quot;);&#13;&#10;&#9;}&#13;&#10;&#9;private XmlDocument CreateXmlDocumentFromStream(Stream s)&#13;&#10;&#9;{&#13;&#10;&#9;&#9;XmlDocument xmldoc = new XmlDocument();&#13;&#10;&#9;&#9;xmldoc.Load(s);&#13;&#10;&#9;&#9;return xmldoc;&#13;&#10;&#9;}&#13;&#10;&#9;public bool FileIsOpen(string path)&#13;&#10;&#9;{&#13;&#10;&#9;&#9;if(!File.Exists(path))&#9;&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;return false;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;System.IO.FileStream a = null;&#13;&#10;&#9;&#9;try&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;a = System.IO.File.Open(path,&#13;&#10;&#9;&#9;&#9;System.IO.FileMode.Open, System.IO.FileAccess.Read, System.IO.FileShare.None);&#13;&#10;&#9;&#9;&#9;return false;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;catch (System.IO.IOException ex)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;return true;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;finally&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;if (a != null)&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;a.Close();&#13;&#10;&#9;&#9;&#9;&#9;a.Dispose();&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;}&#13;&#10;&#9;}&#13;&#10;}" DOTNET_ACTIVE="Y" LANGUAGE="C#" ORIGIN="" APP_DOMAIN="Default"/>
</DotNet_Components>
<Methods documentName="Methods">
<T_RDMI_METHOD COMPONENT_NAME="OTS_WORD_LETTER" METHOD_NAME="CONTROLINFO" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="ControlInfo" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_METHOD COMPONENT_NAME="OTS_WORD_LETTER" METHOD_NAME="FILEISOPEN" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="FileIsOpen" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_METHOD COMPONENT_NAME="OTS_WORD_LETTER" METHOD_NAME="OTS_WORD_LETTER" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="OTS_WORD_LETTER" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_METHOD COMPONENT_NAME="OTS_WORD_LETTER" METHOD_NAME="RUN" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="Run" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
</Methods>
<Parameters documentName="Parameters">
<T_RDMI_PARAMETER COMPONENT_NAME="OTS_WORD_LETTER" PARAMETER_SEQNO="0" METHOD_NAME="CONTROLINFO" METHOD_SEQNO="1" PARAMETER_NAME="Return_From_ControlInfo" KIND="RETURN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="OTS_WORD_LETTER" PARAMETER_SEQNO="0" METHOD_NAME="FILEISOPEN" METHOD_SEQNO="1" PARAMETER_NAME="Return_From_FileIsOpen" KIND="RETURN" PRIMITIVE_DATA_TYPE="BOOLEAN" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="OTS_WORD_LETTER" PARAMETER_SEQNO="0" METHOD_NAME="RUN" METHOD_SEQNO="1" PARAMETER_NAME="Return_From_Run" KIND="RETURN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="OTS_WORD_LETTER" PARAMETER_SEQNO="1" METHOD_NAME="CONTROLINFO" METHOD_SEQNO="1" PARAMETER_NAME="template_filepath" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="OTS_WORD_LETTER" PARAMETER_SEQNO="1" METHOD_NAME="FILEISOPEN" METHOD_SEQNO="1" PARAMETER_NAME="path" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="OTS_WORD_LETTER" PARAMETER_SEQNO="1" METHOD_NAME="RUN" METHOD_SEQNO="1" PARAMETER_NAME="template_filepath" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="OTS_WORD_LETTER" PARAMETER_SEQNO="2" METHOD_NAME="RUN" METHOD_SEQNO="1" PARAMETER_NAME="report_filepath" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="OTS_WORD_LETTER" PARAMETER_SEQNO="3" METHOD_NAME="RUN" METHOD_SEQNO="1" PARAMETER_NAME="args" KIND="INLIST" PRIMITIVE_DATA_TYPE="VARIABLE" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
</Parameters>
<Stateful_Components documentName="Stateful Components">
<T_RDMI_STATEFUL_COMPONENT COMPONENT_NAME="OTS_WORD_LETTER" DESCRIPTION="This component provides a way to automatically generate word letter/reports in Microsoft Word format.&#13;&#10;It does so by copying a Microsoft Word document template and then replacing all data fields in that copy by content from data passed to this component.&#13;&#10;The expected  template format is the Microsoft docx format.&#13;&#10;A Microsoft Word installation is NOT needed on the computer where this component is run, as the component uses the Office Open XML file format for generating a result document.&#13;&#10;&#13;&#10;The Microsoft Word document template must contain placeholders, so called Controls, where  information from the data model will be represented in the final result document.&#13;&#10;How to create such a document is described below. A sample Microsoft Word template is also available and used in the given examples.&#13;&#10;&#13;&#10;The component offers two methods:&#13;&#10;&#9;-1- A method ControlInfo(templatefilepath)  that will show the available Controls in the template.&#13;&#10;&#9;&#9;This serves to do a sanity check: are the Controls you want to fill present in the template?&#13;&#10;&#9;&#9;In the Application/SqlCommand window you can try this on the sample template, execute:&#13;&#10;&#9;&#9;&#9;select OTS_WORD_LETTER.ControlInfo(  RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_Sample_WordReport.docx'  );&#13;&#10;&#9;&#9;The thought behind this method can be developed further  to automatically categorize and maintain the set of templates in an organization.&#13;&#10;&#9;-2- A method Run(templatefilepath, resultfilepath, [parameters, ...]) that will produce the result document from the template and data passed.&#13;&#10;&#9;&#9;In the application/SqlCommand window you can try:&#13;&#10;&#9;&#9;&#9;invoke OTS_WORD_LETTER.RUN with select &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_Sample_WordReport.docx', &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || 'Result.docx',&#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_Sample_Xml.xml'&#13;&#10;&#9;&#9;The Run method produces the location of the result document that can be opened with Microsoft Word to see the result document.&#13;&#10;&#9;&#9;This example fills data from an xml document into the copy of the template document.&#13;&#10;&#13;&#10;The Run method has a number of ways to pass data for the Controls. &#13;&#10;&#9;-a- Passing a single filepath argument with a propriety xml format that contains the data. Inspect the example above. It contains plain values and a table.&#13;&#10;&#9;-b- Passing name - value pairs as data for Controls. &#13;&#10;&#9;&#9;Try for example:&#13;&#10;&#9;&#9;&#9;invoke OTS_WORD_LETTER.RUN with select &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_Sample_WordReport.docx', &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || 'Result.docx',&#13;&#10;&#9;&#9;&#9;&#9;'PAS_NUMBER', 'AX123',&#13;&#10;&#9;&#9;&#9;&#9;'NAME', user&#13;&#10;&#9;&#9;In this example, the result document has PAS_NUMBER and NAME resolved but the other Controls are not filled.&#13;&#10;&#9;-c- Passing name - xml pairs as data  for Controls. This allows filling in table Controls.&#13;&#10;&#9;&#9;Try for example:&#13;&#10;&#9;&#9;&#9;invoke OTS_WORD_LETTER.RUN with select &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_Sample_WordReport.docx', &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || 'Result.docx',&#13;&#10;&#9;&#9;&#9;&#9;'PAS_NUMBER', 'AX123',&#13;&#10;&#9;&#9;&#9;&#9;'NAME', user,&#13;&#10;&#9;&#9;&#9;&#9;'BOOK_TABLE',&#13;&#10;&#9;&#9;&#9;&#9;&#9;'&lt;Books&gt;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Book NAME=&quot;My life as a developer&quot; AUTHOR=&quot;Dilbert&quot; DUE_DATE=&quot;01-JAN-2020&quot;&gt;&lt;/Book&gt;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&lt;Book NAME=&quot;Why Nations Fail&quot; AUTHOR=&quot;James A. Robinson &quot; DUE_DATE=&quot;17-FEB-2020&quot;&gt;&lt;/Book&gt;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&lt;/Books&gt;'&#13;&#10;&#9;&#9;Now also the books on loan table has data in the result.&#13;&#10;&#9;&#9;Note that you could have used data from your data model in the call by taking column values for the plain values and xml.[sql]export result for the Controls that show table data.&#13;&#10;&#13;&#10;Before showing some examples that use data from your data model, first a few words on how to create a template document with Controls.&#13;&#10;&#13;&#10;A template document can be any Word document stored in docx format. You will have to add Controls to that document that will act as placeholders for the data.&#13;&#10;&#9;-1- Create a word template document that contains the desired layout, fixed text, images etc.&#13;&#10;&#9;-2- If the menu bar in Microsoft Word does NOT show a &quot;Developer&quot; menu, you will have to activate the Developer menu first.&#13;&#10;&#9;&#9;Depending on the version of Microsoft Word you would activate this by opening the File menu, Options. Then click &quot;Customize Ribbon&quot;. &#13;&#10;&#9;&#9;Choose &quot;Main Tabs&quot; from the &quot;Customize the Ribbon&quot; dropdown. Make sure [v]Developer is marked active.&#13;&#10;&#9;-3- How to add a Control in your Microsoft Word template to hold a plain value:&#13;&#10;&#9;&#9;Choose &quot;Developer&quot; from the main menu.&#13;&#10;&#9;&#9;Click &quot;Design Mode&quot;&#13;&#10;&#9;&#9;Click in the document at the position you want the Control.&#13;&#10;&#9;&#9;Click the Plain Text Control (or the Rich text Control) symbol (symbol Aa left from &quot;Design Mode)&quot;&#13;&#10;&#9;&#9;&#9;Now you will see the Control in the document. &#13;&#10;&#9;&#9;Click &quot;Properties&quot; (just under &quot;Design Mode&quot;)&#13;&#10;&#9;&#9;&#9;In the Tag field, fill the name that you will use when passing data, e.g. MYFIELD&#13;&#10;&#9;&#9;Save the template and, in the application, invoke the Run method for this template. Specify a value for MYFIELD.&#13;&#10;&#9;&#9;&#9;Assuming you added the MYFIELD text Control to the example template, see a result by executing:&#13;&#10;&#9;&#9;&#9;invoke OTS_WORD_LETTER.RUN with select &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_Sample_WordReport.docx', &#13;&#10;&#9;&#9;&#9;&#9;RulesEngine.Getproperty('TEMPDIR') || 'Result.docx',&#13;&#10;&#9;&#9;&#9;&#9;'MYFILED', 'Hello Controls'&#13;&#10;&#9;&#9;&#9;Use the ControlInfo method (as shown before) to see the MYFIELD control is indeed available.&#13;&#10;&#9;&#9;&#9;Note that currently no rtf (rich text format) data is supported in the component.&#13;&#10;&#9;-4- To add repeated content (table data)&#13;&#10;&#9;&#9;-add a rich text content control&#13;&#10;&#9;&#9;-set the Tag property of this control to the same value as the NAME attribute in the xml document&#13;&#10;&#9;&#9;-add a table inside the control with one row, &#13;&#10;&#9;&#9;&#9;-in that row add new (rich text) content control for each field.&#13;&#10;&#9;-5- The other Microsoft Word controls are not implemented except the Date Picker Control.&#13;&#10;&#9;&#9;For the Date Picker Control, the component will try to parse the data as DateTime and format the DateTime according to the format specified for the Date Picker Control. The advanced example below uses the Date Picker control.&#13;&#10;&#9;&#9;&#13;&#10;The following advanced examples assume that you are working with the USoft Travel Agency example (a course material example).&#13;&#10;Note that you can copy the templates to your own (template) directory to avoid the paths to the USoft OffTheShelf directory in the examples.&#13;&#10;That also allows you to experiment and change the templates while keeping the original.&#13;&#10;Of course you can change the SQL used in the example (and/or the template) to match your own USoft data model.&#13;&#10;&#13;&#10;To find the Controls in the OTS_TravelTemplate.docx example, execute::&#13;&#10;&#9;select OTS_WORD_LETTER.ControlInfo( RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_TravelTemplate.docx'  );&#13;&#10;Assuming you copied OTS_TravelTemplate.docx to c:\temp that would be:&#13;&#10;&#9;select OTS_WORD_LETTER.ControlInfo(  'c:\temp\OTS_TravelTemplate.docx'  );&#13;&#10;&#9;&#13;&#10;Now the idea is to fill the available Controls as follows:&#13;&#10;&#9;-1- a list of reservations in a Control with tag &quot;ALL_RESERVATIONS&quot;&#13;&#10;&#9;&#9;Note: you will need to import the OTS_STRING Off The Shelf component too for this example. It contains an record aggregate used for the data passed to ALL_RESERVATIONS&#13;&#10;&#9;-2- to fill a Control with tag name &quot;GENDER&quot; using a SQL DECODE statement&#13;&#10;&#9;-3- to fill a Control with tag name NAME using a concatenation&#13;&#10;&#9;-4- to fill a Control RESERVATIONS_TABLE from an xml.sqlexport&#13;&#10;&#13;&#10;To produce the result document:&#13;&#10;&#13;&#10;invoke OTS_WORD_LETTER.RUN with select &#13;&#10;&#9;RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_TravelTemplate.docx',&#13;&#10;&#9;'c:\temp\Reservation' || p.person_id || '.docx',&#13;&#10;&#9;'ALL_RESERVATIONS',&#13;&#10;&#9;( invoke OTS_STRING.RecordConcat with select '', ',', res_id from reservations rr, tour ss relate p MAKES rr, ss &quot;FOR WHICH IS MADE&quot; rr),&#13;&#10;&#9;'GENDER', decode(p.GENDER, 'M', 'Mr', 'F', 'Ms', ''),&#13;&#10;&#9;'NAME',  p.FIRST_NAME || ' ' || p.FAMILY_NAME,&#13;&#10;&#9;'RESERVATIONS_TABLE', &#13;&#10;&#9;(&#13;&#10;&#9;&#9;invoke xml.sqlexport with select&#13;&#10;&#9;&#9;&#9;r.RES_ID,&#13;&#10;&#9;&#9;&#9;s.TOUR_TYPE, s.DESTINATION,&#13;&#10;&#9;&#9;&#9;s.START_DATE, s.RETURN_DATE&#9;&#9;&#13;&#10;&#9;&#9;from&#13;&#10;&#9;&#9;&#9;reservation r, tour s&#13;&#10;&#9;&#9;relate&#13;&#10;&#9;&#9;&#9;p MAKES r, s &quot;FOR WHICH IS MADE&quot; r&#13;&#10;&#9;)&#13;&#10;FROM&#13;&#10;&#9;PERSON p&#13;&#10;WHERE exists &#13;&#10;(&#13;&#10;&#9;select &#13;&#10;&#9;&#9;'has reservation' &#13;&#10;&#9;from&#13;&#10;&#9;&#9;reservations rrr, tour sss &#13;&#10;&#9;relate&#13;&#10;        p MAKES rrr, sss &quot;FOR WHICH IS MADE&quot; rrr&#13;&#10;)&#13;&#10;AND&#13;&#10;&#9;p.person_id = 1&#13;&#10;&#13;&#10;If you omit the condition &quot;AND p.person_id=1&quot; you will see that all documents for each person with reservations are produced instantly and fast.&#13;&#10;&#13;&#10;You could use this SQL (without the limitation on person_id) in a logical view to let it produce documents on demand.&#13;&#10;Make a logical view with name e.g. RESERVATION_REPORT and SQL:&#13;&#10;SELECT&#13;&#10;&#9;p.PERSON_ID,&#13;&#10;&#9;OTS_WORD_LETTER.RUN&#13;&#10;&#9;(&#13;&#10;       RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_TravelTemplate.docx',&#13;&#10;       'c:\temp\Reservation' || p.PERSON_ID || '.docx',&#13;&#10;       'ALL_RESERVATIONS',&#13;&#10;       ( invoke OTS_STRING.RecordConcat with select '', ', ', res_id from reservations rr, tour ss relate p MAKES rr, ss &quot;FOR WHICH IS MADE&quot; rr),&#13;&#10;       'GENDER', decode(p.GENDER, 'M', 'Mr.', 'F', 'Ms.', ''),&#13;&#10;       'NAME',  p.FIRST_NAME || ' ' || p.FAMILY_NAME,&#13;&#10;       'RESERVATIONS_TABLE', &#13;&#10;       (&#13;&#10;             invoke xml.sqlexport with select&#13;&#10;                    r.RES_ID,&#13;&#10;                    s.TOUR_TYPE, s.DESTINATION,&#13;&#10;                    s.START_DATE, s.RETURN_DATE             &#13;&#10;             from&#13;&#10;                    reservation r, tour s&#13;&#10;             relate&#13;&#10;                    p MAKES r, s &quot;FOR WHICH IS MADE&quot; r&#13;&#10;       )&#13;&#10;&#9;) &quot;FILEPATH&quot;&#13;&#10;FROM&#13;&#10;       PERSON p&#13;&#10;WHERE exists &#13;&#10;(&#13;&#10;&#9;select &#13;&#10;&#9;&#9;'has reservation' &#13;&#10;&#9;from&#13;&#10;&#9;&#9;reservations rrr, tour sss &#13;&#10;&#9;relate&#13;&#10;        p MAKES rrr, sss &quot;FOR WHICH IS MADE&quot; rrr&#13;&#10;)&#13;&#10;Try this logical view in the application by querying a person that has reservations (a reservation report will be generated), querying a person with no reservations and finally querying all (all reports will be generated).&#13;&#10;As a final example that passes all data via a propriety xml format (as opposed to passing name - vale/xml.[sql]export pairs), try in the Application/SqlCommand this call with inline data:&#13;&#10;&#13;&#10;invoke OTS_WORD_LETTER.RUN with select &#13;&#10;&#9;RulesEngine.Getproperty('TEMPDIR') || '.OffTheShelfs\OTS_WORD_LETTER\OTS_Sample_WordReport.docx', &#13;&#10;&#9;'c:\temp\Result.docx',&#13;&#10;&#9;'&lt;Report&gt;&#13;&#10;&#9;&lt;PAS_NUMBER&gt;000&lt;/PAS_NUMBER&gt;&#13;&#10;&#9;&lt;GENDER&gt;Mr.&lt;/GENDER&gt;&#13;&#10;&#9;&lt;NAME&gt;Whoever&lt;/NAME&gt;&#13;&#10;&#9;&lt;Table NAME=&quot;BOOK_TABLE&quot;&gt;&#13;&#10;&#9;&#9;&lt;Row&gt;&#13;&#10;&#9;&#9;&#9;&lt;NAME&gt;&lt;![CDATA[Harry Potter and the Philosopher''s Stone]]&gt;&lt;/NAME&gt;&#13;&#10;&#9;&#9;&#9;&lt;AUTHOR&gt;&lt;![CDATA[J. K. Rowling]]&gt;&lt;/AUTHOR&gt;&#13;&#10;&#9;&#9;&#9;&lt;DUE_DATE&gt;01-JAN-2020&lt;/DUE_DATE&gt;&#13;&#10;&#9;&#9;&lt;/Row&gt;&#13;&#10;&#9;&#9;&lt;Row&gt;&#13;&#10;&#9;&#9;&#9;&lt;NAME&gt;&lt;![CDATA[Harry Potter and the Chamber of Secrets]]&gt;&lt;/NAME&gt;&#13;&#10;&#9;&#9;&#9;&lt;AUTHOR&gt;&lt;![CDATA[J. K. Rowling]]&gt;&lt;/AUTHOR&gt;&#13;&#10;&#9;&#9;&#9;&lt;DUE_DATE&gt;01-MAR-2020&lt;/DUE_DATE&gt;&#13;&#10;&#9;&#9;&lt;/Row&gt;&#9;&#13;&#10;&#9;&lt;/Table&gt;&#13;&#10;&lt;/Report&gt;'" T_RDMI_AUTOMATION_SERVER="N" T_RDMI_JAVA_COMPONENT="N" T_RDMI_STATEFUL_COMPONENT="Y" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" T_RDMI_WEB_SERVICE_COMPONENT="N" T_RDMI_DOTNET_COMPONENT="Y" T_RDMI_COMPONENT_CONSTRUCTOR="Y" LIFETIME="SESSION" TRANSACTIONAL="N" SUPPORTS_COMMIT="N" SUPPORTS_ROLLBACK="N" SUPPORTS_PRECOMMIT="N" SUPPORTS_TABLECOMPONENT="N" SUPPORTS_UPDATE="N" SUPPORTS_INSERT="N" SUPPORTS_DELETE="N" SUPPORTS_CONDITIONS="N" SUPPORTS_ROWSETSIZEHINT="N"/>
</Stateful_Components>
</MultiImport>
