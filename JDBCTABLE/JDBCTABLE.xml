<?xml version="1.0" encoding="UTF-8"?>
<?usoft-xml version="1.0" action="multi-tables-import"?><MultiImport>
<Columns documentName="Columns">
<T_COLUMN TABLE_NAME="JDBCTABLE" COLUMN_NAME="PROPERTYKEY" DOMAIN_NAME="RDMI_STRING" PROMPT="" KEYORDER="1" MANDATORY="Y" INPUT_ALLOWED="Y" UPDATABLE="N" QUERY_ALLOWED="Y" COLUMN_TYPE="D" DISPLAYED="Y" DEF_VALUE="" SEQNO="1" LOFSEQNO="" PERC_FULL="" PERC_NULL="0" HELP_TEXT="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" UNDER_VC="Y"/>
<T_COLUMN TABLE_NAME="JDBCTABLE" COLUMN_NAME="PROPERTYVALUE" DOMAIN_NAME="RDMI_STRING" PROMPT="" KEYORDER="N" MANDATORY="N" INPUT_ALLOWED="Y" UPDATABLE="Y" QUERY_ALLOWED="Y" COLUMN_TYPE="D" DISPLAYED="Y" DEF_VALUE="" SEQNO="2" LOFSEQNO="" PERC_FULL="" PERC_NULL="50" HELP_TEXT="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" UNDER_VC="Y"/>
</Columns>
<Component_Constructors documentName="Component Constructors">
<T_RDMI_COMPONENT_CONSTRUCTOR COMPONENT_NAME="JDBCTABLE" DESCRIPTION="You can use the JDBCTable component to connect to an external data source using JDBC. The JDBCTable component represents a remote table from a data source that can be accessed from a JDBC connection. This remote table is specified by the field names of primary key columns and other columns in the Constructor SQL. A connection string specifies the remote JDBC data source.    &#10;&#10;By default the JDBCTable component uses the USoft JDBC Driver for the Rules Service. If you want to specify another driver, you can load it by adding the 'Class.forName' method to the physical method of the JDBCTABLE constructor.    &#10;For example, to load the sun JdbcOdbc driver, add:    &#10; java.lang.Class.forName(&quot;sun.jdbc.odbc.JdbcOdbcDriver&quot;)    &#10;&#10;If you want to connect to an ODBC Data Source, the physical method of the JDBCTABLE method must look like this:    &#10;java.lang.Class.forName(&quot;sun.jdbc.odbc.JdbcOdbcDriver&quot;)    &#10;this = new com.usoft.connectors.JdbcTable(:3, :4, :5)      &#10;this.setConnection(:0, :1, :2)    &#10;&#10;with parameters:     &#10;0 connection string    &#10;1 account name    &#10;2 account password    &#10;3 table name    &#10;4 column name list ( ; as separator)    &#10;5 key list ( ; as separator)    &#10;&#10;In the default setting, separate USoft applications use the JDBCTable component together with the USoft Rules Service to exchange data. In this case, one USoft application uses a JDBCTable component that connects to another USoft application running as a Rules Service.    &#10;     &#10;In the constructor SQL you must specify the connection string, the account name and password, the table name, all column names and the primary column names of the table. With this information, the component behaves as an RDBMS table that accepts SELECTS, INSERTS, and UPDATES, but these requests are handled by the JDBC data source. The current (example) JDBCTABLE component table contains two columns.    &#10;&#10;For example, a typical constructor SQL looks like this:    &#10;select     &#10;'&lt;connection string&gt;',   (e.g. 'jdbc:odbc:mydb?)    &#10;'&lt;account name&gt;',   (e.g. 'user')    &#10;'&lt;account password&gt;',  (e.g. 'pwd')    &#10;'&lt;table name&gt;',   (e.g. 'myTableName')    &#10;'&lt;colum name list&gt;',    (e.g. 'myPrimaryKey;myColumnName')     &#10;'&lt;key list&gt;'    (e.g. 'myPrimaryKey')    &#10;&#10;After you have configured the constructor SQL, don't forget to check the constructor SQL on the 'State' tabpage and save the changes.  &#10;&#10;Be aware that your  '&lt;colum name list&gt;' specified above must be equivalent with the columns definitions of your component table.&#10;(Default it only contains two columns) You must set these columns by hand.&#10;&#10;EXAMPLES     &#10;1 Connection String examples:    &#10;- If you want to connect to the USoft RulesService you use the connection string given by the configuration of the Rules Service: 'jdbc:jrec:&lt;application&gt;@&lt;host&gt;:7777'.    &#10;- If you want to connect to an ODBC data source, first load the JDBC-ODBC driver as described above, then specify the connection string. URLs for this protocol are of the form:     &#10; jdbc:odbc:&lt;data-source-name&gt;[;&lt;attribute-name&gt;=&lt;attribute-value&gt;]    &#10; For example:     &#10;     jdbc:odbc:sybase    &#10;     jdbc:odbc:mydb;UID=me;PWD=secret    &#10;     jdbc:odbc:ora123;Cachesize=300    &#10;The column name list must be a string separated by semi-column (?;?), e.g.: ?ID;USERNAME;ADDRESS?    &#10;The primary key list must list all primary key column names, also separated by a semi-column, e.g.: ?ID1;ID2?    &#10;&#10;2 Connecting to an Oracle 10 database.     &#10;You can also use the JDBCTable component to connect to a remote table in an Oracle 10 database:     &#10;(1)  Add a reference to the classes12.zip file in the Classpath environment variable of your  computer, or in your current classpath. With a default Oracle 10 installation, the path is:    &#10;c:\oracle\product\10.2.0\db_2\jdbc\lib\classes12.zip     &#10;(2) Change the physical method of the JDBCTABLE Constructor method to:    &#10;java.lang.Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;)     &#10;this = new com.usoft.connectors.JdbcTable(:3, :4, :5)    this.setConnection(&quot;jdbc:oracle:thin:@&lt;host&gt;:&lt;port&gt;:&lt;SID&gt;&quot; , :1, :2)    &#10;If you have defined an alias for this connection, you can also specify: this.setConnection(&quot;jdbc:oracle:oci:@&lt;alias&gt;&quot; ,:1, :2)   &#10;&#10;Notes:   &#10;1) The date format of the JdbcTable component can be set in the constructor. Check the constructor description.  &#10;2) This import has example setting to connect to a USoft service. It reads a table named PROPERTIES in the (remote) USoft application.&#10;3) The JdbcTable has a timeout set per default to 20 seconds. If you want to change it, add in the JDBCTABLE method, the setTimeout() physical method: e.g. this.setTimeout('30')" T_RDMI_AUTOMATION_SERVER="N" T_RDMI_JAVA_COMPONENT="Y" T_RDMI_STATEFUL_COMPONENT="Y" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" T_RDMI_WEB_SERVICE_COMPONENT="N" T_RDMI_DOTNET_COMPONENT="N" T_RDMI_COMPONENT_CONSTRUCTOR="Y" CONSTRUCTOR_SQL="select     &#10;'&lt;Connection String&gt;',   (e.g. 'jdbc:odbc:mydb?)    &#10;'&lt;Account Name&gt;',   (e.g. 'user')    &#10;'&lt;Account Password&gt;',  (e.g. 'pwd')    &#10;'&lt;Table Name&gt;',   (e.g. 'myTableName')    &#10;'&lt;Column Name List&gt;',  (e.g. 'myPrimaryKey;myColumnName')     &#10;'&lt;Primary Key Column List &gt;'   (e.g. 'myPrimaryKey')" ACTIVE="Y"/>
</Component_Constructors>
<Components documentName="Components">
<T_RDMI_COMPONENT COMPONENT_NAME="JDBCTABLE" DESCRIPTION="You can use the JDBCTable component to connect to an external data source using JDBC. The JDBCTable component represents a remote table from a data source that can be accessed from a JDBC connection. This remote table is specified by the field names of primary key columns and other columns in the Constructor SQL. A connection string specifies the remote JDBC data source.    &#10;&#10;By default the JDBCTable component uses the USoft JDBC Driver for the Rules Service. If you want to specify another driver, you can load it by adding the 'Class.forName' method to the physical method of the JDBCTABLE constructor.    &#10;For example, to load the sun JdbcOdbc driver, add:    &#10; java.lang.Class.forName(&quot;sun.jdbc.odbc.JdbcOdbcDriver&quot;)    &#10;&#10;If you want to connect to an ODBC Data Source, the physical method of the JDBCTABLE method must look like this:    &#10;java.lang.Class.forName(&quot;sun.jdbc.odbc.JdbcOdbcDriver&quot;)    &#10;this = new com.usoft.connectors.JdbcTable(:3, :4, :5)      &#10;this.setConnection(:0, :1, :2)    &#10;&#10;with parameters:     &#10;0 connection string    &#10;1 account name    &#10;2 account password    &#10;3 table name    &#10;4 column name list ( ; as separator)    &#10;5 key list ( ; as separator)    &#10;&#10;In the default setting, separate USoft applications use the JDBCTable component together with the USoft Rules Service to exchange data. In this case, one USoft application uses a JDBCTable component that connects to another USoft application running as a Rules Service.    &#10;     &#10;In the constructor SQL you must specify the connection string, the account name and password, the table name, all column names and the primary column names of the table. With this information, the component behaves as an RDBMS table that accepts SELECTS, INSERTS, and UPDATES, but these requests are handled by the JDBC data source. The current (example) JDBCTABLE component table contains two columns.    &#10;&#10;For example, a typical constructor SQL looks like this:    &#10;select     &#10;'&lt;connection string&gt;',   (e.g. 'jdbc:odbc:mydb?)    &#10;'&lt;account name&gt;',   (e.g. 'user')    &#10;'&lt;account password&gt;',  (e.g. 'pwd')    &#10;'&lt;table name&gt;',   (e.g. 'myTableName')    &#10;'&lt;colum name list&gt;',    (e.g. 'myPrimaryKey;myColumnName')     &#10;'&lt;key list&gt;'    (e.g. 'myPrimaryKey')    &#10;&#10;After you have configured the constructor SQL, don't forget to check the constructor SQL on the 'State' tabpage and save the changes.  &#10;&#10;Be aware that your  '&lt;colum name list&gt;' specified above must be equivalent with the columns definitions of your component table.&#10;(Default it only contains two columns) You must set these columns by hand.&#10;&#10;EXAMPLES     &#10;1 Connection String examples:    &#10;- If you want to connect to the USoft RulesService you use the connection string given by the configuration of the Rules Service: 'jdbc:jrec:&lt;application&gt;@&lt;host&gt;:7777'.    &#10;- If you want to connect to an ODBC data source, first load the JDBC-ODBC driver as described above, then specify the connection string. URLs for this protocol are of the form:     &#10; jdbc:odbc:&lt;data-source-name&gt;[;&lt;attribute-name&gt;=&lt;attribute-value&gt;]    &#10; For example:     &#10;     jdbc:odbc:sybase    &#10;     jdbc:odbc:mydb;UID=me;PWD=secret    &#10;     jdbc:odbc:ora123;Cachesize=300    &#10;The column name list must be a string separated by semi-column (?;?), e.g.: ?ID;USERNAME;ADDRESS?    &#10;The primary key list must list all primary key column names, also separated by a semi-column, e.g.: ?ID1;ID2?    &#10;&#10;2 Connecting to an Oracle 10 database.     &#10;You can also use the JDBCTable component to connect to a remote table in an Oracle 10 database:     &#10;(1)  Add a reference to the classes12.zip file in the Classpath environment variable of your  computer, or in your current classpath. With a default Oracle 10 installation, the path is:    &#10;c:\oracle\product\10.2.0\db_2\jdbc\lib\classes12.zip     &#10;(2) Change the physical method of the JDBCTABLE Constructor method to:    &#10;java.lang.Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;)     &#10;this = new com.usoft.connectors.JdbcTable(:3, :4, :5)    this.setConnection(&quot;jdbc:oracle:thin:@&lt;host&gt;:&lt;port&gt;:&lt;SID&gt;&quot; , :1, :2)    &#10;If you have defined an alias for this connection, you can also specify: this.setConnection(&quot;jdbc:oracle:oci:@&lt;alias&gt;&quot; ,:1, :2)   &#10;&#10;Notes:   &#10;1) The date format of the JdbcTable component can be set in the constructor. Check the constructor description.  &#10;2) This import has example setting to connect to a USoft service. It reads a table named PROPERTIES in the (remote) USoft application.&#10;3) The JdbcTable has a timeout set per default to 20 seconds. If you want to change it, add in the JDBCTABLE method, the setTimeout() physical method: e.g. this.setTimeout('30')" T_RDMI_AUTOMATION_SERVER="N" T_RDMI_JAVA_COMPONENT="Y" T_RDMI_STATEFUL_COMPONENT="Y" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" T_RDMI_WEB_SERVICE_COMPONENT="N" T_RDMI_DOTNET_COMPONENT="N" T_RDMI_COMPONENT_CONSTRUCTOR="Y"/>
</Components>
<Domains documentName="Domains">
<T_DOMAIN DOMAIN_NAME="RDMI_STRING" SUPER_DOMAIN="" DATATYPE="VARCHAR2" TOTAL_LENGTH="2000" LENGTH_AFTER_PERIOD="" F_DATATYPE="CHAR" F_TOTAL_LENGTH="8" F_LENGTH_AFTER_PERIOD="" DISPLAY_LENGTH="100" UPPERCASE="N" FIXED_LENGTH="N" IS_SEQNO="N" DEF_VALUE="" RANGE_LOW="" RANGE_HIGH="" HELP_TEXT="" IOFORMAT="" DBFORMAT="" DESCR="" PERC_FULL="" SEQNO_COMPONENT="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" REGEXP=""/>
</Domains>
<J2EE_Components documentName="J2EE Components">
<T_RDMI_JAVA_COMPONENT COMPONENT_NAME="JDBCTABLE" DESCRIPTION="You can use the JDBCTable component to connect to an external data source using JDBC. The JDBCTable component represents a remote table from a data source that can be accessed from a JDBC connection. This remote table is specified by the field names of primary key columns and other columns in the Constructor SQL. A connection string specifies the remote JDBC data source.    &#10;&#10;By default the JDBCTable component uses the USoft JDBC Driver for the Rules Service. If you want to specify another driver, you can load it by adding the 'Class.forName' method to the physical method of the JDBCTABLE constructor.    &#10;For example, to load the sun JdbcOdbc driver, add:    &#10; java.lang.Class.forName(&quot;sun.jdbc.odbc.JdbcOdbcDriver&quot;)    &#10;&#10;If you want to connect to an ODBC Data Source, the physical method of the JDBCTABLE method must look like this:    &#10;java.lang.Class.forName(&quot;sun.jdbc.odbc.JdbcOdbcDriver&quot;)    &#10;this = new com.usoft.connectors.JdbcTable(:3, :4, :5)      &#10;this.setConnection(:0, :1, :2)    &#10;&#10;with parameters:     &#10;0 connection string    &#10;1 account name    &#10;2 account password    &#10;3 table name    &#10;4 column name list ( ; as separator)    &#10;5 key list ( ; as separator)    &#10;&#10;In the default setting, separate USoft applications use the JDBCTable component together with the USoft Rules Service to exchange data. In this case, one USoft application uses a JDBCTable component that connects to another USoft application running as a Rules Service.    &#10;     &#10;In the constructor SQL you must specify the connection string, the account name and password, the table name, all column names and the primary column names of the table. With this information, the component behaves as an RDBMS table that accepts SELECTS, INSERTS, and UPDATES, but these requests are handled by the JDBC data source. The current (example) JDBCTABLE component table contains two columns.    &#10;&#10;For example, a typical constructor SQL looks like this:    &#10;select     &#10;'&lt;connection string&gt;',   (e.g. 'jdbc:odbc:mydb?)    &#10;'&lt;account name&gt;',   (e.g. 'user')    &#10;'&lt;account password&gt;',  (e.g. 'pwd')    &#10;'&lt;table name&gt;',   (e.g. 'myTableName')    &#10;'&lt;colum name list&gt;',    (e.g. 'myPrimaryKey;myColumnName')     &#10;'&lt;key list&gt;'    (e.g. 'myPrimaryKey')    &#10;&#10;After you have configured the constructor SQL, don't forget to check the constructor SQL on the 'State' tabpage and save the changes.  &#10;&#10;Be aware that your  '&lt;colum name list&gt;' specified above must be equivalent with the columns definitions of your component table.&#10;(Default it only contains two columns) You must set these columns by hand.&#10;&#10;EXAMPLES     &#10;1 Connection String examples:    &#10;- If you want to connect to the USoft RulesService you use the connection string given by the configuration of the Rules Service: 'jdbc:jrec:&lt;application&gt;@&lt;host&gt;:7777'.    &#10;- If you want to connect to an ODBC data source, first load the JDBC-ODBC driver as described above, then specify the connection string. URLs for this protocol are of the form:     &#10; jdbc:odbc:&lt;data-source-name&gt;[;&lt;attribute-name&gt;=&lt;attribute-value&gt;]    &#10; For example:     &#10;     jdbc:odbc:sybase    &#10;     jdbc:odbc:mydb;UID=me;PWD=secret    &#10;     jdbc:odbc:ora123;Cachesize=300    &#10;The column name list must be a string separated by semi-column (?;?), e.g.: ?ID;USERNAME;ADDRESS?    &#10;The primary key list must list all primary key column names, also separated by a semi-column, e.g.: ?ID1;ID2?    &#10;&#10;2 Connecting to an Oracle 10 database.     &#10;You can also use the JDBCTable component to connect to a remote table in an Oracle 10 database:     &#10;(1)  Add a reference to the classes12.zip file in the Classpath environment variable of your  computer, or in your current classpath. With a default Oracle 10 installation, the path is:    &#10;c:\oracle\product\10.2.0\db_2\jdbc\lib\classes12.zip     &#10;(2) Change the physical method of the JDBCTABLE Constructor method to:    &#10;java.lang.Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;)     &#10;this = new com.usoft.connectors.JdbcTable(:3, :4, :5)    this.setConnection(&quot;jdbc:oracle:thin:@&lt;host&gt;:&lt;port&gt;:&lt;SID&gt;&quot; , :1, :2)    &#10;If you have defined an alias for this connection, you can also specify: this.setConnection(&quot;jdbc:oracle:oci:@&lt;alias&gt;&quot; ,:1, :2)   &#10;&#10;Notes:   &#10;1) The date format of the JdbcTable component can be set in the constructor. Check the constructor description.  &#10;2) This import has example setting to connect to a USoft service. It reads a table named PROPERTIES in the (remote) USoft application.&#10;3) The JdbcTable has a timeout set per default to 20 seconds. If you want to change it, add in the JDBCTABLE method, the setTimeout() physical method: e.g. this.setTimeout('30')" T_RDMI_AUTOMATION_SERVER="N" T_RDMI_JAVA_COMPONENT="Y" T_RDMI_STATEFUL_COMPONENT="Y" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" T_RDMI_WEB_SERVICE_COMPONENT="N" T_RDMI_DOTNET_COMPONENT="N" T_RDMI_COMPONENT_CONSTRUCTOR="Y"/>
</J2EE_Components>
<Methods documentName="Methods">
<T_RDMI_METHOD COMPONENT_NAME="JDBCTABLE" METHOD_NAME="COMMIT" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="this.Commit" DESCRIPTION="Saves all changes in the external table." INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_METHOD COMPONENT_NAME="JDBCTABLE" METHOD_NAME="DELETEROW" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="this.DeleteRow(argv)" DESCRIPTION="Deletes a record in the external table." INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_METHOD COMPONENT_NAME="JDBCTABLE" METHOD_NAME="INSERTROW" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="this.InsertRow(argv)" DESCRIPTION="Inserts a record in the external table." INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_METHOD COMPONENT_NAME="JDBCTABLE" METHOD_NAME="JDBCTABLE" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="this = new com.usoft.connectors.JdbcTable(:3, :4, :5)    &#10;this.setConnection(:0, :1, :2)&#10;this.loadDriverClass()" DESCRIPTION="This is the constructor method. All parameters can be specified in the Constructor SQL.   &#10;&#10;The date format used by the component can be set by adding a call to the constructors physical method, e.g.:   &#10;this.setDateFormat(&quot;DD-MON-YYYY&quot;);  &#10;&#10;The default applies the oracle specific to_date() function:   &#10;this.setDateFormat(&quot; 'to_date(' ''dd-MMM-yyyy'' ', ' '''DD-MON-YYYY''' ')' &quot;); &#10;&#10;// see the Time Format Description of Java Class SimpleDateFormat, http://java.sun.com/j2se/1.3/docs/api/java/text/SimpleDateFormat.html" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_METHOD COMPONENT_NAME="JDBCTABLE" METHOD_NAME="PRECOMMIT" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="this.PreCommit" DESCRIPTION="This method is used internally." INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_METHOD COMPONENT_NAME="JDBCTABLE" METHOD_NAME="QUERYEXE" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="this.QueryExe(argv)" DESCRIPTION="This method is used within the QUERY protocol." INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_METHOD COMPONENT_NAME="JDBCTABLE" METHOD_NAME="QUERYFETCH" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="this.QueryFetch(argv)" DESCRIPTION="This method is used within the QUERY protocol." INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_METHOD COMPONENT_NAME="JDBCTABLE" METHOD_NAME="ROLLBACK" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="this.Rollback" DESCRIPTION="This method rollbacks all changes in the external table that were made in the current transaction." INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_METHOD COMPONENT_NAME="JDBCTABLE" METHOD_NAME="UPDATEROW" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="this.UpdateRow(argv)" DESCRIPTION="Updates a record in the external table." INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
</Methods>
<Parameters documentName="Parameters">
<T_RDMI_PARAMETER COMPONENT_NAME="JDBCTABLE" PARAMETER_SEQNO="0" METHOD_NAME="JDBCTABLE" METHOD_SEQNO="1" PARAMETER_NAME="Connection String" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="JDBCTABLE" PARAMETER_SEQNO="1" METHOD_NAME="DELETEROW" METHOD_SEQNO="1" PARAMETER_NAME="PROPERTYKEY" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="JDBCTABLE" PARAMETER_SEQNO="1" METHOD_NAME="INSERTROW" METHOD_SEQNO="1" PARAMETER_NAME="PROPERTYKEY" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="JDBCTABLE" PARAMETER_SEQNO="1" METHOD_NAME="JDBCTABLE" METHOD_SEQNO="1" PARAMETER_NAME="Account Name" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="JDBCTABLE" PARAMETER_SEQNO="1" METHOD_NAME="PRECOMMIT" METHOD_SEQNO="1" PARAMETER_NAME="return" KIND="RETURN" PRIMITIVE_DATA_TYPE="LONG" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="JDBCTABLE" PARAMETER_SEQNO="1" METHOD_NAME="QUERYEXE" METHOD_SEQNO="1" PARAMETER_NAME="PROPERTYKEY" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="JDBCTABLE" PARAMETER_SEQNO="1" METHOD_NAME="QUERYFETCH" METHOD_SEQNO="1" PARAMETER_NAME="PROPERTYKEY" KIND="OUT" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="JDBCTABLE" PARAMETER_SEQNO="1" METHOD_NAME="UPDATEROW" METHOD_SEQNO="1" PARAMETER_NAME="PROPERTYKEY" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="JDBCTABLE" PARAMETER_SEQNO="2" METHOD_NAME="INSERTROW" METHOD_SEQNO="1" PARAMETER_NAME="PROPERTYVALUE" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="JDBCTABLE" PARAMETER_SEQNO="2" METHOD_NAME="JDBCTABLE" METHOD_SEQNO="1" PARAMETER_NAME="Account Password" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="JDBCTABLE" PARAMETER_SEQNO="2" METHOD_NAME="QUERYEXE" METHOD_SEQNO="1" PARAMETER_NAME="PROPERTYVALUE" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="JDBCTABLE" PARAMETER_SEQNO="2" METHOD_NAME="QUERYFETCH" METHOD_SEQNO="1" PARAMETER_NAME="PROPERTYVALUE" KIND="OUT" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="JDBCTABLE" PARAMETER_SEQNO="2" METHOD_NAME="UPDATEROW" METHOD_SEQNO="1" PARAMETER_NAME="PROPERTYVALUE" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="JDBCTABLE" PARAMETER_SEQNO="3" METHOD_NAME="JDBCTABLE" METHOD_SEQNO="1" PARAMETER_NAME="Table Name" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="JDBCTABLE" PARAMETER_SEQNO="4" METHOD_NAME="JDBCTABLE" METHOD_SEQNO="1" PARAMETER_NAME="Column Name List ( ; as separator)" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="JDBCTABLE" PARAMETER_SEQNO="5" METHOD_NAME="JDBCTABLE" METHOD_SEQNO="1" PARAMETER_NAME="Primary Key Column List ( ; as separator)" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="JDBCTABLE" PARAMETER_SEQNO="999" METHOD_NAME="QUERYEXE" METHOD_SEQNO="1" PARAMETER_NAME="return" KIND="RETURN" PRIMITIVE_DATA_TYPE="LONG" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="JDBCTABLE" PARAMETER_SEQNO="999" METHOD_NAME="QUERYFETCH" METHOD_SEQNO="1" PARAMETER_NAME="return" KIND="RETURN" PRIMITIVE_DATA_TYPE="LONG" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
</Parameters>
<Query_Protocol_Associations documentName="Query Protocol Associations">
<T_RDMI_QUERY_PROTOCOL COMPONENT_NAME="JDBCTABLE" PROTOCOL_NAME="QUERY" DESCRIPTION="" T_RDMI_QUERY_PROTOCOL="Y" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" T_RDMI_AGGREGATE_PROTOCOL="N" QP_EXE_METHOD_NAME="QUERYEXE" QP_EXE_COMPONENT_NAME="JDBCTABLE" QP_EXE_METHOD_SEQNO="1" QP_FETCH_COMPONENT_NAME="JDBCTABLE" QP_FETCH_METHOD_NAME="QUERYFETCH" QP_FETCH_METHOD_SEQNO="1"/>
</Query_Protocol_Associations>
<Stateful_Components documentName="Stateful Components">
<T_RDMI_STATEFUL_COMPONENT COMPONENT_NAME="JDBCTABLE" DESCRIPTION="You can use the JDBCTable component to connect to an external data source using JDBC. The JDBCTable component represents a remote table from a data source that can be accessed from a JDBC connection. This remote table is specified by the field names of primary key columns and other columns in the Constructor SQL. A connection string specifies the remote JDBC data source.    &#10;&#10;By default the JDBCTable component uses the USoft JDBC Driver for the Rules Service. If you want to specify another driver, you can load it by adding the 'Class.forName' method to the physical method of the JDBCTABLE constructor.    &#10;For example, to load the sun JdbcOdbc driver, add:    &#10; java.lang.Class.forName(&quot;sun.jdbc.odbc.JdbcOdbcDriver&quot;)    &#10;&#10;If you want to connect to an ODBC Data Source, the physical method of the JDBCTABLE method must look like this:    &#10;java.lang.Class.forName(&quot;sun.jdbc.odbc.JdbcOdbcDriver&quot;)    &#10;this = new com.usoft.connectors.JdbcTable(:3, :4, :5)      &#10;this.setConnection(:0, :1, :2)    &#10;&#10;with parameters:     &#10;0 connection string    &#10;1 account name    &#10;2 account password    &#10;3 table name    &#10;4 column name list ( ; as separator)    &#10;5 key list ( ; as separator)    &#10;&#10;In the default setting, separate USoft applications use the JDBCTable component together with the USoft Rules Service to exchange data. In this case, one USoft application uses a JDBCTable component that connects to another USoft application running as a Rules Service.    &#10;     &#10;In the constructor SQL you must specify the connection string, the account name and password, the table name, all column names and the primary column names of the table. With this information, the component behaves as an RDBMS table that accepts SELECTS, INSERTS, and UPDATES, but these requests are handled by the JDBC data source. The current (example) JDBCTABLE component table contains two columns.    &#10;&#10;For example, a typical constructor SQL looks like this:    &#10;select     &#10;'&lt;connection string&gt;',   (e.g. 'jdbc:odbc:mydb?)    &#10;'&lt;account name&gt;',   (e.g. 'user')    &#10;'&lt;account password&gt;',  (e.g. 'pwd')    &#10;'&lt;table name&gt;',   (e.g. 'myTableName')    &#10;'&lt;colum name list&gt;',    (e.g. 'myPrimaryKey;myColumnName')     &#10;'&lt;key list&gt;'    (e.g. 'myPrimaryKey')    &#10;&#10;After you have configured the constructor SQL, don't forget to check the constructor SQL on the 'State' tabpage and save the changes.  &#10;&#10;Be aware that your  '&lt;colum name list&gt;' specified above must be equivalent with the columns definitions of your component table.&#10;(Default it only contains two columns) You must set these columns by hand.&#10;&#10;EXAMPLES     &#10;1 Connection String examples:    &#10;- If you want to connect to the USoft RulesService you use the connection string given by the configuration of the Rules Service: 'jdbc:jrec:&lt;application&gt;@&lt;host&gt;:7777'.    &#10;- If you want to connect to an ODBC data source, first load the JDBC-ODBC driver as described above, then specify the connection string. URLs for this protocol are of the form:     &#10; jdbc:odbc:&lt;data-source-name&gt;[;&lt;attribute-name&gt;=&lt;attribute-value&gt;]    &#10; For example:     &#10;     jdbc:odbc:sybase    &#10;     jdbc:odbc:mydb;UID=me;PWD=secret    &#10;     jdbc:odbc:ora123;Cachesize=300    &#10;The column name list must be a string separated by semi-column (?;?), e.g.: ?ID;USERNAME;ADDRESS?    &#10;The primary key list must list all primary key column names, also separated by a semi-column, e.g.: ?ID1;ID2?    &#10;&#10;2 Connecting to an Oracle 10 database.     &#10;You can also use the JDBCTable component to connect to a remote table in an Oracle 10 database:     &#10;(1)  Add a reference to the classes12.zip file in the Classpath environment variable of your  computer, or in your current classpath. With a default Oracle 10 installation, the path is:    &#10;c:\oracle\product\10.2.0\db_2\jdbc\lib\classes12.zip     &#10;(2) Change the physical method of the JDBCTABLE Constructor method to:    &#10;java.lang.Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;)     &#10;this = new com.usoft.connectors.JdbcTable(:3, :4, :5)    this.setConnection(&quot;jdbc:oracle:thin:@&lt;host&gt;:&lt;port&gt;:&lt;SID&gt;&quot; , :1, :2)    &#10;If you have defined an alias for this connection, you can also specify: this.setConnection(&quot;jdbc:oracle:oci:@&lt;alias&gt;&quot; ,:1, :2)   &#10;&#10;Notes:   &#10;1) The date format of the JdbcTable component can be set in the constructor. Check the constructor description.  &#10;2) This import has example setting to connect to a USoft service. It reads a table named PROPERTIES in the (remote) USoft application.&#10;3) The JdbcTable has a timeout set per default to 20 seconds. If you want to change it, add in the JDBCTABLE method, the setTimeout() physical method: e.g. this.setTimeout('30')" T_RDMI_AUTOMATION_SERVER="N" T_RDMI_JAVA_COMPONENT="Y" T_RDMI_STATEFUL_COMPONENT="Y" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" T_RDMI_WEB_SERVICE_COMPONENT="N" T_RDMI_DOTNET_COMPONENT="N" T_RDMI_COMPONENT_CONSTRUCTOR="Y" LIFETIME="TRANSACTION" TRANSACTIONAL="Y" SUPPORTS_COMMIT="Y" SUPPORTS_ROLLBACK="Y" SUPPORTS_PRECOMMIT="Y" SUPPORTS_TABLECOMPONENT="Y" SUPPORTS_UPDATE="Y" SUPPORTS_INSERT="Y" SUPPORTS_DELETE="Y" SUPPORTS_CONDITIONS="N" SUPPORTS_ROWSETSIZEHINT="N"/>
</Stateful_Components>
<Tables documentName="Tables">
<T_TABLE TABLE_NAME="JDBCTABLE" TABLE_SHORT="JDBCTABLE" OBJECT_NAME="jdbctable" OBJECT_NAME_PLURAL="JdbcTable" KEYHIDDEN="N" CRETAB="N" UPDATED="Y" STATIC_TABLE="N" INIT_NR_OF_ROWS="1000" NEXT_NR_OF_ROWS="500" T_SUBT_SUPERTYPE="" T_SUBT_SEPARATE_TABLE="Y" DELETE_SUPER_ON_DELETE="Y" T_LOGICAL_VIEW="N" T_COMPONENT_TABLE="Y" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" INTERFACE_SOURCE="" UNDER_VC="N" DELIVERABLE="N"/>
</Tables>
</MultiImport>
