<?xml version="1.0" encoding="UTF-8"?>
<?usoft-xml version="1.0" action="multi-tables-import"?><MultiImport>
<Component_Constructors documentName="Component Constructors">
<T_RDMI_COMPONENT_CONSTRUCTOR COMPONENT_NAME="OTS_XML_SIGNING" DESCRIPTION="This OTS_XML_SIGNING example component has methods to add a signature, verify a signature and remove a signature from an XML document.&#13;&#10;&#13;&#10;In the application, using SqlCommand, you can test the methods with the following examples:&#13;&#10;&#13;&#10;-1- Adding a signature. Assuming a certificate with private key  available for company.com:&#13;&#10;&#13;&#10;&#9;select OTS_XML_SIGNING.AddSignature&#13;&#10;&#9;(&#13;&#10;&#9;&#9;'c:\temp\yourxmlfile.xml',  '*.company.com', 'c:\temp\yoursignedxmlfile.xml'&#13;&#10;&#9;)&#13;&#10;&#9;or e.g. signing xml export data directly:&#13;&#10;&#9;select OTS_XML_SIGNING.AddSignature&#13;&#10;&#9;(&#13;&#10;&#9;&#9;(invoke xml.export with select * from mytable),  '*.company.com', 'c:\temp\yoursignedxmlfile.xml'&#13;&#10;&#9;)&#13;&#10;&#13;&#10;-2- Verifying the signature:&#13;&#10;&#9;select OTS_XML_SIGNING.VerifySignature&#13;&#10;&#9;(&#13;&#10;&#9;&#9;'c:\temp\yoursignedxmlfile.xml', '*.company.com'&#13;&#10;&#9;)&#13;&#10;&#13;&#10;-3- Removing the signature (assuming the signature is valid):&#13;&#10;&#9;select OTS_XML_SIGNING.RemoveSignature&#13;&#10;&#9;(&#13;&#10;&#9;&#9;'c:\temp\yoursignedxmlfile.xml', '*.company.com', ''&#13;&#10;&#9;)&#13;&#10;&#9;This removal allows further processing of the xml file without the extra &lt;Signature&gt;... data" T_RDMI_AUTOMATION_SERVER="N" T_RDMI_JAVA_COMPONENT="N" T_RDMI_STATEFUL_COMPONENT="Y" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" T_RDMI_WEB_SERVICE_COMPONENT="N" T_RDMI_DOTNET_COMPONENT="Y" T_RDMI_COMPONENT_CONSTRUCTOR="Y" CONSTRUCTOR_SQL="" ACTIVE="N"/>
</Component_Constructors>
<Components documentName="Components">
<T_RDMI_COMPONENT COMPONENT_NAME="OTS_XML_SIGNING" DESCRIPTION="This OTS_XML_SIGNING example component has methods to add a signature, verify a signature and remove a signature from an XML document.&#13;&#10;&#13;&#10;In the application, using SqlCommand, you can test the methods with the following examples:&#13;&#10;&#13;&#10;-1- Adding a signature. Assuming a certificate with private key  available for company.com:&#13;&#10;&#13;&#10;&#9;select OTS_XML_SIGNING.AddSignature&#13;&#10;&#9;(&#13;&#10;&#9;&#9;'c:\temp\yourxmlfile.xml',  '*.company.com', 'c:\temp\yoursignedxmlfile.xml'&#13;&#10;&#9;)&#13;&#10;&#9;or e.g. signing xml export data directly:&#13;&#10;&#9;select OTS_XML_SIGNING.AddSignature&#13;&#10;&#9;(&#13;&#10;&#9;&#9;(invoke xml.export with select * from mytable),  '*.company.com', 'c:\temp\yoursignedxmlfile.xml'&#13;&#10;&#9;)&#13;&#10;&#13;&#10;-2- Verifying the signature:&#13;&#10;&#9;select OTS_XML_SIGNING.VerifySignature&#13;&#10;&#9;(&#13;&#10;&#9;&#9;'c:\temp\yoursignedxmlfile.xml', '*.company.com'&#13;&#10;&#9;)&#13;&#10;&#13;&#10;-3- Removing the signature (assuming the signature is valid):&#13;&#10;&#9;select OTS_XML_SIGNING.RemoveSignature&#13;&#10;&#9;(&#13;&#10;&#9;&#9;'c:\temp\yoursignedxmlfile.xml', '*.company.com', ''&#13;&#10;&#9;)&#13;&#10;&#9;This removal allows further processing of the xml file without the extra &lt;Signature&gt;... data" T_RDMI_AUTOMATION_SERVER="N" T_RDMI_JAVA_COMPONENT="N" T_RDMI_STATEFUL_COMPONENT="Y" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" T_RDMI_WEB_SERVICE_COMPONENT="N" T_RDMI_DOTNET_COMPONENT="Y" T_RDMI_COMPONENT_CONSTRUCTOR="Y"/>
</Components>
<DotNet_Components documentName="DotNet Components">
<T_RDMI_DOTNET_COMPONENT COMPONENT_NAME="OTS_XML_SIGNING" DESCRIPTION="This OTS_XML_SIGNING example component has methods to add a signature, verify a signature and remove a signature from an XML document.&#13;&#10;&#13;&#10;In the application, using SqlCommand, you can test the methods with the following examples:&#13;&#10;&#13;&#10;-1- Adding a signature. Assuming a certificate with private key  available for company.com:&#13;&#10;&#13;&#10;&#9;select OTS_XML_SIGNING.AddSignature&#13;&#10;&#9;(&#13;&#10;&#9;&#9;'c:\temp\yourxmlfile.xml',  '*.company.com', 'c:\temp\yoursignedxmlfile.xml'&#13;&#10;&#9;)&#13;&#10;&#9;or e.g. signing xml export data directly:&#13;&#10;&#9;select OTS_XML_SIGNING.AddSignature&#13;&#10;&#9;(&#13;&#10;&#9;&#9;(invoke xml.export with select * from mytable),  '*.company.com', 'c:\temp\yoursignedxmlfile.xml'&#13;&#10;&#9;)&#13;&#10;&#13;&#10;-2- Verifying the signature:&#13;&#10;&#9;select OTS_XML_SIGNING.VerifySignature&#13;&#10;&#9;(&#13;&#10;&#9;&#9;'c:\temp\yoursignedxmlfile.xml', '*.company.com'&#13;&#10;&#9;)&#13;&#10;&#13;&#10;-3- Removing the signature (assuming the signature is valid):&#13;&#10;&#9;select OTS_XML_SIGNING.RemoveSignature&#13;&#10;&#9;(&#13;&#10;&#9;&#9;'c:\temp\yoursignedxmlfile.xml', '*.company.com', ''&#13;&#10;&#9;)&#13;&#10;&#9;This removal allows further processing of the xml file without the extra &lt;Signature&gt;... data" T_RDMI_AUTOMATION_SERVER="N" T_RDMI_JAVA_COMPONENT="N" T_RDMI_STATEFUL_COMPONENT="Y" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" T_RDMI_WEB_SERVICE_COMPONENT="N" T_RDMI_DOTNET_COMPONENT="Y" T_RDMI_COMPONENT_CONSTRUCTOR="Y" ASSEMBLYREFS="System.Xml.dll;System.Security.dll;" PROGRAM_SOURCE="using System;&#13;&#10;using System.Security.Cryptography;&#13;&#10;using System.Security.Cryptography.X509Certificates;&#13;&#10;using System.Text;&#13;&#10;using System.Security.Cryptography.Xml;&#13;&#10;using System.Xml;&#13;&#10;using System.IO;&#13;&#10;using System.Net;&#13;&#10;using System.Xml.Xsl;&#13;&#10;using System.Xml.XPath;&#13;&#10;&#13;&#10;class OTS_XML_SIGNING&#13;&#10;{&#13;&#10;&#9;public OTS_XML_SIGNING()&#13;&#10;&#9;{&#13;&#10;&#9;&#9;const string x = &quot;http://www.w3.org/2001/04/xmldsig-more#rsa-sha256&quot;;&#13;&#10;&#9;&#9;CryptoConfig.AddAlgorithm(typeof (RSAPKCS1SHA512SignatureDescription), x);&#13;&#10;&#9;}&#13;&#10;&#9;public  string AddSignature(string xmlDoc, string subjectName, string result)&#13;&#10;    {&#13;&#10;        if (string.IsNullOrEmpty(xmlDoc))&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;throw new ArgumentNullException(&quot;xmlDoc argument is empty&quot;);&#13;&#10;&#9;&#9;}&#13;&#10;        if (string.IsNullOrEmpty(subjectName)) &#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;throw new ArgumentNullException(&quot;No Certificate subjectName was specified&quot;);&#13;&#10;&#9;&#9;}&#13;&#10;        X509Certificate2 cert = GetCertificateBySubject(subjectName);&#13;&#10;        XmlDocument doc = new XmlDocument();&#13;&#10;        doc.PreserveWhitespace = false;&#13;&#10;&#9;&#9;if(xmlDoc.StartsWith(&quot;&lt;&quot;))&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;doc.LoadXml(xmlDoc);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;doc.Load(xmlDoc);&#13;&#10;&#9;&#9;}&#13;&#10;        SignedXml signedXml = new SignedXml(doc);&#13;&#10;        signedXml.SigningKey = cert.PrivateKey;&#13;&#10;        Reference reference = new Reference();&#13;&#10;        reference.Uri = &quot;&quot;;&#13;&#10;        XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();&#13;&#10;        reference.AddTransform(env);&#13;&#10;        signedXml.AddReference(reference);&#13;&#10;        KeyInfo keyInfo = new KeyInfo();&#13;&#10;        keyInfo.AddClause(new KeyInfoX509Data(cert));&#13;&#10;        signedXml.KeyInfo = keyInfo;&#13;&#10;        signedXml.ComputeSignature();&#13;&#10;        XmlElement xmlDigitalSignature = signedXml.GetXml();&#13;&#10;        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));&#13;&#10;        if (doc.FirstChild is XmlDeclaration)&#13;&#10;        {&#13;&#10;            doc.RemoveChild(doc.FirstChild);&#13;&#10;        }&#13;&#10;&#9;&#9;if(!string.IsNullOrEmpty(result))&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;using (XmlTextWriter xmltw = new XmlTextWriter(result, new UTF8Encoding(false)))&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;if(!string.IsNullOrEmpty(result))&#13;&#10;&#9;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;&#9;doc.WriteTo(xmltw);&#13;&#10;&#9;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;&#9;xmltw.Close();&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;return result;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;using (TextWriter writer = new Utf8StringWriter())&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;using (XmlWriter xmltw = XmlWriter.Create(writer))&#13;&#10;&#9;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;&#9;doc.WriteTo(xmltw);&#13;&#10;&#9;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;&#9;return writer.ToString(); &#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;}&#13;&#10;    }&#13;&#10;&#9;public string RemoveSignature(string xmlDoc, string certificateSubject, string filePath)&#13;&#10;&#9;{&#13;&#10;&#9;&#9;if (string.IsNullOrEmpty(xmlDoc)) &#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;throw new ArgumentNullException(&quot;xmlDocument argument is empty&quot;);&#13;&#10;&#9;&#9;}&#13;&#10;        if (string.IsNullOrEmpty(certificateSubject)) &#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;throw new ArgumentNullException(&quot;No Certificate Subject was specified&quot;);&#13;&#10;&#9;&#9;}&#13;&#10;        X509Certificate2 cert = GetCertificateBySubject(certificateSubject);&#13;&#10;        XmlDocument xmlDocument = new XmlDocument();&#13;&#10;&#9;&#9;if(xmlDoc.StartsWith(&quot;&lt;&quot;))&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;xmlDocument.LoadXml(xmlDoc);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;xmlDocument.Load(xmlDoc);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;if(!VerifySignatureOfDocument(xmlDocument, cert))&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;throw new Exception(&quot;Verification of the signature failed&quot;);&#13;&#10;&#9;&#9;}&#13;&#10;        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;, &quot;*&quot;);&#13;&#10;&#9;&#9;for (int i = 0; i &lt; nodeList.Count; i++)  &#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;nodeList[i].ParentNode.RemoveChild(nodeList[i]);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;if(string.IsNullOrEmpty(filePath))&#13;&#10;&#9;&#9;{&#9;&#13;&#10;&#9;&#9;&#9;return xmlDocument.InnerXml;&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;xmlDocument.Save(filePath);&#13;&#10;&#9;&#9;return filePath;&#13;&#10;&#9;}&#13;&#10;&#13;&#10;    // Verify the signature of an XML file against an asymetric  algorithm and return the result.&#13;&#10;    public Boolean VerifySignature(string xmlDoc, string certificateSubject)&#13;&#10;    {&#13;&#10;        if (string.IsNullOrEmpty(xmlDoc)) throw new ArgumentNullException(&quot;xmlDoc&quot;);&#13;&#10;        if (string.IsNullOrEmpty(certificateSubject)) throw new ArgumentNullException(&quot;certificateSubject&quot;);&#13;&#10;        X509Certificate2 cert = GetCertificateBySubject(certificateSubject);&#13;&#10;        XmlDocument xmlDocument = new XmlDocument();&#13;&#10;&#9;&#9;if(xmlDoc.StartsWith(&quot;&lt;&quot;))&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;xmlDocument.LoadXml(xmlDoc);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;xmlDocument.Load(xmlDoc);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;return VerifySignatureOfDocument(xmlDocument, cert);&#13;&#10;    }&#13;&#10;&#9;private Boolean VerifySignatureOfDocument(XmlDocument xmlDocument, X509Certificate2 cert)&#13;&#10;&#9;{&#13;&#10;        SignedXml signedXml = new SignedXml(xmlDocument);&#13;&#10;        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;, &quot;*&quot;);&#13;&#10;        signedXml.LoadXml((XmlElement)nodeList[0]);&#13;&#10;        return signedXml.CheckSignature(cert, true);&#9;&#9;&#13;&#10;&#9;}&#13;&#10;&#9;public Boolean VerifySignatureWithKey(string xmlDoc, string mimeKey)&#13;&#10;&#9;{&#13;&#10;&#9;&#9;byte[] binaryCertData = Convert.FromBase64String(mimeKey);&#13;&#10;&#9;&#9;X509Certificate2 cert = new X509Certificate2(binaryCertData);&#13;&#10;&#9;&#9;Console.WriteLine(cert.PublicKey.Key.ToXmlString(false));&#13;&#10;&#9;&#9;return _VerifySignatureWithKey(xmlDoc, cert/*cert.PublicKey.Key*/);&#13;&#10;&#9;}&#13;&#10;    private Boolean _VerifySignatureWithKey(string xmlDoc, X509Certificate2 cert /*RSA key*/)&#13;&#10;    {&#13;&#10;        if (string.IsNullOrEmpty(xmlDoc)) throw new ArgumentNullException(&quot;xmlDoc&quot;);&#13;&#10;        XmlDocument xmlDocument = new XmlDocument();&#13;&#10;&#9;&#9;if(xmlDoc.StartsWith(&quot;&lt;&quot;))&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;xmlDocument.LoadXml(xmlDoc);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;xmlDocument.Load(xmlDoc);&#13;&#10;&#9;&#9;}&#13;&#10;        SignedXml signedXml = new SignedXml(xmlDocument);&#13;&#10;        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;, &quot;*&quot;);&#13;&#10;        signedXml.LoadXml((XmlElement)nodeList[0]);&#13;&#10;        return signedXml.CheckSignature(cert, true);&#13;&#10;    }&#13;&#10;&#13;&#10;    private static X509Certificate2 GetCertificateBySubject(string certificateSubject)&#13;&#10;    {&#13;&#10;        if (string.IsNullOrEmpty(certificateSubject))&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;throw new ArgumentNullException(&quot;certificateSubject&quot;);&#13;&#10;&#9;&#9;}&#13;&#10;        // Load the certificate from the certificate store.&#13;&#10;        X509Certificate2 cert = null;&#13;&#10;        X509Store store = new X509Store(&quot;My&quot;, StoreLocation.CurrentUser);&#13;&#10;&#13;&#10;        try&#13;&#10;        {&#13;&#10;            store.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly);&#13;&#10;            X509Certificate2Collection certCol = store.Certificates;&#13;&#10;            // Find the certificate with the specified subject.&#13;&#10;            foreach (X509Certificate2 c in certCol)&#13;&#10;            {&#13;&#10;&#9;&#9;&#9;&#9;Console.WriteLine(c.Subject);&#13;&#10;                if (c.Subject.Contains(certificateSubject))&#13;&#10;                {&#13;&#10;                    cert = c;&#13;&#10;                    break;&#13;&#10;                }&#13;&#10;            }&#13;&#10;            if (cert == null)&#13;&#10;            {&#13;&#10;                throw new CryptographicException(&quot;The certificate could not be found.&quot;);&#13;&#10;            }&#13;&#10;        }&#13;&#10;        finally&#13;&#10;        {&#13;&#10;            store.Close();&#13;&#10;        }&#13;&#10;        return cert;&#13;&#10;    }&#13;&#10;&#13;&#10;&#9;public static string SigningCertFromFederationMetaData(string url)&#13;&#10;&#9;{&#13;&#10;&#9;&#9;WebClient wc = new WebClient();&#13;&#10;&#9;&#9;string xml = wc.DownloadString(url);&#13;&#10;&#9;&#9;if(!string.IsNullOrEmpty(xml))&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;return eval(xml,&#13;&#10;&#9;&#9;&#9;&#9;&quot;/_:EntityDescriptor/_:IDPSSODescriptor/_:KeyDescriptor[@use='signing']/xmldsig:KeyInfo/xmldsig:X509Data/*&quot;,&#13;&#10;&#9;&#9;&#9;new Object[2] { &quot;xmldsig&quot;, &quot;http://www.w3.org/2000/09/xmldsig#&quot; });&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;return &quot;failed&quot;;&#13;&#10;&#9;}&#13;&#10;&#9;public static string eval(string xmlDoc, string xpath, Object[] namespaceAliasPairs)&#13;&#10;&#9;{&#13;&#10;&#9;&#9;StringBuilder result = new StringBuilder();&#13;&#10;&#9;&#9;XmlDocument doc = new XmlDocument();&#13;&#10;        if (xmlDoc.StartsWith(&quot;&lt;&quot;))&#13;&#10;        {&#13;&#10;            doc.LoadXml(xmlDoc);&#13;&#10;        }&#13;&#10;        else&#13;&#10;        {&#13;&#10;            doc.Load(xmlDoc);&#13;&#10;        }&#13;&#10;&#9;&#9;XmlNamespaceManager nsm = new XmlNamespaceManager(doc.NameTable);&#13;&#10;&#9;&#9;XmlNodeList nsList = doc.SelectNodes(@&quot;//namespace::*[not(. = ../../namespace::*)]&quot;);&#13;&#10;&#9;&#9;foreach(XmlNode nsNode in nsList)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;if(nsNode.LocalName.Equals(&quot;xmlns&quot;))&#13;&#10;&#9;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;&#9;continue;&#13;&#10;&#9;&#9;&#9;}&#13;&#10;&#9;&#9;&#9;nsm.AddNamespace(nsNode.LocalName,nsNode.Value);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;nsm.AddNamespace(&quot;_&quot;, doc.DocumentElement.NamespaceURI);&#13;&#10;&#9;&#9;for(int i=0; namespaceAliasPairs!=null &amp;&amp; i &lt; namespaceAliasPairs.Length - 1; i+=2)&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;nsm.AddNamespace((string)namespaceAliasPairs[i], (string)namespaceAliasPairs[i+1]);&#13;&#10;&#9;&#9;}&#13;&#10;        XPathNavigator pn = doc.CreateNavigator();&#13;&#10;        pn.MoveToRoot();&#13;&#10;        pn.MoveToFirstChild();&#13;&#10;        XPathNodeIterator ni = pn.Select(xpath, nsm);&#13;&#10;&#9;&#9;while(ni.MoveNext())&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;result.Append(ni.Current.InnerXml);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;return result.ToString();&#13;&#10;&#9;}&#13;&#10;&#13;&#10;&#9;private class Utf8StringWriter : StringWriter&#13;&#10;&#9;{&#13;&#10;&#9;&#9;public override Encoding Encoding&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9; get { return Encoding.UTF8; }&#13;&#10;&#9;&#9;}&#13;&#10;&#9;}&#13;&#10;}&#13;&#10;&#13;&#10;&#13;&#10;public sealed class RSAPKCS1SHA512SignatureDescription : SignatureDescription&#13;&#10;{&#13;&#10;    public RSAPKCS1SHA512SignatureDescription()&#13;&#10;    {&#13;&#10;&#9;&#9;KeyAlgorithm = &quot;System.Security.Cryptography.RSACryptoServiceProvider&quot;;&#13;&#10;&#9;&#9;DigestAlgorithm = &quot;System.Security.Cryptography.SHA256Managed&quot;;&#13;&#10;&#9;&#9;FormatterAlgorithm = &quot;System.Security.Cryptography.RSAPKCS1SignatureFormatter&quot;;&#13;&#10;&#9;&#9;DeformatterAlgorithm = &quot;System.Security.Cryptography.RSAPKCS1SignatureDeformatter&quot;;&#13;&#10;    }&#13;&#10;&#13;&#10;    public override AsymmetricSignatureDeformatter CreateDeformatter(AsymmetricAlgorithm key)&#13;&#10;    {&#13;&#10;        if( key == null )&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;throw new ArgumentNullException(&quot;AsymmetricAlgorithm key is not defined&quot;);&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;var asymmetricSignatureDeformatter = (AsymmetricSignatureDeformatter)CryptoConfig.CreateFromName(DeformatterAlgorithm);&#13;&#10;&#9;&#9;asymmetricSignatureDeformatter.SetKey(key);&#13;&#10;&#9;&#9;asymmetricSignatureDeformatter.SetHashAlgorithm(&quot;SHA256&quot;);&#13;&#10;&#9;&#9;return asymmetricSignatureDeformatter;&#13;&#10;    }&#13;&#10;&#13;&#10;    public override AsymmetricSignatureFormatter CreateFormatter( AsymmetricAlgorithm key )&#13;&#10;    {&#13;&#10;        if( key == null )&#13;&#10;&#9;&#9;{&#13;&#10;&#9;&#9;&#9;throw new ArgumentNullException( &quot;AsymmetricAlgorithm key is not defined&quot; );&#13;&#10;&#9;&#9;}&#13;&#10;&#9;&#9;var asymmetricSignatureFormatter = (AsymmetricSignatureFormatter)CryptoConfig.CreateFromName(FormatterAlgorithm);&#13;&#10;&#9;&#9;asymmetricSignatureFormatter.SetKey(key);&#13;&#10;&#9;&#9;asymmetricSignatureFormatter.SetHashAlgorithm(&quot;SHA256&quot;);&#13;&#10;&#9;&#9;return asymmetricSignatureFormatter;&#9;&#9;&#13;&#10;    }&#13;&#10;}" DOTNET_ACTIVE="Y" LANGUAGE="C#" ORIGIN="" APP_DOMAIN="Default"/>
</DotNet_Components>
<Methods documentName="Methods">
<T_RDMI_METHOD COMPONENT_NAME="OTS_XML_SIGNING" METHOD_NAME="ADDSIGNATURE" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="AddSignature" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_METHOD COMPONENT_NAME="OTS_XML_SIGNING" METHOD_NAME="EVAL" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="eval" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_METHOD COMPONENT_NAME="OTS_XML_SIGNING" METHOD_NAME="OTS_XML_SIGNING" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="OTS_XML_SIGNING" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_METHOD COMPONENT_NAME="OTS_XML_SIGNING" METHOD_NAME="REMOVESIGNATURE" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="RemoveSignature" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_METHOD COMPONENT_NAME="OTS_XML_SIGNING" METHOD_NAME="SIGNINGCERTFROMFEDERATIONMETADATA" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="SigningCertFromFederationMetaData" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_METHOD COMPONENT_NAME="OTS_XML_SIGNING" METHOD_NAME="VERIFYSIGNATURE" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="VerifySignature" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_METHOD COMPONENT_NAME="OTS_XML_SIGNING" METHOD_NAME="VERIFYSIGNATUREWITHKEY" METHOD_SEQNO="1" PHYSICAL_METHOD_NAME="VerifySignatureWithKey" DESCRIPTION="" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
</Methods>
<Parameters documentName="Parameters">
<T_RDMI_PARAMETER COMPONENT_NAME="OTS_XML_SIGNING" PARAMETER_SEQNO="0" METHOD_NAME="ADDSIGNATURE" METHOD_SEQNO="1" PARAMETER_NAME="Return_From_AddSignature" KIND="RETURN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="OTS_XML_SIGNING" PARAMETER_SEQNO="0" METHOD_NAME="EVAL" METHOD_SEQNO="1" PARAMETER_NAME="Return_From_eval" KIND="RETURN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="OTS_XML_SIGNING" PARAMETER_SEQNO="0" METHOD_NAME="REMOVESIGNATURE" METHOD_SEQNO="1" PARAMETER_NAME="Return_From_RemoveSignature" KIND="RETURN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="OTS_XML_SIGNING" PARAMETER_SEQNO="0" METHOD_NAME="SIGNINGCERTFROMFEDERATIONMETADATA" METHOD_SEQNO="1" PARAMETER_NAME="Return_From_SigningCertFromFederationMetaData" KIND="RETURN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="OTS_XML_SIGNING" PARAMETER_SEQNO="0" METHOD_NAME="VERIFYSIGNATURE" METHOD_SEQNO="1" PARAMETER_NAME="Return_From_VerifySignature" KIND="RETURN" PRIMITIVE_DATA_TYPE="BOOLEAN" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="OTS_XML_SIGNING" PARAMETER_SEQNO="0" METHOD_NAME="VERIFYSIGNATUREWITHKEY" METHOD_SEQNO="1" PARAMETER_NAME="Return_From_VerifySignatureWithKey" KIND="RETURN" PRIMITIVE_DATA_TYPE="BOOLEAN" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="OTS_XML_SIGNING" PARAMETER_SEQNO="1" METHOD_NAME="ADDSIGNATURE" METHOD_SEQNO="1" PARAMETER_NAME="xmldoc" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="OTS_XML_SIGNING" PARAMETER_SEQNO="1" METHOD_NAME="EVAL" METHOD_SEQNO="1" PARAMETER_NAME="xmldoc" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="OTS_XML_SIGNING" PARAMETER_SEQNO="1" METHOD_NAME="REMOVESIGNATURE" METHOD_SEQNO="1" PARAMETER_NAME="xmldoc" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="OTS_XML_SIGNING" PARAMETER_SEQNO="1" METHOD_NAME="SIGNINGCERTFROMFEDERATIONMETADATA" METHOD_SEQNO="1" PARAMETER_NAME="url" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="OTS_XML_SIGNING" PARAMETER_SEQNO="1" METHOD_NAME="VERIFYSIGNATURE" METHOD_SEQNO="1" PARAMETER_NAME="xmldoc" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="OTS_XML_SIGNING" PARAMETER_SEQNO="1" METHOD_NAME="VERIFYSIGNATUREWITHKEY" METHOD_SEQNO="1" PARAMETER_NAME="xmldoc" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="OTS_XML_SIGNING" PARAMETER_SEQNO="2" METHOD_NAME="ADDSIGNATURE" METHOD_SEQNO="1" PARAMETER_NAME="SubjectName" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="OTS_XML_SIGNING" PARAMETER_SEQNO="2" METHOD_NAME="EVAL" METHOD_SEQNO="1" PARAMETER_NAME="xpath" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="OTS_XML_SIGNING" PARAMETER_SEQNO="2" METHOD_NAME="REMOVESIGNATURE" METHOD_SEQNO="1" PARAMETER_NAME="CertificateSubject" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="OTS_XML_SIGNING" PARAMETER_SEQNO="2" METHOD_NAME="VERIFYSIGNATURE" METHOD_SEQNO="1" PARAMETER_NAME="CertificateSubject" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="OTS_XML_SIGNING" PARAMETER_SEQNO="2" METHOD_NAME="VERIFYSIGNATUREWITHKEY" METHOD_SEQNO="1" PARAMETER_NAME="mimeKey" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="OTS_XML_SIGNING" PARAMETER_SEQNO="3" METHOD_NAME="ADDSIGNATURE" METHOD_SEQNO="1" PARAMETER_NAME="result" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="OTS_XML_SIGNING" PARAMETER_SEQNO="3" METHOD_NAME="EVAL" METHOD_SEQNO="1" PARAMETER_NAME="namespacealiaspairs" KIND="INLIST" PRIMITIVE_DATA_TYPE="VARIABLE" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
<T_RDMI_PARAMETER COMPONENT_NAME="OTS_XML_SIGNING" PARAMETER_SEQNO="3" METHOD_NAME="REMOVESIGNATURE" METHOD_SEQNO="1" PARAMETER_NAME="filepath" KIND="IN" PRIMITIVE_DATA_TYPE="STRING" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y"/>
</Parameters>
<Stateful_Components documentName="Stateful Components">
<T_RDMI_STATEFUL_COMPONENT COMPONENT_NAME="OTS_XML_SIGNING" DESCRIPTION="This OTS_XML_SIGNING example component has methods to add a signature, verify a signature and remove a signature from an XML document.&#13;&#10;&#13;&#10;In the application, using SqlCommand, you can test the methods with the following examples:&#13;&#10;&#13;&#10;-1- Adding a signature. Assuming a certificate with private key  available for company.com:&#13;&#10;&#13;&#10;&#9;select OTS_XML_SIGNING.AddSignature&#13;&#10;&#9;(&#13;&#10;&#9;&#9;'c:\temp\yourxmlfile.xml',  '*.company.com', 'c:\temp\yoursignedxmlfile.xml'&#13;&#10;&#9;)&#13;&#10;&#9;or e.g. signing xml export data directly:&#13;&#10;&#9;select OTS_XML_SIGNING.AddSignature&#13;&#10;&#9;(&#13;&#10;&#9;&#9;(invoke xml.export with select * from mytable),  '*.company.com', 'c:\temp\yoursignedxmlfile.xml'&#13;&#10;&#9;)&#13;&#10;&#13;&#10;-2- Verifying the signature:&#13;&#10;&#9;select OTS_XML_SIGNING.VerifySignature&#13;&#10;&#9;(&#13;&#10;&#9;&#9;'c:\temp\yoursignedxmlfile.xml', '*.company.com'&#13;&#10;&#9;)&#13;&#10;&#13;&#10;-3- Removing the signature (assuming the signature is valid):&#13;&#10;&#9;select OTS_XML_SIGNING.RemoveSignature&#13;&#10;&#9;(&#13;&#10;&#9;&#9;'c:\temp\yoursignedxmlfile.xml', '*.company.com', ''&#13;&#10;&#9;)&#13;&#10;&#9;This removal allows further processing of the xml file without the extra &lt;Signature&gt;... data" T_RDMI_AUTOMATION_SERVER="N" T_RDMI_JAVA_COMPONENT="N" T_RDMI_STATEFUL_COMPONENT="Y" INTERFACE="N" MODULE="" INTERFACE_CORRECT="Y" T_RDMI_WEB_SERVICE_COMPONENT="N" T_RDMI_DOTNET_COMPONENT="Y" T_RDMI_COMPONENT_CONSTRUCTOR="Y" LIFETIME="SESSION" TRANSACTIONAL="N" SUPPORTS_COMMIT="N" SUPPORTS_ROLLBACK="N" SUPPORTS_PRECOMMIT="N" SUPPORTS_TABLECOMPONENT="N" SUPPORTS_UPDATE="N" SUPPORTS_INSERT="N" SUPPORTS_DELETE="N" SUPPORTS_CONDITIONS="N" SUPPORTS_ROWSETSIZEHINT="N"/>
</Stateful_Components>
</MultiImport>
